import { useState, useEffect, useRef } from "react";
import {
FileText, Upload, AlertCircle, CheckCircle2, Loader2, 
  Plus, Trash2, Save, Eye, EyeOff, Download, RefreshCw, 
  Edit3, Calendar, FileSpreadsheet, ChevronRight, Sparkles, 
  Database, X, ArrowLeft, Maximize2, ZoomIn, ZoomOut, RotateCw, 
  ExternalLink, Building, Package, Users, BadgeCheck, Target, 
  MoreHorizontal, Copy, Share2, Settings, Filter, Clock, 
  Activity, ChevronLeft, ChevronDown, FileDown, FileOutput,
  Printer, FileCheck, Receipt, Truck, Archive, FolderOpen,
  Hash, ShoppingCart, Send, PackageCheck, Grid3x3, Layers,
  Focus, SplitSquareHorizontal, MousePointer, FileEdit,
  BookOpen, FilePlus, HardDrive, CloudDownload, FileType
} from "lucide-react";

// Offline pdf.js via npm
import { getDocument, GlobalWorkerOptions, Util } from "pdfjs-dist";
import pdfWorker from "pdfjs-dist/build/pdf.worker.mjs?url";
import Tesseract from "tesseract.js";

// Excel & Word exports
import * as XLSX from 'xlsx';

export default function SuperInvoiceAnalyzer() {
  // ========== Core State ==========
  const [documents, setDocuments] = useState([]); // Multiple documents before confirmation
  const [currentDocIndex, setCurrentDocIndex] = useState(0);
  const [processing, setProcessing] = useState(false);
  const [progress, setProgress] = useState(0);
  const [progressStep, setProgressStep] = useState('');
  const [error, setError] = useState(null);
  const [llmStatus, setLlmStatus] = useState("checking");
  
  // ========== UI State ==========
  const [viewMode, setViewMode] = useState('normal'); // normal, focus, creation
  const [editMode, setEditMode] = useState(false);
  const [showPreview, setShowPreview] = useState(true);
  const [showLargePreview, setShowLargePreview] = useState(false);
  const [zoomLevel, setZoomLevel] = useState(100);
  const [currentPage, setCurrentPage] = useState(1);
  const [showDebug, setShowDebug] = useState(false);
  
  // ========== Project & Position State ==========
  const [projects, setProjects] = useState([]);
  const [positions, setPositions] = useState([]);
  const [selectedProject, setSelectedProject] = useState(null);
  const [selectedPosition, setSelectedPosition] = useState(null);
  const [confirmedDocuments, setConfirmedDocuments] = useState([]);
  
  // ========== Document Creation State ==========
  const [showCreationModal, setShowCreationModal] = useState(false);
  const [creationType, setCreationType] = useState(null);
  const [creationData, setCreationData] = useState(null);
  
  // ========== Multi-document State ==========
  const [pendingFiles, setPendingFiles] = useState([]);
  const [batchMode, setBatchMode] = useState(false);
  
  const fileInputRef = useRef(null);

  // ========== Document Types ==========
  const DOCUMENT_TYPES = {
    'request': { label: 'Zahtjev za ponudu', icon: FileText, color: '#8b5cf6', internal: false },
    'quote': { label: 'Ponuda', icon: FileCheck, color: '#3b82f6', internal: false },
    'invoice': { label: 'RaÄun', icon: Receipt, color: '#10b981', internal: false },
    'delivery': { label: 'Otpremnica', icon: Truck, color: '#f59e0b', internal: true },
    'transfer': { label: 'MeÄ‘uskladiÅ¡nica', icon: Archive, color: '#06b6d4', internal: true },
    'receipt': { label: 'Primka', icon: PackageCheck, color: '#ec4899', internal: true }
  };

  const INTERNAL_DOCS = ['delivery', 'transfer', 'receipt'];

  // Advanced mock data
  const mockImages = {
    "PROFIL": "https://images.unsplash.com/photo-1565191999001-551c187427bb?w=200&h=200&fit=crop",
    "STAKLO": "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=200&h=200&fit=crop",
    "BRTVA": "https://images.unsplash.com/photo-1589939705384-5185137a7f0f?w=200&h=200&fit=crop",
    "VIJAK": "https://images.unsplash.com/photo-1609205807107-e8ec7120f9de?w=200&h=200&fit=crop",
    "KLIJEÅ TA": "https://images.unsplash.com/photo-1572981779307-38b8cabb2407?w=200&h=200&fit=crop",
    "DEFAULT": "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=200&h=200&fit=crop"
  };

  const getItemImage = (description) => {
    if (!description) return mockImages.DEFAULT;
    const upper = description.toUpperCase();
    if (upper.includes("PROFIL") || upper.includes("ALU")) return mockImages.PROFIL;
    if (upper.includes("STAKLO") || upper.includes("GLASS")) return mockImages.STAKLO;
    if (upper.includes("BRTVA") || upper.includes("SEAL")) return mockImages.BRTVA;
    if (upper.includes("VIJAK") || upper.includes("SCREW")) return mockImages.VIJAK;
    if (upper.includes("KLIJEÅ TA") || upper.includes("CLIP")) return mockImages.KLIJEÅTA;
    return mockImages.DEFAULT;
  };

  // LM Studio enhanced config
  const LM_STUDIO_CONFIG = {
  endpoint: "http://localhost:1234/v1/chat/completions",
  model: "local-model",
  max_tokens: 4096,
  temperature: 0.2,
  headers: { "Content-Type": "application/json" }
};

  // ========== Initialization ==========
  useEffect(() => {
    GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/4.3.136/pdf.worker.mjs';
    loadMockData();
    checkLLMStatus();
  }, []);

  const loadMockData = () => {
    setProjects([
      { id: 'PRJ-001', name: 'Neboder Centar', client: 'Invest Group d.o.o.', location: 'Zagreb' },
      { id: 'PRJ-002', name: 'Shopping Mall West', client: 'Mall Holdings', location: 'Split' },
      { id: 'PRJ-003', name: 'Office Park Nova', client: 'Business Park d.o.o.', location: 'Rijeka' },
      { id: 'PRJ-004', name: 'Hotel Adriatic', client: 'Tourism Group', location: 'Dubrovnik' },
      { id: 'PRJ-005', name: 'Residential Complex', client: 'Urban Development', location: 'Osijek' }
    ]);
    
    setPositions([
      { id: 'POS-001', name: 'CW-12', floor: 1, project: 'PRJ-001', type: 'curtain_wall' },
      { id: 'POS-002', name: 'D-45', floor: 2, project: 'PRJ-001', type: 'door' },
      { id: 'POS-003', name: 'W-78', floor: 3, project: 'PRJ-002', type: 'window' },
      { id: 'POS-004', name: 'P-90', floor: 1, project: 'PRJ-003', type: 'partition' },
      { id: 'POS-005', name: 'F-123', floor: 4, project: 'PRJ-001', type: 'facade' }
    ]);
  };

  const checkLLMStatus = async () => {
    try {
      const res = await fetch("http://localhost:1234/v1/models");
      setLlmStatus(res.ok ? "connected" : "offline");
    } catch {
      setLlmStatus("offline");
    }
  };

  // ========== Progress Management ==========
  const updateProgress = (step, percent) => {
    setProgressStep(step);
    setProgress(percent);
  };

  // ========== Enhanced Document Processing ==========
  const processMultipleFiles = async (files) => {
    setBatchMode(true);
    setProcessing(true);
    const processedDocs = [];
    
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      updateProgress(`ObraÄ‘ujem dokument ${i + 1}/${files.length}: ${file.name}`, (i / files.length) * 100);
      
      try {
        const doc = await processSingleFile(file);
        processedDocs.push(doc);
      } catch (err) {
        console.error(`Error processing ${file.name}:`, err);
        processedDocs.push({
          id: `DOC-${Date.now()}-${i}`,
          fileName: file.name,
          error: err.message,
          status: 'error'
        });
      }
    }
    
    setDocuments(processedDocs);
    setCurrentDocIndex(0);
    setProcessing(false);
    setBatchMode(false);
    updateProgress('ZavrÅ¡eno!', 100);
    
    setTimeout(() => {
      setProgress(0);
      setProgressStep('');
    }, 2000);
  };

  const processSingleFile = async (file) => {
    // Enhanced extraction
    const extractedData = await extractStructuredData(file);
    
    // Super-powered LLM analysis
    const analysis = await analyzeWithSuperLLM(extractedData);
    
    // Generate preview
    const preview = await createPreview(file);
    
    return {
      id: `DOC-${Date.now()}-${Math.random().toString(36).slice(2)}`,
      fileName: file.name,
      fileType: file.type,
      uploadDate: new Date().toISOString(),
      rawData: extractedData,
      analysis,
      preview,
      status: 'processed',
      documentType: analysis.documentType || 'invoice'
    };
  };

  // ========== SUPER-POWERED LLM ANALYSIS ==========
  const analyzeWithSuperLLM = async (extractedData) => {
    if (llmStatus !== "connected") {
      return analyzeWithAdvancedRegex(extractedData.rawText);
    }

    updateProgress('Super LLM analiza u tijeku...', 70);
    
    const enhancedPrompt = createSuperPrompt(extractedData);

    const systemPrompt = `Ti si ekspert za analizu hrvatskih poslovnih dokumenata s AI super-sposobnostima. 

ZADATAK: Analiziraj dokument i izvuci MAKSIMALNO podataka. Vrati JSON sa svim moguÄ‡im podacima:

{
  "documentType": "request|quote|invoice|delivery|transfer|receipt",
  "confidence": 0.95,
  "documentNumber": "string",
  "date": "YYYY-MM-DD",
  "dueDate": "YYYY-MM-DD", 
  "issueDate": "YYYY-MM-DD",
  "deliveryDate": "YYYY-MM-DD",
  "paymentTerms": "string (nacin i uvjeti placanja)",
  "currency": "HRK|EUR|USD",
  "language": "hr|en",
  "pages": number,
  "supplier": {
    "name": "string",
    "oib": "string (11 znamenki)",
    "address": "string", 
    "city": "string",
    "zipCode": "string",
    "country": "string",
    "iban": "string",
    "swift": "string",
    "phone": "string",
    "email": "string",
    "website": "string",
    "vatNumber": "string",
    "registrationNumber": "string",
    "contact": "string (kontakt osoba)"
  },
  "buyer": {
    "name": "string",
    "oib": "string", 
    "address": "string",
    "city": "string",
    "zipCode": "string", 
    "country": "string",
    "phone": "string",
    "email": "string",
    "contact": "string"
  },
  "delivery": {
    "address": "string",
    "date": "YYYY-MM-DD",
    "method": "string",
    "terms": "string"
  },
  "items": [
    {
      "position": number,
      "code": "string (artikl sifra)",
      "ean": "string (bar kod)",
      "description": "string (puni opis)",
      "category": "string (kategorija proizvoda)",
      "brand": "string (marka)",
      "model": "string",
      "color": "string",
      "material": "string",
      "dimensions": "string (dimenzije)",
      "weight": "string",
      "quantity": number,
      "unit": "string (kom, m2, kg, m, lit)",
      "unitPrice": number,
      "discount": number,
      "discountPercent": number,
      "netPrice": number,
      "vatRate": number,
      "vatAmount": number,
      "totalPrice": number,
      "notes": "string (napomene za stavku)",
      "specifications": "string (tehnicke specifikacije)"
    }
  ],
  "totals": {
    "itemsCount": number,
    "totalQuantity": number,
    "subtotal": number,
    "totalDiscount": number,
    "netAmount": number,
    "vatAmount": number,
    "totalAmount": number,
    "paidAmount": number,
    "remainingAmount": number
  },
  "references": {
    "orderNumber": "string",
    "quotationNumber": "string", 
    "contractNumber": "string",
    "projectNumber": "string",
    "customerReference": "string",
    "supplierReference": "string"
  },
  "banking": {
    "iban": "string",
    "swift": "string",
    "bank": "string",
    "paymentReference": "string (poziv na broj)",
    "paymentModel": "string (model placanja)"
  },
  "logistics": {
    "warehouse": "string",
    "deliveryMethod": "string",
    "trackingNumber": "string",
    "carrier": "string",
    "weight": "string",
    "volume": "string",
    "packages": number
  },
  "quality": {
    "approved": boolean,
    "inspector": "string",
    "certificate": "string",
    "standard": "string"
  },
  "notes": "string (dodatne napomene)",
  "terms": "string (uvjeti poslovanja)",
  "signatures": {
    "issuer": "string", 
    "receiver": "string",
    "approver": "string"
  }
}

VAÅ½NO:
- Izvuci SVE moguÄ‡e stavke iz tablice/liste
- Analiziraj pozorno svaki red tablice
- Za hrvatske dokumente PDV je obiÄno 25%
- Prepoznaj tip dokumenta iz sadrÅ¾aja i naziva
- Ako nema podatka, stavi null
- Budi precizan s brojevima i datumima`;

    try {
      const response = await fetch(LM_STUDIO_CONFIG.endpoint, {
        method: "POST",
        headers: { 
          "Content-Type": "application/json",
          "Accept": "application/json"
        },
        body: JSON.stringify({
          model: LM_STUDIO_CONFIG.model,
          messages: [
            { role: "system", content: systemPrompt },
            { role: "user", content: enhancedPrompt }
          ],
          temperature: 0.05,
          max_tokens: 6000,
          stream: false
        }),
      });

      const result = await response.json();
      const content = result?.choices?.[0]?.message?.content || "";
      
      // Extract JSON from response
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        try {
          const parsed = JSON.parse(jsonMatch[0]);
          updateProgress('Super analiza zavrÅ¡ena!', 90);
          return parsed;
        } catch (e) {
          console.error("JSON parse error:", e);
        }
      }
      
      throw new Error("Invalid LLM response format");
    } catch (err) {
      console.error("Super LLM failed:", err);
      updateProgress('Koristim napredni regex...', 80);
      return analyzeWithAdvancedRegex(extractedData.rawText);
    }
  };

  const createSuperPrompt = (extractedData) => {
    let prompt = `# SUPER ANALIZA HRVATSKOG POSLOVNOG DOKUMENTA\n\n`;
    prompt += `**Datoteka:** ${extractedData.metadata?.fileName || "Unknown"}\n`;
    prompt += `**VeliÄina:** ${extractedData.rawText?.length || 0} znakova\n\n`;
    
    // Add OCR confidence if available
    if (extractedData.confidence) {
      prompt += `**OCR Confidence:** ${extractedData.confidence}%\n\n`;
    }
    
    // Add positional data from OCR
    if (extractedData.words && extractedData.words.length > 0) {
      prompt += `## DETALJNI POZICIJSKI PODACI (OCR)\n`;
      prompt += `Mapa tekstualnih elemenata s pozicijama:\n\n`;
      
      const highConfidenceWords = extractedData.words.filter(w => w.confidence > 0.7);
      highConfidenceWords.slice(0, 50).forEach((word, idx) => {
        prompt += `[${idx + 1}] "${word.text}" @ (${word.x}, ${word.y}) conf:${word.confidence.toFixed(2)}\n`;
      });
      
      if (extractedData.lines) {
        prompt += `\n## STRUKTURA LINIJA:\n`;
        extractedData.lines.slice(0, 20).forEach((line, idx) => {
          if (line.confidence > 0.6) {
            prompt += `Linija ${idx + 1}: ${line.text}\n`;
          }
        });
      }
    }
    
    // Add PDF structure if available
    if (extractedData.textBlocks && extractedData.textBlocks.length > 0) {
      prompt += `\n## STRUKTURIRANI BLOKOVI (PDF):\n\n`;
      extractedData.textBlocks.forEach((block, idx) => {
        prompt += `Blok ${idx + 1} (Y:${Math.round(block.y)}): ${block.text}\n`;
      });
    }

    prompt += `\n## KOMPLETAN SIROVI SADRÅ½AJ:\n\n`;
    prompt += extractedData.rawText;
    
    prompt += `\n\n## DODATNE INSTRUKCIJE:\n`;
    prompt += `- Analiziraj svaki red tablice kao potencijalnu stavku\n`;
    prompt += `- TraÅ¾i Å¡ifre proizvoda, EAN kodove, dimenzije\n`;
    prompt += `- Prepoznaj materijale (ALU, PVC, STAKLO, itd.)\n`;
    prompt += `- Izvuci sve kontakt podatke i adrese\n`;
    prompt += `- Analiziraj potpise i ovlasti\n`;
    prompt += `- Prepoznaj uvjete plaÄ‡anja i dostave\n`;
    
    return prompt;
  };

  const analyzeWithAdvancedRegex = (text) => {
    updateProgress('Napredna regex analiza...', 80);
    
    const extract = (pattern, flags = 'i') => {
      const match = text.match(new RegExp(pattern, flags));
      return match ? (match[1] || match[0]).trim() : null;
    };

    const extractMultiple = (pattern, flags = 'gi') => {
      const matches = text.match(new RegExp(pattern, flags));
      return matches ? matches.map(m => m.trim()) : [];
    };

    const toNumber = (s) => {
      if (!s) return 0;
      const n = String(s).replace(/\s/g, "").replace(/\./g, "").replace(",", ".");
      const m = n.match(/-?\d+(?:\.\d+)?/);
      return m ? parseFloat(m[0]) : 0;
    };

    // Advanced document type detection
    let docType = 'invoice';
    const textLower = text.toLowerCase();
    
    if (textLower.includes('zahtjev') && (textLower.includes('ponud') || textLower.includes('offer'))) {
      docType = 'request';
    } else if (textLower.includes('ponuda') && !textLower.includes('raÄun')) {
      docType = 'quote';
    } else if (textLower.includes('otpremnic') || textLower.includes('delivery')) {
      docType = 'delivery';
    } else if (textLower.includes('meÄ‘uskladiÅ¡nic') || textLower.includes('transfer')) {
      docType = 'transfer';
    } else if (textLower.includes('primka') || textLower.includes('receipt')) {
      docType = 'receipt';
    }

    // Advanced item extraction with multiple sophisticated patterns
    const items = [];
    const lines = text.split('\n');
    
    // Multiple table detection patterns
    const patterns = [
      // Croatian format: Rbr | Opis | Kol | Jed | Cijena | Ukupno
      /^(\d+)[\s\t]+(.+?)[\s\t]+(\d+(?:[.,]\d+)?)[\s\t]+(\w+)[\s\t]+(\d+(?:[.,]\d+)?)[\s\t]+(\d+(?:[.,]\d+)?)$/,
      // Code format: Å ifra | Opis | KoliÄina | Cijena
      /^([A-Z0-9\-\.]+)[\s\t]+(.+?)[\s\t]+(\d+(?:[.,]\d+)?)[\s\t]+(\d+(?:[.,]\d+)?)[\s\t]*$/,
      // Extended format with dimensions
      /^(.+?)[\s\t]+(\d+(?:[.,]\d+)?)[\s\t]*x[\s\t]*(\d+(?:[.,]\d+)?)[\s\t]+(\d+(?:[.,]\d+)?)[\s\t]+(\d+(?:[.,]\d+)?)[\s\t]+(\d+(?:[.,]\d+)?)$/,
      // Simple description with numbers
      /^(.{10,})[\s\t]+(\d+(?:[.,]\d+)?)[\s\t]+(?:kom|m2|kg|m|lit|pcs)[\s\t]+(\d+(?:[.,]\d+)?)[\s\t]+(\d+(?:[.,]\d+)?)$/
    ];

    lines.forEach((line, lineIndex) => {
      // Skip headers and first few lines
      if (lineIndex < 5 || 
          line.toLowerCase().includes('stavka') || 
          line.toLowerCase().includes('opis') ||
          line.toLowerCase().includes('koliÄina') ||
          line.toLowerCase().includes('cijena')) {
        return;
      }

      for (let i = 0; i < patterns.length; i++) {
        const pattern = patterns[i];
        const match = line.match(pattern);
        
        if (match) {
          let item = {
            position: items.length + 1,
            code: '',
            description: '',
            quantity: 0,
            unit: 'kom',
            unitPrice: 0,
            totalPrice: 0
          };

          if (i === 0) { // Standard Croatian format
            [, item.position, item.description, item.quantity, item.unit, item.unitPrice, item.totalPrice] = match;
            item.code = `ITEM-${item.position}`;
          } else if (i === 1) { // Code format  
            [, item.code, item.description, item.quantity, item.unitPrice] = match;
            item.totalPrice = toNumber(item.quantity) * toNumber(item.unitPrice);
          } else if (i === 2) { // Dimensions format
            [, item.description, , , item.quantity, item.unitPrice, item.totalPrice] = match;
            item.code = `ITEM-${items.length + 1}`;
            item.dimensions = match[2] + 'x' + match[3];
          } else { // Simple format
            [, item.description, item.quantity, item.unitPrice, item.totalPrice] = match;
            item.code = `ITEM-${items.length + 1}`;
          }

          // Convert to numbers
          item.position = parseInt(item.position) || items.length + 1;
          item.quantity = toNumber(item.quantity);
          item.unitPrice = toNumber(item.unitPrice);
          item.totalPrice = toNumber(item.totalPrice) || (item.quantity * item.unitPrice);

          // Enhance description analysis
          const desc = item.description || '';
          if (desc.includes('ALU') || desc.includes('ALUM')) item.material = 'Aluminium';
          if (desc.includes('PVC')) item.material = 'PVC';
          if (desc.includes('STAKLO') || desc.includes('GLASS')) item.material = 'Glass';
          
          // Color detection
          const colors = ['BIJEL', 'CRNA', 'SREBRN', 'ZLATN', 'SMEÄ'];
          colors.forEach(color => {
            if (desc.toUpperCase().includes(color)) item.color = color;
          });

          items.push(item);
          break;
        }
      }
    });

    // If no sophisticated patterns worked, try simple numeric extraction
    if (items.length === 0) {
      const simpleItems = text.match(/\d+[\s\t]+.{15,}[\s\t]+\d+(?:[.,]\d+)?[\s\t]+\d+(?:[.,]\d+)?/g);
      if (simpleItems) {
        simpleItems.forEach((item, idx) => {
          const parts = item.split(/[\s\t]+/);
          if (parts.length >= 4) {
            items.push({
              position: idx + 1,
              code: `EXTRACT-${idx + 1}`,
              description: parts.slice(1, -2).join(' '),
              quantity: toNumber(parts[parts.length - 2]),
              unit: 'kom',
              unitPrice: toNumber(parts[parts.length - 1]),
              totalPrice: toNumber(parts[parts.length - 2]) * toNumber(parts[parts.length - 1])
            });
          }
        });
      }
    }

    return {
      documentType: docType,
      confidence: 0.75,
      documentNumber: extract(/(?:broj|number|br\.?|no\.?)[\s:]*([A-Z0-9\-\/]+)/i),
      date: extract(/(?:datum|date)[\s:]*(\d{1,2}[.\/-]\d{1,2}[.\/-]\d{2,4})/i),
      dueDate: extract(/(?:dospijeÄ‡e|valuta|due)[\s:]*(\d{1,2}[.\/-]\d{1,2}[.\/-]\d{2,4})/i),
      supplier: {
        name: extract(/(?:prodavatelj|dobavljaÄ|supplier|izdavatelj)[\s:]*([^\n]+)/i),
        oib: extract(/(?:^|\s)OIB[\s:]*(\d{11})/i),
        address: extract(/(?:adresa|address|sjediÅ¡te)[\s:]*([^\n]+)/i),
        phone: extract(/(?:tel|phone|telefon)[\s:]*([+\d\s\-\(\)]+)/i),
        email: extract(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/),
        iban: extract(/IBAN[\s:]*([A-Z]{2}\d{2}[A-Z0-9]+)/i),
        swift: extract(/(?:SWIFT|BIC)[\s:]*([A-Z]{6,11})/i)
      },
      buyer: {
        name: extract(/(?:kupac|buyer|naruÄitelj)[\s:]*([^\n]+)/i),
        oib: extract(/(?:kupac|buyer).*?OIB[\s:]*(\d{11})/is),
        address: extract(/(?:kupac|buyer).*?(?:adresa|address)[\s:]*([^\n]+)/is)
      },
      items: items,
      totals: {
        itemsCount: items.length,
        subtotal: toNumber(extract(/(?:osnovica|neto|subtotal)[\s:]*(\d+[.,]\d+)/i)),
        vatAmount: toNumber(extract(/(?:PDV|VAT|porez)[\s:]*(\d+[.,]\d+)/i)),
        totalAmount: toNumber(extract(/(?:ukupno|sveukupno|total)[\s:]*(\d+[.,]\d+)/i))
      },
      references: {
        orderNumber: extract(/(?:narudÅ¾ba|order)[\s:]*([A-Z0-9\-\/]+)/i),
        customerReference: extract(/(?:vaÅ¡a oznaka|your ref)[\s:]*([A-Z0-9\-\/]+)/i)
      },
      banking: {
        iban: extract(/IBAN[\s:]*([A-Z]{2}\d{2}[A-Z0-9]+)/i),
        paymentReference: extract(/(?:poziv na broj|reference)[\s:]*([A-Z0-9\-\/]+)/i)
      }
    };
  };

  // ========== Document Processing Functions ==========
  const extractStructuredData = async (file) => {
    try {
      if (file.type === "application/pdf") {
        return await extractFromPDF(file);
      } else if (file.type.startsWith('image/')) {
        return await extractFromImage(file);
      } else if (file.type.includes("sheet") || file.name.match(/\.(xlsx?|csv)$/i)) {
        return await extractFromSpreadsheet(file);
      } else {
        return await extractFromText(file);
      }
    } catch (err) {
      throw new Error(`GreÅ¡ka pri Äitanju datoteke: ${err.message}`);
    }
  };

  const extractFromPDF = async (file) => {
    updateProgress('ÄŒitanje PDF strukture...', 30);
    const arrayBuffer = await file.arrayBuffer();
    const pdf = await getDocument({ data: arrayBuffer }).promise;

    const structuredData = {
      pages: [],
      textBlocks: [],
      coordinates: [],
      rawText: "",
      metadata: { numPages: pdf.numPages, fileName: file.name }
    };

    for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {
      updateProgress(`PDF stranica ${pageNum}/${pdf.numPages}...`, 30 + (pageNum / pdf.numPages) * 20);
      
      const page = await pdf.getPage(pageNum);
      const viewport = page.getViewport({ scale: 1.0 });
      const textContent = await page.getTextContent();

      const textItems = textContent.items.map((item) => {
        const transform = Util.transform(viewport.transform, item.transform);
        return {
          text: item.str,
          x: transform[4],
          y: transform[5],
          width: item.width,
          height: item.height,
          fontName: item.fontName,
          fontSize: transform[0]
        };
      });

      textItems.sort((a, b) => (b.y - a.y) || (a.x - b.x));

      const lines = [];
      let currentLine = [];
      let lastY = null;

      textItems.forEach(item => {
        if (lastY === null || Math.abs(item.y - lastY) > 5) {
          if (currentLine.length > 0) {
            lines.push({
              y: lastY,
              items: [...currentLine],
              text: currentLine.map(i => i.text).join(' ')
            });
          }
          currentLine = [item];
          lastY = item.y;
        } else {
          currentLine.push(item);
        }
      });

      if (currentLine.length > 0) {
        lines.push({
          y: lastY,
          items: [...currentLine],
          text: currentLine.map(i => i.text).join(' ')
        });
      }

      const pageText = lines.map(line => line.text).join('\n');
      structuredData.rawText += pageText + '\n\n';
      structuredData.pages.push({ pageNumber: pageNum, lines, text: pageText });
      structuredData.textBlocks.push(...lines);
    }

    return structuredData;
  };

  const extractFromImage = async (file) => {
    updateProgress('OCR analiza slike - Tesseract...', 40);
    
    try {
      const result = await Tesseract.recognize(file, 'hrv+eng', {
        logger: info => {
          if (info.status === 'recognizing text') {
            updateProgress(`OCR: ${Math.round(info.progress * 100)}%`, 40 + info.progress * 30);
          }
        }
      });

      return {
        rawText: result.data.text,
        confidence: result.data.confidence,
        words: result.data.words.map(word => ({
          text: word.text,
          confidence: word.confidence,
          bbox: word.bbox,
          x: word.bbox.x0,
          y: word.bbox.y0,
          width: word.bbox.x1 - word.bbox.x0,
          height: word.bbox.y1 - word.bbox.y0
        })),
        lines: result.data.lines.map(line => ({
          text: line.text,
          confidence: line.confidence,
          bbox: line.bbox
        })),
        paragraphs: result.data.paragraphs.map(para => ({
          text: para.text,
          confidence: para.confidence,
          bbox: para.bbox
        }))
      };
    } catch (err) {
      console.error("OCR failed:", err);
      return { rawText: '', error: err.message };
    }
  };

  const extractFromSpreadsheet = async (file) => {
    updateProgress('ÄŒitanje Excel/CSV...', 40);
    const text = await file.text();
    const lines = text.split(/\r?\n/).filter(l => l.trim());
    const rows = lines.map(line => {
      const delimiter = line.includes(";") ? ";" : (line.includes("\t") ? "\t" : ",");
      return line.split(delimiter).map(cell => cell.trim().replace(/^"|"$/g, ""));
    });

    return {
      rawText: rows.map(row => row.join(" | ")).join("\n"),
      rows,
      metadata: { fileName: file.name, rows: rows.length, columns: rows[0]?.length || 0 }
    };
  };

  const extractFromText = async (file) => {
    updateProgress('ÄŒitanje teksta...', 40);
    const text = await file.text();
    return {
      rawText: text,
      metadata: { fileName: file.name }
    };
  };

  const createPreview = async (file) => {
    try {
      if (file.type === 'application/pdf') {
        const arrayBuffer = await file.arrayBuffer();
        const pdf = await getDocument({ data: arrayBuffer }).promise;
        const page = await pdf.getPage(1);
        const viewport = page.getViewport({ scale: 1.5 });
        
        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');
        canvas.height = viewport.height;
        canvas.width = viewport.width;
        
        await page.render({
          canvasContext: context,
          viewport: viewport
        }).promise;
        
        return {
          type: 'pdf',
          dataUrl: canvas.toDataURL(),
          pageCount: pdf.numPages
        };
      } else if (file.type.startsWith('image/')) {
        return new Promise(resolve => {
          const reader = new FileReader();
          reader.onload = () => resolve({
            type: 'image',
            dataUrl: reader.result
          });
          reader.readAsDataURL(file);
        });
      }
      
      return { type: 'text', content: 'No preview available' };
    } catch (err) {
      console.error("Preview error:", err);
      return { type: 'text', content: 'Preview failed' };
    }
  };

  // ========== EXPORT FUNCTIONS ==========
  const exportItemsToExcel = () => {
    if (!currentDocument?.analysis?.items) return;
    
    const wb = XLSX.utils.book_new();
    const itemsData = currentDocument.analysis.items.map(item => ({
      'Pozicija': item.position || '',
      'Å ifra': item.code || '',
      'Opis': item.description || '',
      'KoliÄina': item.quantity || 0,
      'Jedinica': item.unit || 'kom',
      'Jed. cijena': item.unitPrice || 0,
      'Ukupno': item.totalPrice || 0,
      'Materijal': item.material || '',
      'Dimenzije': item.dimensions || '',
      'Boja': item.color || '',
      'Napomene': item.notes || ''
    }));
    
    const ws = XLSX.utils.json_to_sheet(itemsData);
    XLSX.utils.book_append_sheet(wb, ws, "Stavke");
    XLSX.writeFile(wb, `stavke-${currentDocument.analysis.documentNumber || Date.now()}.xlsx`);
  };

  const exportFullToExcel = () => {
    if (!currentDocument?.analysis) return;
    
    const wb = XLSX.utils.book_new();
    const data = currentDocument.analysis;
    
    // Items sheet
    const itemsData = (data.items || []).map(item => ({
      'Pozicija': item.position || '',
      'Å ifra': item.code || '',
      'Opis': item.description || '',
      'KoliÄina': item.quantity || 0,
      'Jedinica': item.unit || 'kom',
      'Jed. cijena': item.unitPrice || 0,
      'Ukupno': item.totalPrice || 0
    }));
    
    const itemsSheet = XLSX.utils.json_to_sheet(itemsData);
    XLSX.utils.book_append_sheet(wb, itemsSheet, "Stavke");
    
    // Header data sheet
    const headerData = [{
      'Tip dokumenta': DOCUMENT_TYPES[data.documentType]?.label || '',
      'Broj dokumenta': data.documentNumber || '',
      'Datum': data.date || '',
      'DospijeÄ‡e': data.dueDate || '',
      'DobavljaÄ': data.supplier?.name || '',
      'OIB dobavljaÄa': data.supplier?.oib || '',
      'Adresa dobavljaÄa': data.supplier?.address || '',
      'Kupac': data.buyer?.name || '',
      'OIB kupca': data.buyer?.oib || '',
      'Osnovica': data.totals?.subtotal || 0,
      'PDV': data.totals?.vatAmount || 0,
      'Ukupno': data.totals?.totalAmount || 0
    }];
    
    const headerSheet = XLSX.utils.json_to_sheet(headerData);
    XLSX.utils.book_append_sheet(wb, headerSheet, "Zaglavlje");
    
    XLSX.writeFile(wb, `dokument-${data.documentNumber || Date.now()}.xlsx`);
  };

  const exportToWord = () => {
    if (!currentDocument?.analysis) return;
    
    const data = currentDocument.analysis;
    let content = `DOKUMENT: ${DOCUMENT_TYPES[data.documentType]?.label || 'Nepoznato'}\n\n`;
    content += `Broj: ${data.documentNumber || 'N/A'}\n`;
    content += `Datum: ${data.date || 'N/A'}\n`;
    content += `DospijeÄ‡e: ${data.dueDate || 'N/A'}\n\n`;
    
    content += `DOBAVLJAÄŒ:\n`;
    content += `${data.supplier?.name || 'N/A'}\n`;
    content += `OIB: ${data.supplier?.oib || 'N/A'}\n`;
    content += `Adresa: ${data.supplier?.address || 'N/A'}\n\n`;
    
    content += `KUPAC:\n`;
    content += `${data.buyer?.name || 'N/A'}\n`;
    content += `OIB: ${data.buyer?.oib || 'N/A'}\n\n`;
    
    content += `STAVKE:\n`;
    content += `${'Poz.'.padEnd(5)} ${'Å ifra'.padEnd(15)} ${'Opis'.padEnd(40)} ${'Kol.'.padEnd(8)} ${'Cijena'.padEnd(12)} ${'Ukupno'.padEnd(12)}\n`;
    content += `${'-'.repeat(95)}\n`;
    
    (data.items || []).forEach(item => {
      content += `${String(item.position || '').padEnd(5)} `;
      content += `${String(item.code || '').padEnd(15)} `;
      content += `${String(item.description || '').substring(0, 40).padEnd(40)} `;
      content += `${String(item.quantity || '0').padEnd(8)} `;
      content += `${String((item.unitPrice || 0).toFixed(2)).padEnd(12)} `;
      content += `${String((item.totalPrice || 0).toFixed(2)).padEnd(12)}\n`;
    });
    
    content += `\n${'-'.repeat(95)}\n`;
    content += `SVEUKUPNO: ${(data.totals?.totalAmount || 0).toFixed(2)} EUR\n`;
    
    const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `dokument-${data.documentNumber || Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  // ========== DOCUMENT CREATION ==========
  const createInternalDocument = (type, sourceData) => {
    const template = {
      documentType: type,
      documentNumber: `${type.toUpperCase()}-${Date.now()}`,
      date: new Date().toISOString().split('T')[0],
      issueDate: new Date().toISOString().split('T')[0],
      supplier: {
        name: 'NaÅ¡a tvrtka d.o.o.',
        oib: '12345678901',
        address: 'Ulica 123, 10000 Zagreb'
      },
      buyer: sourceData?.buyer || { name: 'Kupac', oib: '', address: '' },
      items: sourceData?.items || [],
      totals: sourceData?.totals || { subtotal: 0, vatAmount: 0, totalAmount: 0 },
      status: 'draft',
      createdFrom: sourceData?.documentNumber
    };

    if (type === 'delivery') {
      template.delivery = {
        address: sourceData?.delivery?.address || sourceData?.buyer?.address,
        date: new Date().toISOString().split('T')[0],
        method: 'Kamionski prijevoz'
      };
    } else if (type === 'transfer') {
      template.transfer = {
        fromWarehouse: 'Glavno skladiÅ¡te',
        toWarehouse: 'GradiliÅ¡te',
        reason: 'Transfer materijala na gradiliÅ¡te'
      };
    } else if (type === 'receipt') {
      template.receipt = {
        receivedBy: 'SkladiÅ¡te',
        inspectedBy: 'Kontrolor kvalitete',
        condition: 'U redu'
      };
    }

    return template;
  };

  const saveCreatedDocument = (docData) => {
    const newDoc = {
      id: `CREATED-${Date.now()}`,
      ...docData,
      createdDate: new Date().toISOString(),
      project: selectedProject,
      position: selectedPosition
    };

    setConfirmedDocuments(prev => [...prev, newDoc]);
    setShowCreationModal(false);
    setCreationType(null);
    setCreationData(null);
    
    alert(`${DOCUMENT_TYPES[docData.documentType]?.label} uspjeÅ¡no kreiran i spremljen!`);
  };

  // ========== UI HELPERS ==========
  const currentDocument = documents[currentDocIndex];

  const updateCurrentDocument = (field, value) => {
    if (!currentDocument) return;
    
    setDocuments(prev => prev.map((doc, idx) => 
      idx === currentDocIndex 
        ? { ...doc, analysis: { ...doc.analysis, [field]: value } }
        : doc
    ));
  };

  const updateDocumentType = (type) => {
    updateCurrentDocument('documentType', type);
  };

  const confirmAllDocuments = () => {
    if (!selectedProject) {
      setError("Molimo odaberite projekt prije potvrde");
      return;
    }

    const confirmedDocs = documents.map(doc => ({
      ...doc,
      project: selectedProject,
      position: selectedPosition,
      confirmedDate: new Date().toISOString(),
      status: 'confirmed'
    }));

    setConfirmedDocuments(prev => [...prev, ...confirmedDocs]);
    
    // Reset state
    setDocuments([]);
    setCurrentDocIndex(0);
    setSelectedProject(null);
    setSelectedPosition(null);
    
    alert(`${documents.length} dokumenata uspjeÅ¡no potvrÄ‘eno i pridruÅ¾eno projektu!`);
  };

  const startNewBatch = () => {
    if (confirm("Å½elite li poÄeti s novim batch-om dokumenata?")) {
      setDocuments([]);
      setCurrentDocIndex(0);
      setSelectedProject(null);
      setSelectedPosition(null);
      setError(null);
      setProgress(0);
      setProgressStep('');
      if (fileInputRef.current) fileInputRef.current.value = "";
    }
  };

  // ========== RENDER ==========
  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto p-6">
        {/* Header */}
        <div className="bg-white/80 backdrop-blur-xl rounded-2xl p-6 shadow-lg border border-gray-200/50 mb-6">
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-3xl font-bold bg-gradient-to-r from-purple-600 via-blue-600 to-cyan-600 bg-clip-text text-transparent">
                ðŸš€ Super Invoice Analyzer
              </h1>
              <div className="flex items-center gap-4 mt-3">
                <div className="flex items-center gap-2">
                  <div className={`w-3 h-3 rounded-full ${
                    llmStatus === "connected" ? "bg-green-500 shadow-lg shadow-green-500/50" : 
                    "bg-red-500 shadow-lg shadow-red-500/50"
                  } animate-pulse`} />
                  <span className="text-sm font-medium text-gray-700">
                    LM Studio: <span className={llmStatus === 'connected' ? 'text-green-600' : 'text-red-600'}>
                      {llmStatus}
                    </span>
                  </span>
                </div>
                <div className="flex items-center gap-2">
                  <Database className="w-4 h-4 text-blue-600" />
                  <span className="text-sm text-gray-600">
                    {documents.length} dokumenata | {confirmedDocuments.length} potvrÄ‘enih
                  </span>
                </div>
                <button 
                  onClick={() => setShowDebug(!showDebug)} 
                  className="text-sm px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
                >
                  {showDebug ? "Hide" : "Show"} Debug
                </button>
              </div>
            </div>
            
            <div className="flex gap-3">
              {/* View Mode Selector */}
              <div className="flex gap-1 bg-gray-100 rounded-xl p-1">
                {[
                  { key: 'normal', icon: Grid3x3, label: 'Normal' },
                  { key: 'focus', icon: Focus, label: 'Focus' },
                  { key: 'creation', icon: FilePlus, label: 'Create' }
                ].map(mode => (
                  <button
                    key={mode.key}
                    onClick={() => setViewMode(mode.key)}
                    className={`flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium transition-all
                      ${viewMode === mode.key 
                        ? 'bg-blue-600 text-white shadow-md' 
                        : 'text-gray-600 hover:bg-gray-200'}`}
                  >
                    <mode.icon size={16} />
                    {mode.label}
                  </button>
                ))}
              </div>

              {documents.length > 0 && (
                <button 
                  onClick={startNewBatch}
                  className="flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-xl hover:shadow-lg transition-all"
                >
                  <RefreshCw className="w-4 h-4" />
                  New Batch
                </button>
              )}
            </div>
          </div>
        </div>

        {/* Progress Bar */}
        {processing && (
          <div className="bg-white/80 backdrop-blur-xl rounded-2xl p-6 shadow-lg border border-gray-200/50 mb-6">
            <div className="flex items-center gap-4">
              <div className="relative w-12 h-12">
                <Loader2 className="w-12 h-12 text-blue-600 animate-spin" />
                <div className="absolute inset-0 flex items-center justify-center">
                  <span className="text-xs font-bold text-blue-600">{progress}%</span>
                </div>
              </div>
              <div className="flex-1">
                <div className="flex justify-between items-center mb-2">
                  <span className="text-sm font-semibold text-gray-700">{progressStep}</span>
                  <span className="text-sm text-gray-500">{progress}%</span>
                </div>
                <div className="h-3 bg-gray-200 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-gradient-to-r from-blue-500 via-purple-500 to-cyan-500 transition-all duration-500 shadow-sm"
                    style={{ width: `${progress}%` }}
                  />
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Upload Area */}
        {documents.length === 0 && (
          <div className="bg-white/80 backdrop-blur-xl rounded-2xl p-8 shadow-lg border border-gray-200/50 mb-6">
            <input
              ref={fileInputRef}
              type="file"
              multiple
              accept=".pdf,.csv,.xlsx,.xls,.txt,.json,image/*"
              className="hidden"
              onChange={(e) => {
                const files = Array.from(e.target.files || []);
                if (files.length > 0) {
                  processMultipleFiles(files);
                }
              }}
            />
            
            <div
              onClick={() => fileInputRef.current?.click()}
              className="border-2 border-dashed border-purple-300 rounded-2xl p-12 text-center cursor-pointer hover:border-purple-400 hover:bg-purple-50/30 transition-all group"
            >
              <div className="w-24 h-24 mx-auto mb-6 rounded-2xl bg-gradient-to-br from-purple-100 via-blue-100 to-cyan-100 flex items-center justify-center group-hover:scale-110 transition-transform shadow-lg">
                <Upload className="w-12 h-12 text-purple-600" />
              </div>
              <h2 className="text-2xl font-bold text-gray-800 mb-3">
                Povucite dokumente ovdje
              </h2>
              <p className="text-gray-600 mb-4">
                ili kliknite za odabir â€¢ PDF, Excel, CSV, slike â€¢ Multiple files
              </p>
              <div className="flex justify-center gap-4 text-sm text-gray-500">
                <span>ðŸ“„ PDF</span>
                <span>ðŸ“Š Excel</span>
                <span>ðŸ–¼ï¸ Images</span>
                <span>ðŸ“‹ CSV</span>
              </div>
            </div>
          </div>
        )}

        {/* Error Display */}
        {error && (
          <div className="bg-red-50 border border-red-200 rounded-xl p-4 mb-6 flex items-start gap-3">
            <AlertCircle size={20} className="text-red-600 mt-0.5" />
            <div className="flex-1">
              <h4 className="font-semibold text-red-900">GreÅ¡ka</h4>
              <p className="text-red-700 text-sm mt-1">{error}</p>
            </div>
            <button
              onClick={() => setError(null)}
              className="p-1 hover:bg-red-100 rounded transition-colors"
            >
              <X size={16} className="text-red-500" />
            </button>
          </div>
        )}

        {/* Main Content Area */}
        {documents.length > 0 && currentDocument && (
          <>
            {/* Document Navigation */}
            {documents.length > 1 && (
              <div className="bg-white/80 backdrop-blur-xl rounded-2xl p-4 shadow-lg border border-gray-200/50 mb-6">
                <div className="flex items-center justify-between">
                  <h3 className="font-semibold text-gray-800">
                    Documents ({currentDocIndex + 1}/{documents.length})
                  </h3>
                  <div className="flex gap-2">
                    <button
                      onClick={() => setCurrentDocIndex(Math.max(0, currentDocIndex - 1))}
                      disabled={currentDocIndex === 0}
                      className="p-2 bg-gray-100 rounded-lg hover:bg-gray-200 disabled:opacity-50 transition-colors"
                    >
                      <ChevronLeft size={16} />
                    </button>
                    <button
                      onClick={() => setCurrentDocIndex(Math.min(documents.length - 1, currentDocIndex + 1))}
                      disabled={currentDocIndex === documents.length - 1}
                      className="p-2 bg-gray-100 rounded-lg hover:bg-gray-200 disabled:opacity-50 transition-colors"
                    >
                      <ChevronRight size={16} />
                    </button>
                  </div>
                </div>
                
                {/* Document tabs */}
                <div className="flex gap-2 mt-3 overflow-x-auto">
                  {documents.map((doc, idx) => (
                    <button
                      key={doc.id}
                      onClick={() => setCurrentDocIndex(idx)}
                      className={`flex items-center gap-2 px-3 py-2 rounded-lg text-sm whitespace-nowrap transition-colors
                        ${idx === currentDocIndex 
                          ? 'bg-blue-100 text-blue-700 border border-blue-300' 
                          : 'bg-gray-100 text-gray-600 hover:bg-gray-200'}`}
                    >
                      <FileText size={14} />
                      {doc.fileName}
                    </button>
                  ))}
                </div>
              </div>
            )}

            {/* Focus Mode Layout */}
            {viewMode === 'focus' ? (
              <div className="bg-white rounded-2xl shadow-lg border border-gray-200 p-6">
                <div className="flex justify-between items-center mb-6">
                  <h2 className="text-xl font-bold">Focus Mode - Document Analysis</h2>
                  <button
                    onClick={() => setViewMode('normal')}
                    className="flex items-center gap-2 px-4 py-2 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
                  >
                    <ArrowLeft size={16} />
                    Back to Normal
                  </button>
                </div>
                
                <div className="grid grid-cols-2 gap-8 h-[80vh]">
                  {/* Left: Document Preview */}
                  <div className="border-r pr-6">
                    <div className="flex justify-between items-center mb-4">
                      <h3 className="font-semibold">Document Preview</h3>
                      <div className="flex gap-2">
                        <button
                          onClick={() => setZoomLevel(Math.max(50, zoomLevel - 25))}
                          className="p-2 bg-gray-100 rounded-lg hover:bg-gray-200"
                        >
                          <ZoomOut size={16} />
                        </button>
                        <span className="px-3 py-2 bg-gray-100 rounded-lg text-sm">
                          {zoomLevel}%
                        </span>
                        <button
                          onClick={() => setZoomLevel(Math.min(200, zoomLevel + 25))}
                          className="p-2 bg-gray-100 rounded-lg hover:bg-gray-200"
                        >
                          <ZoomIn size={16} />
                        </button>
                      </div>
                    </div>
                    
                    <div className="h-full overflow-auto border rounded-lg">
                      {currentDocument.preview?.dataUrl && (
                        <img 
                          src={currentDocument.preview.dataUrl} 
                          alt="Document"
                          style={{ 
                            width: `${zoomLevel}%`,
                            height: 'auto',
                            display: 'block'
                          }}
                        />
                      )}
                    </div>
                  </div>
                  
                  {/* Right: Extracted Data */}
                  <div className="overflow-auto">
                    <h3 className="font-semibold mb-4">Extracted Data</h3>
                    <DocumentAnalysisView document={currentDocument} />
                  </div>
                </div>
              </div>
            ) : (
              /* Normal Layout */
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                {/* Left Column - Document Analysis */}
                <div className="lg:col-span-2 space-y-6">
                  {/* Project Assignment */}
                  <div className="bg-white/80 backdrop-blur-xl rounded-2xl p-6 shadow-lg border border-gray-200/50">
                    <h2 className="text-lg font-semibold mb-4 flex items-center gap-2 text-gray-800">
                      <Building className="w-5 h-5 text-blue-600" />
                      Project Assignment
                    </h2>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-600 mb-2">Project *</label>
                        <select
                          value={selectedProject?.id || ''}
                          onChange={(e) => {
                            const project = projects.find(p => p.id === e.target.value);
                            setSelectedProject(project);
                          }}
                          className="w-full px-4 py-2.5 bg-white border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                        >
                          <option value="">-- Select Project --</option>
                          {projects.map(project => (
                            <option key={project.id} value={project.id}>
                              {project.name} ({project.client})
                            </option>
                          ))}
                        </select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-600 mb-2">Position (Optional)</label>
                        <select
                          value={selectedPosition?.id || ''}
                          onChange={(e) => {
                            const position = positions.find(p => p.id === e.target.value);
                            setSelectedPosition(position);
                          }}
                          className="w-full px-4 py-2.5 bg-white border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                        >
                          <option value="">-- No Position --</option>
                          {positions.filter(p => !selectedProject || p.project === selectedProject.id).map(position => (
                            <option key={position.id} value={position.id}>
                              {position.name} (Floor {position.floor})
                            </option>
                          ))}
                        </select>
                      </div>
                    </div>
                  </div>

                  {/* Document Type & Details */}
                  <div className="bg-white/80 backdrop-blur-xl rounded-2xl p-6 shadow-lg border border-gray-200/50">
                    <div className="flex justify-between items-center mb-4">
                      <h2 className="text-xl font-semibold text-gray-800">Document Analysis</h2>
                      <div className="flex gap-2">
                        <button
                          onClick={() => setEditMode(!editMode)}
                          className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-all
                            ${editMode 
                              ? 'bg-green-600 text-white hover:bg-green-700' 
                              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}
                        >
                          {editMode ? <CheckCircle2 size={16} /> : <Edit3 size={16} />}
                          {editMode ? 'Save' : 'Edit'}
                        </button>
                        <button
                          onClick={() => setViewMode('focus')}
                          className="flex items-center gap-2 px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors"
                        >
                          <Focus size={16} />
                          Focus Mode
                        </button>
                      </div>
                    </div>

                    {/* Document Type Selector */}
                    <div className="mb-6">
                      <label className="block text-sm font-medium text-gray-600 mb-2">Document Type</label>
                      <select
                        value={currentDocument.analysis?.documentType || 'invoice'}
                        onChange={(e) => updateDocumentType(e.target.value)}
                        className="w-full px-4 py-2.5 bg-white border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                      >
                        {Object.entries(DOCUMENT_TYPES).map(([key, type]) => (
                          <option key={key} value={key}>
                            {type.label}
                          </option>
                        ))}
                      </select>
                    </div>

                    <DocumentAnalysisView 
                      document={currentDocument} 
                      editMode={editMode}
                      onUpdate={updateCurrentDocument}
                    />
                  </div>

                  {/* Action Buttons */}
                  <div className="bg-white/80 backdrop-blur-xl rounded-2xl p-6 shadow-lg border border-gray-200/50">
                    <div className="space-y-4">
                      {/* Export Options */}
                      <div>
                        <h3 className="font-semibold mb-3">Export Options</h3>
                        <div className="grid grid-cols-3 gap-3">
                          <button
                            onClick={exportItemsToExcel}
                            className="flex items-center justify-center gap-2 px-4 py-3 bg-green-600 text-white rounded-xl hover:bg-green-700 transition-all"
                          >
                            <FileSpreadsheet size={16} />
                            Excel Items
                          </button>
                          <button
                            onClick={exportFullToExcel}
                            className="flex items-center justify-center gap-2 px-4 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-all"
                          >
                            <Layers size={16} />
                            Excel Full
                          </button>
                          <button
                            onClick={exportToWord}
                            className="flex items-center justify-center gap-2 px-4 py-3 bg-purple-600 text-white rounded-xl hover:bg-purple-700 transition-all"
                          >
                            <FileText size={16} />
                            Document
                          </button>
                        </div>
                      </div>

                      {/* Internal Document Creation */}
                      <div>
                        <h3 className="font-semibold mb-3">Create Internal Documents</h3>
                        <div className="grid grid-cols-3 gap-3">
                          {INTERNAL_DOCS.map(type => {
                            const typeInfo = DOCUMENT_TYPES[type];
                            return (
                              <button
                                key={type}
                                onClick={() => {
                                  setCreationType(type);
                                  setCreationData(createInternalDocument(type, currentDocument.analysis));
                                  setShowCreationModal(true);
                                }}
                                className="flex items-center justify-center gap-2 px-4 py-3 rounded-xl transition-all"
                                style={{ 
                                  backgroundColor: typeInfo.color + '20',
                                  color: typeInfo.color,
                                  border: `1px solid ${typeInfo.color}40`
                                }}
                              >
                                <typeInfo.icon size={16} />
                                {typeInfo.label}
                              </button>
                            );
                          })}
                        </div>
                      </div>

                      {/* Final Confirmation */}
                      <div className="pt-4 border-t">
                        {!selectedProject ? (
                          <div className="flex items-center gap-2 text-amber-700 p-3 bg-amber-50 rounded-lg border border-amber-200 mb-3">
                            <AlertCircle size={16} />
                            <span className="text-sm">Please select a project before confirming documents</span>
                          </div>
                        ) : (
                          <div className="flex items-center gap-2 text-green-700 p-3 bg-green-50 rounded-lg border border-green-200 mb-3">
                            <CheckCircle2 size={16} />
                            <span className="text-sm">
                              Ready to confirm {documents.length} document(s) for project: <strong>{selectedProject.name}</strong>
                              {selectedPosition && ` â€¢ Position: ${selectedPosition.name}`}
                            </span>
                          </div>
                        )}

                        <button
                          onClick={confirmAllDocuments}
                          disabled={!selectedProject}
                          className={`w-full py-3 rounded-xl font-semibold flex items-center justify-center gap-2 transition-all
                            ${selectedProject 
                              ? 'bg-gradient-to-r from-green-500 to-emerald-600 text-white hover:shadow-lg' 
                              : 'bg-gray-300 text-gray-500 cursor-not-allowed'}`}
                        >
                          <BadgeCheck size={20} />
                          Confirm All Documents
                        </button>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Right Column - Preview & Quick Info */}
                <div className="space-y-6">
                  {/* Document Preview */}
                  {currentDocument.preview?.dataUrl && (
                    <div className="bg-white/80 backdrop-blur-xl rounded-2xl p-6 shadow-lg border border-gray-200/50">
                      <div className="flex justify-between items-center mb-4">
                        <h3 className="text-lg font-semibold text-gray-800">Preview</h3>
                        <button
                          onClick={() => setShowPreview(!showPreview)}
                          className="p-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-lg transition-all"
                        >
                          {showPreview ? <EyeOff size={16} /> : <Eye size={16} />}
                        </button>
                      </div>
                      
                      {showPreview && (
                        <div 
                          className="rounded-xl overflow-hidden border border-gray-200 bg-white cursor-pointer"
                          onClick={() => setViewMode('focus')}
                        >
                          <img 
                            src={currentDocument.preview.dataUrl} 
                            alt="Document Preview" 
                            className="w-full max-h-48 object-contain"
                          />
                          <div className="p-2 bg-gray-50 border-t text-center">
                            <span className="text-xs text-gray-600">Click to open Focus Mode</span>
                          </div>
                        </div>
                      )}
                    </div>
                  )}

                  {/* Quick Analytics */}
                  <div className="bg-white/80 backdrop-blur-xl rounded-2xl p-6 shadow-lg border border-gray-200/50">
                    <h3 className="text-lg font-semibold mb-4 text-gray-800">Quick Analytics</h3>
                    <DocumentQuickStats document={currentDocument} />
                  </div>

                  {/* Document History */}
                  {confirmedDocuments.length > 0 && (
                    <div className="bg-white/80 backdrop-blur-xl rounded-2xl p-6 shadow-lg border border-gray-200/50">
                      <h3 className="text-lg font-semibold mb-4 text-gray-800">Recent Documents</h3>
                      <div className="space-y-3 max-h-64 overflow-y-auto">
                        {confirmedDocuments.slice(-5).reverse().map(doc => (
                          <DocumentHistoryItem key={doc.id} document={doc} />
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}
          </>
        )}

        {/* Document Creation Modal */}
        {showCreationModal && creationData && (
          <DocumentCreationModal
            type={creationType}
            data={creationData}
            onSave={saveCreatedDocument}
            onClose={() => {
              setShowCreationModal(false);
              setCreationType(null);
              setCreationData(null);
            }}
          />
        )}

        {/* Confirmed Documents Grid */}
        {confirmedDocuments.length > 0 && (
          <div className="mt-8 bg-white/80 backdrop-blur-xl rounded-2xl p-6 shadow-lg border border-gray-200/50">
            <div className="flex justify-between items-center mb-6">
              <h3 className="text-xl font-semibold flex items-center gap-2">
                <CheckCircle2 className="w-6 h-6 text-green-600" />
                Confirmed Documents ({confirmedDocuments.length})
              </h3>
              <div className="flex gap-2 text-sm text-gray-600">
                <span>{confirmedDocuments.filter(d => d.project).length} with projects</span>
                <span>â€¢</span>
                <span>{confirmedDocuments.filter(d => d.position).length} with positions</span>
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {confirmedDocuments.map(doc => (
                <ConfirmedDocumentCard key={doc.id} document={doc} />
              ))}
            </div>
          </div>
        )}

        {/* Debug Panel */}
        {showDebug && currentDocument && (
          <div className="mt-6 bg-gray-900 text-green-400 rounded-xl p-6 font-mono">
            <h3 className="text-white font-bold mb-3 flex items-center gap-2">
              <Settings className="w-5 h-5" />
              Super Debug Information
            </h3>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div>
                <h4 className="text-yellow-400 font-semibold mb-2">Analysis Results</h4>
                <pre className="text-xs overflow-auto max-h-96 whitespace-pre-wrap">
                  {JSON.stringify({
                    fileName: currentDocument.fileName,
                    confidence: currentDocument.rawData?.confidence || 'N/A',
                    itemsDetected: currentDocument.analysis?.items?.length || 0,
                    totalValue: currentDocument.analysis?.totals?.totalAmount || 0,
                    llmStatus,
                    documentType: currentDocument.analysis?.documentType,
                    processingTime: 'N/A'
                  }, null, 2)}
                </pre>
              </div>
              <div>
                <h4 className="text-yellow-400 font-semibold mb-2">Raw Text Sample</h4>
                <pre className="text-xs overflow-auto max-h-96 whitespace-pre-wrap bg-gray-800 p-3 rounded">
                  {currentDocument.rawData?.rawText?.substring(0, 1500)}
                  {currentDocument.rawData?.rawText?.length > 1500 && '\n... (truncated)'}
                </pre>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

// ========== COMPONENT DEFINITIONS ==========

const DocumentAnalysisView = ({ document, editMode = false, onUpdate }) => {
  if (!document?.analysis) return <div>No analysis data available</div>;

  const data = document.analysis;

  return (
    <div className="space-y-6">
      {/* Basic Info */}
      <div className="grid grid-cols-3 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-600 mb-1">Document Number</label>
          <div className="p-3 bg-gray-50 rounded-lg font-medium">
            {data.documentNumber || 'N/A'}
          </div>
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-600 mb-1">Date</label>
          <div className="p-3 bg-gray-50 rounded-lg">
            {data.date || 'N/A'}
          </div>
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-600 mb-1">Due Date</label>
          <div className="p-3 bg-gray-50 rounded-lg">
            {data.dueDate || 'N/A'}
          </div>
        </div>
      </div>

      {/* Supplier & Buyer */}
      <div className="grid grid-cols-2 gap-6">
        <div>
          <h4 className="font-semibold mb-3 text-gray-800">Supplier</h4>
          <div className="bg-blue-50 p-4 rounded-lg space-y-2">
            <div>
              <span className="text-xs text-gray-600">Name:</span>
              <div className="font-medium">{data.supplier?.name || 'N/A'}</div>
            </div>
            <div>
              <span className="text-xs text-gray-600">OIB:</span>
              <div className="font-mono text-sm">{data.supplier?.oib || 'N/A'}</div>
            </div>
            <div>
              <span className="text-xs text-gray-600">Address:</span>
              <div className="text-sm">{data.supplier?.address || 'N/A'}</div>
            </div>
            {data.supplier?.email && (
              <div>
                <span className="text-xs text-gray-600">Email:</span>
                <div className="text-sm">{data.supplier.email}</div>
              </div>
            )}
          </div>
        </div>
        
        <div>
          <h4 className="font-semibold mb-3 text-gray-800">Buyer</h4>
          <div className="bg-green-50 p-4 rounded-lg space-y-2">
            <div>
              <span className="text-xs text-gray-600">Name:</span>
              <div className="font-medium">{data.buyer?.name || 'N/A'}</div>
            </div>
            <div>
              <span className="text-xs text-gray-600">OIB:</span>
              <div className="font-mono text-sm">{data.buyer?.oib || 'N/A'}</div>
            </div>
            <div>
              <span className="text-xs text-gray-600">Address:</span>
              <div className="text-sm">{data.buyer?.address || 'N/A'}</div>
            </div>
          </div>
        </div>
      </div>

      {/* Items */}
      {data.items && data.items.length > 0 && (
        <div>
          <h4 className="font-semibold mb-3 text-gray-800">
            Items ({data.items.length})
          </h4>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-3 py-2 text-left text-xs font-medium text-gray-500">#</th>
                  <th className="px-3 py-2 text-left text-xs font-medium text-gray-500">Code</th>
                  <th className="px-3 py-2 text-left text-xs font-medium text-gray-500">Description</th>
                  <th className="px-3 py-2 text-right text-xs font-medium text-gray-500">Qty</th>
                  <th className="px-3 py-2 text-right text-xs font-medium text-gray-500">Unit Price</th>
                  <th className="px-3 py-2 text-right text-xs font-medium text-gray-500">Total</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {data.items.slice(0, 10).map((item, idx) => (
                  <tr key={idx} className="hover:bg-gray-50">
                    <td className="px-3 py-2 text-sm font-medium">{item.position || idx + 1}</td>
                    <td className="px-3 py-2 text-sm font-mono">{item.code || 'N/A'}</td>
                    <td className="px-3 py-2 text-sm">{item.description}</td>
                    <td className="px-3 py-2 text-sm text-right">{item.quantity}</td>
                    <td className="px-3 py-2 text-sm text-right">{(item.unitPrice || 0).toFixed(2)}</td>
                    <td className="px-3 py-2 text-sm text-right font-medium">{(item.totalPrice || 0).toFixed(2)}</td>
                  </tr>
                ))}
              </tbody>
            </table>
            {data.items.length > 10 && (
              <div className="p-3 text-center text-sm text-gray-500 bg-gray-50">
                ... and {data.items.length - 10} more items
              </div>
            )}
          </div>
        </div>
      )}

      {/* Totals */}
      {data.totals && (
        <div className="bg-gray-50 p-4 rounded-lg">
          <h4 className="font-semibold mb-3 text-gray-800">Totals</h4>
          <div className="space-y-2">
            <div className="flex justify-between">
              <span>Subtotal:</span>
              <span className="font-medium">{(data.totals.subtotal || 0).toFixed(2)} â‚¬</span>
            </div>
            <div className="flex justify-between">
              <span>VAT:</span>
              <span className="font-medium">{(data.totals.vatAmount || 0).toFixed(2)} â‚¬</span>
            </div>
            <div className="flex justify-between pt-2 border-t border-gray-300">
              <span className="font-semibold">TOTAL:</span>
              <span className="font-bold text-lg text-blue-600">
                {(data.totals.totalAmount || 0).toFixed(2)} â‚¬
              </span>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

const DocumentQuickStats = ({ document }) => {
  if (!document?.analysis) return null;

  const data = document.analysis;
  
  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center p-3 bg-blue-50 rounded-lg">
        <span className="text-sm text-blue-700">Items count</span>
        <span className="font-bold text-blue-800">{data.items?.length || 0}</span>
      </div>
      <div className="flex justify-between items-center p-3 bg-green-50 rounded-lg">
        <span className="text-sm text-green-700">Total value</span>
        <span className="font-bold text-green-800">{(data.totals?.totalAmount || 0).toFixed(2)} â‚¬</span>
      </div>
      <div className="flex justify-between items-center p-3 bg-amber-50 rounded-lg">
        <span className="text-sm text-amber-700">VAT amount</span>
        <span className="font-bold text-amber-800">{(data.totals?.vatAmount || 0).toFixed(2)} â‚¬</span>
      </div>
      {data.confidence && (
        <div className="flex justify-between items-center p-3 bg-purple-50 rounded-lg">
          <span className="text-sm text-purple-700">Confidence</span>
          <span className="font-bold text-purple-800">{(data.confidence * 100).toFixed(1)}%</span>
        </div>
      )}
    </div>
  );
};

const DocumentHistoryItem = ({ document }) => {
  const typeInfo = DOCUMENT_TYPES[document.documentType] || DOCUMENT_TYPES.invoice;
  
  return (
    <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
      <typeInfo.icon size={16} style={{ color: typeInfo.color }} />
      <div className="flex-1">
        <div className="font-medium text-sm">{document.analysis?.documentNumber || document.fileName}</div>
        <div className="text-xs text-gray-600">{new Date(document.confirmedDate).toLocaleDateString()}</div>
      </div>
      <div className="text-right">
        <div className="text-sm font-medium">{(document.analysis?.totals?.totalAmount || 0).toFixed(2)} â‚¬</div>
        {document.project && (
          <div className="text-xs text-blue-600">{document.project.name}</div>
        )}
      </div>
    </div>
  );
};

const ConfirmedDocumentCard = ({ document }) => {
  const typeInfo = DOCUMENT_TYPES[document.documentType] || DOCUMENT_TYPES.invoice;
  
  return (
    <div className="p-6 border border-gray-200 rounded-xl hover:shadow-md transition-all bg-white">
      <div className="flex items-start gap-4">
        <div 
          className="w-12 h-12 rounded-lg flex items-center justify-center"
          style={{ backgroundColor: typeInfo.color + '20' }}
        >
          <typeInfo.icon size={24} style={{ color: typeInfo.color }} />
        </div>
        <div className="flex-1">
          <h4 className="font-semibold text-sm mb-2">
            {document.analysis?.documentNumber || document.fileName}
          </h4>
          <p className="text-xs text-gray-600 mb-3">
            {typeInfo.label} â€¢ {new Date(document.confirmedDate).toLocaleDateString()}
          </p>
          <div className="space-y-2">
            {document.project && (
              <div className="flex items-center gap-2">
                <Building className="w-3 h-3 text-blue-500" />
                <span className="text-xs text-blue-700 font-medium">
                  {document.project.name}
                </span>
              </div>
            )}
            {document.position && (
              <div className="flex items-center gap-2">
                <Target className="w-3 h-3 text-amber-500" />
                <span className="text-xs text-amber-700 font-medium">
                  {document.position.name}
                </span>
              </div>
            )}
            <div className="flex items-center gap-2">
              <Package className="w-3 h-3 text-gray-500" />
              <span className="text-xs text-gray-600">
                {document.analysis?.items?.length || 0} items â€¢ {(document.analysis?.totals?.totalAmount || 0).toFixed(2)} â‚¬
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

const DocumentCreationModal = ({ type, data, onSave, onClose }) => {
  const [editableData, setEditableData] = useState(data);
  const typeInfo = DOCUMENT_TYPES[type];
  
  const updateField = (field, value) => {
    setEditableData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl shadow-2xl max-w-4xl max-h-[90vh] w-full overflow-auto">
        <div className="p-6 border-b border-gray-200">
          <div className="flex justify-between items-center">
            <div className="flex items-center gap-3">
              <typeInfo.icon size={24} style={{ color: typeInfo.color }} />
              <h3 className="text-xl font-semibold">Create {typeInfo.label}</h3>
            </div>
            <button
              onClick={onClose}
              className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
            >
              <X size={20} />
            </button>
          </div>
        </div>
        
        <div className="p-6 space-y-6">
          {/* Basic fields */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-600 mb-2">Document Number</label>
              <input
                type="text"
                value={editableData.documentNumber}
                onChange={(e) => updateField('documentNumber', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-600 mb-2">Date</label>
              <input
                type="date"
                value={editableData.date}
                onChange={(e) => updateField('date', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>

          {/* Type-specific fields */}
          {type === 'delivery' && (
            <div className="p-4 bg-orange-50 rounded-lg">
              <h4 className="font-semibold mb-3">Delivery Information</h4>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Delivery Address</label>
                  <input
                    type="text"
                    value={editableData.delivery?.address || ''}
                    onChange={(e) => updateField('delivery', { ...editableData.delivery, address: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Delivery Method</label>
                  <input
                    type="text"
                    value={editableData.delivery?.method || ''}
                    onChange={(e) => updateField('delivery', { ...editableData.delivery, method: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              </div>
            </div>
          )}

          {type === 'transfer' && (
            <div className="p-4 bg-cyan-50 rounded-lg">
              <h4 className="font-semibold mb-3">Transfer Information</h4>
              <div className="grid grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">From Warehouse</label>
                  <input
                    type="text"
                    value={editableData.transfer?.fromWarehouse || ''}
                    onChange={(e) => updateField('transfer', { ...editableData.transfer, fromWarehouse: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">To Warehouse</label>
                  <input
                    type="text"
                    value={editableData.transfer?.toWarehouse || ''}
                    onChange={(e) => updateField('transfer', { ...editableData.transfer, toWarehouse: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Reason</label>
                  <input
                    type="text"
                    value={editableData.transfer?.reason || ''}
                    onChange={(e) => updateField('transfer', { ...editableData.transfer, reason: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              </div>
            </div>
          )}

          {type === 'receipt' && (
            <div className="p-4 bg-pink-50 rounded-lg">
              <h4 className="font-semibold mb-3">Receipt Information</h4>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Received By</label>
                  <input
                    type="text"
                    value={editableData.receipt?.receivedBy || ''}
                    onChange={(e) => updateField('receipt', { ...editableData.receipt, receivedBy: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Condition</label>
                  <select
                    value={editableData.receipt?.condition || ''}
                    onChange={(e) => updateField('receipt', { ...editableData.receipt, condition: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Select condition</option>
                    <option value="U redu">U redu</option>
                    <option value="OÅ¡teÄ‡eno">OÅ¡teÄ‡eno</option>
                    <option value="Nepotpuno">Nepotpuno</option>
                  </select>
                </div>
              </div>
            </div>
          )}

          {/* Items summary */}
          <div className="p-4 bg-gray-50 rounded-lg">
            <h4 className="font-semibold mb-2">Items Summary</h4>
            <p className="text-sm text-gray-600">
              {editableData.items?.length || 0} items â€¢ Total: {(editableData.totals?.totalAmount || 0).toFixed(2)} â‚¬
            </p>
          </div>
        </div>

        <div className="p-6 border-t border-gray-200 flex justify-end gap-3">
          <button
            onClick={onClose}
            className="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
          >
            Cancel
          </button>
          <button
            onClick={() => onSave(editableData)}
            className="px-6 py-2 text-white rounded-lg transition-all"
            style={{ backgroundColor: typeInfo.color }}
          >
            Create & Save
          </button>
        </div>
      </div>
    </div>
  );
};





import theme, { colors, fontStack, radius, shadow, zIndex, spacing } from '@al/theme';

