import { useState, useEffect, useRef, useMemo } from "react";
import { motion, AnimatePresence, LayoutGroup } from "framer-motion";
import { 
import theme from '@al/theme';
const { colors, fontStack } = theme;
  Home, Library, Gamepad2, AppWindow, Search, Settings, Sparkles, 
  MoreHorizontal, ChevronDown, ChevronLeft, Bell, Check, CheckCheck, Plus, Minus, FileText,
  GitBranch, Clock, Download, Upload, Eye, Edit3, Trash2, Copy,
  Lock, Unlock, Users, FolderOpen, AlertCircle, Circle, Triangle, Shuffle, 
  ChevronRight, ArrowRight, ArrowUp, Loader, Truck, FileSpreadsheet,
  CheckCircle, XCircle, RefreshCw, Save, History, Package, Heart, Hexagon, Move,EyeOff,
  Calendar, Flag, Target, Zap, TrendingUp, Award, Star, MessageSquare, Image as ImageIcon, Phone,
  AlertTriangle, BarChart3, Layers, Grid3x3, Play, Pause, FastForward, Mail, ClipboardList, Building2,
  Rewind, Maximize2, Filter, Camera,ShoppingCart,QrCode, Share2, BadgeCheck, Bookmark,
  Building, MapPin, DoorOpen, Square, Maximize, Activity, X, ExternalLink // Also add X here
} from "lucide-react";


// Microsoft Storeâ€“style shell
const micaStyle = { background: "white" };

const navItems = [
  { key: "home", label: "Home", icon: Home },
  { key: "materials", label: "Materials", icon: Package },
  { key: "gantt", label: "Gantt Chart", icon: BarChart3 },
  { key: "timeline", label: "Timeline", icon: GitBranch },
  { key: "invoice", label: "Invoice Processing", icon: FileText },
  { key: "production", label: "Production Timeline", icon: Layers },
  { key: "floorplan", label: "Tlocrt", icon: Building },  // DODAJTE OVO
  { key: "animations", label: "Animations", icon: Sparkles }, // ADD THIS,
  { key: "reports", label: "Reports", icon: BarChart3 }, // <-- added
  { key: "warehouse", label: "SkladiÅ¡te", icon: Package },
  { key: "showcase", label: "Showcase", icon: Sparkles },
  { key: "settings", label: "Settings", icon: Settings },
  { key: "fluent", label: "Fluent", icon: FileText },
  { key: "hover", label: "Hover", icon: BarChart3 },
];

const featured = [
  { title: "Canvas Pro", subtitle: "Design & mockups", accent: "#2563eb" },
  { title: "Nebula Notes", subtitle: "AI notetaking", accent: "#059669" },
  { title: "Peak Player", subtitle: "Media & casting", accent: "#d97706" },
  { title: "ZenTasks", subtitle: "Projects & flow", accent: "#7c3aed" },
  { title: "FluxPaint", subtitle: "Digital art studio", accent: "#db2777" },
  { title: "TrailMaps", subtitle: "Outdoors & nav", accent: "#06b6d4" },
];

const charts = [
  { name: "SnapEdit", tag: "Photo" },
  { name: "ClipForge", tag: "Video" },
  { name: "SonicCast", tag: "Audio" },
  { name: "MacroMind", tag: "AI" },
  { name: "PaperKit", tag: "Docs" },
  { name: "LedgerLite", tag: "Finance" },
  { name: "NovaMail", tag: "Email" },
  { name: "GlassCalc", tag: "Utilities" },
];

function GlowCard({ title, subtitle, accent }) {
  const [isHovered, setIsHovered] = useState(false);
  return (
    <div className="relative">
      <AnimatePresence>
        {isHovered && (
          <motion.div
            key="hover-cards"
            initial={{ opacity: 0, y: 10, scale: 0.98 }}
            animate={{ opacity: 1, y: -8, scale: 1 }}
            exit={{ opacity: 0, y: 10, scale: 0.98 }}
            transition={{ type: "spring", stiffness: 300, damping: 24 }}
            className="pointer-events-none absolute -top-28 left-1/2 -translate-x-1/2 z-20"
          >
            <div className="grid grid-cols-3 gap-2 p-2 rounded-xl bg-white ring-1 ring-slate-200 shadow-2xl">
              {[1, 2, 3].map((n) => (
                <div
                  key={n}
                  className="rounded-lg p-2 text-[10px] leading-tight"
                  style={{
                    background: `radial-gradient(circle at 30% 30%, ${accent}22, transparent 70%)`,
                    boxShadow: `inset 0 0 12px ${accent}22`,
                    border: "1px solid rgba(0,0,0,0.06)",
                  }}
                >
                  <div className="font-medium text-[11px]">Quick view {n}</div>
                  <div className="opacity-70">Preview, ratings, size</div>
                </div>
              ))}
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      <motion.div
        onHoverStart={() => setIsHovered(true)}
        onHoverEnd={() => setIsHovered(false)}
        whileHover={{
          scale: 1.04,
          boxShadow: `0 16px 35px rgba(0,0,0,0.18), 0 0 0 1px ${accent}44, 0 0 28px ${accent}44`,
        }}
        whileTap={{ scale: 0.995 }}
        transition={{ type: "spring", stiffness: 300, damping: 22 }}
        className="relative rounded-2xl p-5 shadow-lg ring-1 ring-slate-200 bg-white hover:bg-slate-50 transition-colors"
        style={{
          backgroundImage: "linear-gradient(180deg, rgba(0,0,0,0.02), rgba(0,0,0,0))",
        }}
      >
        <div className="flex items-center gap-3">
          <div
            className="h-12 w-12 rounded-xl"
            style={{
              background: `radial-gradient(circle at 30% 30%, ${accent}80, ${accent}30 60%, transparent 70%)`,
              boxShadow: `inset 0 0 20px ${accent}40`,
            }}
          />
          <div className="min-w-0">
            <div className="flex items-center gap-2">
              <Sparkles className="h-4 w-4 opacity-70" />
              <p className="truncate text-base font-semibold tracking-tight">{title}</p>
            </div>
            <p className="truncate text-sm opacity-70">{subtitle}</p>
          </div>
        </div>
        <div className="mt-4 flex gap-2">
          <button className="px-3 py-1.5 text-xs rounded-lg bg-slate-100 hover:bg-slate-200/60 ring-1 ring-slate-200">Get</button>
          <button className="px-3 py-1.5 text-xs rounded-lg bg-transparent hover:bg-slate-100 ring-1 ring-slate-200">Details</button>
        </div>
      </motion.div>
    </div>
  );
}

function GlowRow({ name, tag, index }) {
  return (
    <motion.div
      whileHover={{
        scale: 1.015,
        boxShadow: "0 10px 26px rgba(0,0,0,0.12), 0 0 0 1px rgba(0,0,0,0.06)",
      }}
      transition={{ type: "spring", stiffness: 280, damping: 22 }}
      className="group rounded-xl px-4 py-3 ring-1 ring-slate-200 bg-white hover:bg-slate-50 grid grid-cols-[auto_1fr_auto] items-center gap-4"
    >
      <div className="text-xs tabular-nums opacity-60 w-6">#{index}</div>
      <div className="min-w-0">
        <p className="truncate font-medium leading-5">{name}</p>
        <p className="truncate text-xs opacity-70">{tag}</p>
      </div>
      <button className="opacity-90 text-xs px-2.5 py-1 rounded-lg bg-slate-100 hover:bg-slate-200/60 ring-1 ring-slate-200">Install</button>
    </motion.div>
  );
}

// Materials Grid Component
const MATERIAL_THEMES = {
  red:   { bg: "linear-gradient(180deg, #fecaca, #ef4444)", ring: "#fecaca", glow: "rgba(239,68,68,.45)" },
  green: { bg: "linear-gradient(180deg, #bbf7d0, #22c55e)", ring: "#bbf7d0", glow: "rgba(34,197,94,.40)" },
  blue:  { bg: "linear-gradient(180deg, #bfdbfe, #3b82f6)", ring: "#bfdbfe", glow: "rgba(59,130,246,.40)" },
};

const ToggleSwitch = ({ value, onChange }) => (
  <button
    onClick={() => onChange(!value)}
    className={`px-3 py-1 rounded-xl ring-1 ring-slate-200 ${value ? 'bg-slate-900 text-white' : 'bg-white'}`}
  >
    {value ? 'On' : 'Off'}
  </button>
);

const SegmentedControl = ({ options, value, onChange }) => (
  <div className="inline-flex bg-slate-50 rounded-xl p-1 ring-1 ring-slate-200">
    {options.map(opt => (
      <button
        key={opt}
        onClick={() => onChange(opt)}
        className={`px-3 py-1 rounded-lg text-sm ${value === opt ? 'bg-slate-900 text-white' : 'text-slate-700'}`}
      >
        {opt}
      </button>
    ))}
  </div>
);

function MaterialButton({ item }) {
  const theme = MATERIAL_THEMES[item.color];
  const isAlert = item.status === "alert";
  const [hover, setHover] = useState(false);

  return (
    <motion.div
      type="button"
      onHoverStart={() => setHover(true)}
      onHoverEnd={() => setHover(false)}
      onClick={() => console.log("Pick", item.code)}
      className="relative w-full aspect-square rounded-xl focus:outline-none ring-1 text-white shadow-inner"
      style={{
        background: theme.bg,
        borderColor: theme.ring,
      }}
      animate={
        isAlert
          ? {
              scale: [1, 1.02, 0.99, 1.01, 1],
              rotate: [0, 0.6, -0.4, 0.4, 0],
              boxShadow: [
                `0 0 0 0 ${theme.glow}`,
                `0 0 0 10px ${theme.glow}`,
                `0 0 0 0 ${theme.glow}`,
              ],
            }
          : { scale: 1, rotate: 0, boxShadow: `0 0 0 0 ${theme.glow}` }
      }
      transition={isAlert ? { duration: 1.2, repeat: Infinity, ease: "easeInOut" } : { duration: 0.2 }}
    >
      <div className="absolute inset-0 rounded-xl" style={{ boxShadow: "inset 0 1px 0 rgba(255,255,255,.35)" }} />
      <div className="absolute top-1 left-1 text-[10px] font-semibold tracking-wide drop-shadow-sm">{item.code}</div>
      <div className="absolute bottom-1 left-1 text-[10px] drop-shadow-sm">{item.qty} pcs</div>
      <div className="absolute bottom-1 right-1 text-[10px] drop-shadow-sm uppercase">{item.color}</div>

      <AnimatePresence>
        {hover && (
          <motion.div
            initial={{ opacity: 0, y: 6 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 6 }}
            className="absolute -top-28 left-1/2 -translate-x-1/2 z-30 pointer-events-auto"
          >
            <div className="rounded-xl bg-white ring-1 ring-slate-200 shadow-2xl p-2 w-48 text-slate-900">
              <div className="text-xs font-medium">{item.code} â€¢ Alloy 6061-T6</div>
              <div className="text-[11px] text-slate-600 mb-2">Bin #{item.id} â€¢ {item.qty} pcs</div>
              <div className="flex gap-2">
                <button onClick={() => console.log("Pick", item.code)} className="flex-1 text-xs px-2 py-1 rounded-lg bg-slate-900 text-white">Pick</button>
                <button onClick={() => console.log("Details", item.code)} className="flex-1 text-xs px-2 py-1 rounded-lg ring-1 ring-slate-200">Details</button>
                <button onClick={() => console.log("Hold", item.code)} className="flex-1 text-xs px-2 py-1 rounded-lg ring-1 ring-slate-200">Hold</button>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
}

function MaterialsGrid() {
  const COLS = 15;
  const ROWS = 5;
  const TOTAL = COLS * ROWS;

  const [items] = useState(() => {
    const rand = (n) => Math.floor(Math.random() * n);
    const colors = ["red", "green", "blue"];
    return Array.from({ length: TOTAL }, (_, i) => {
      const color = colors[rand(colors.length)];
      const baseQty = 20 + rand(120);
      const status = Math.random() < 0.16 && color === "red" ? "alert" : (Math.random() < 0.5 ? "ok" : "busy");
      return {
        id: i + 1,
        code: `AL-${String(i + 1).padStart(3, "0")}`,
        color,
        qty: baseQty,
        status,
      };
    });
  });

  return (
    <div className="max-w-7xl mx-auto">
      <div className="flex items-center justify-between mb-4">
        <div>
          <h1 className="text-2xl font-bold tracking-tight">Materials: Aluminum Positions</h1>
          <p className="mt-1 text-sm opacity-80">15 Ã— 5 dense grid â€¢ colors carry meaning â€¢ red tiles can emit a vibrating glow for urgent signals.</p>
        </div>
        <div className="text-xs rounded-lg ring-1 ring-slate-200 px-2 py-1 bg-white">Edit colors in MATERIAL_THEMES</div>
      </div>

      <div className="rounded-2xl ring-1 ring-slate-200 bg-white p-3">
        <div
          className="grid gap-2"
          style={{ gridTemplateColumns: `repeat(${COLS}, minmax(56px, 1fr))` }}
        >
          {items.map((it) => (
            <MaterialButton key={it.id} item={it} />
          ))}
        </div>

        <div className="mt-4 flex items-center gap-3 text-[11px] text-slate-600">
          <span className="inline-flex items-center gap-1">
            <span className="h-4 w-4 rounded bg-red-500 inline-block" /> Red = critical
          </span>
          <span className="inline-flex items-center gap-1">
            <span className="h-4 w-4 rounded bg-green-500 inline-block" /> Green = available
          </span>
          <span className="inline-flex items-center gap-1">
            <span className="h-4 w-4 rounded bg-blue-500 inline-block" /> Blue = in-use
          </span>
          <span className="ml-auto">Vibrating red glow = immediate attention</span>
        </div>
      </div>
    </div>
  );
}


function Rating({ value }) {
  const full = Math.floor(value);
  const half = value - full >= 0.5;
  return (
    <div className="flex items-center gap-1">
      {Array.from({ length: 5 }).map((_, i) => (
        <Star
          key={i}
          className={`h-4 w-4 ${i < full ? "fill-amber-400 text-amber-400" : "text-slate-300"}`}
        />
      ))}
      {half && <Star className="h-4 w-4 -ml-4 fill-amber-300 text-amber-300 opacity-70" />}
      <span className="text-xs text-slate-600 ml-1">{value.toFixed(1)}</span>
    </div>
  );
}

const Tag = ({ children }) => (
  <span className="px-2 py-0.5 rounded-full bg-slate-100 text-slate-700 text-[11px] ring-1 ring-slate-200">
    {children}
  </span>
);
function ShowcaseRow({ title, items, accent = "#2563eb" }) {
  const [activeId, setActiveId] = useState(null);

  // When any item is active, others shrink a bit
  const basisFor = (id) => (activeId ? (activeId === id ? 560 : 210) : 280);

  return (
    <div className="mb-8">
      <div className="flex items-center justify-between mb-3">
        <h3 className="text-lg font-semibold flex items-center gap-2">
          <Sparkles className="h-4 w-4" />
          {title}
        </h3>
        <button className="text-sm px-3 py-1.5 rounded-lg bg-slate-100 ring-1 ring-slate-200 hover:bg-slate-200/70">
          See all
        </button>
      </div>

      <div className="flex gap-3 overflow-x-auto pb-2">
        {items.map((item, idx) => {
          const isActive = activeId === item.id;

          return (
            <motion.div
              key={item.id}
              layout
              onMouseEnter={() => setActiveId(item.id)}
              onMouseLeave={() => setActiveId((prev) => (prev === item.id ? null : prev))}
              onFocus={() => setActiveId(item.id)}
              onBlur={() => setActiveId(null)}
              onClick={() => setActiveId((prev) => (prev === item.id ? null : item.id))}
              style={{ flex: `0 0 ${basisFor(item.id)}px` }}
              className={`relative rounded-2xl overflow-hidden ring-1 ring-slate-200 bg-white group cursor-pointer`}
              transition={{ type: "spring", stiffness: 300, damping: 26 }}
            >
              {/* COVER */}
              <div className="relative h-[180px]">
                <motion.img
                  src={item.cover}
                  alt={item.title}
                  className="absolute inset-0 w-full h-full object-cover"
                  animate={{ scale: isActive ? 1.06 : 1 }}
                  transition={{ type: "spring", stiffness: 200, damping: 18 }}
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-black/10 to-transparent" />
                <div className="absolute bottom-2 left-2 right-2 text-white">
                  <div className="flex items-center gap-2">
                    <Gamepad2 className="h-4 w-4 opacity-90" />
                    <span className="text-[11px] opacity-90">{item.publisher}</span>
                  </div>
                  <div className="mt-1 text-sm font-semibold truncate">{item.title}</div>
                  <div className="mt-1 flex flex-wrap gap-1">
                    {item.tags.slice(0, 3).map((t) => (
                      <span key={t} className="text-[10px] px-1.5 py-0.5 rounded bg-white/15 ring-1 ring-white/20">
                        {t}
                      </span>
                    ))}
                  </div>
                </div>

                {/* Top badges */}
                <div className="absolute top-2 left-2 flex gap-2">
                  <span
                    className="px-2 py-0.5 text-[10px] rounded-full ring-1 ring-white/40 bg-white/20 text-white backdrop-blur-sm"
                    style={{ boxShadow: "inset 0 0 0 1px rgba(255,255,255,.15)" }}
                  >
                    {item.price}
                  </span>
                  <span className="px-2 py-0.5 text-[10px] rounded-full bg-emerald-500/90 text-white flex items-center gap-1">
                    <BadgeCheck className="h-3 w-3" />
                    Verified
                  </span>
                </div>
              </div>

              {/* COLLAPSED footer */}
              {!isActive && (
                <div className="p-3">
                  <div className="flex items-center justify-between">
                    <Rating value={item.rating} />
                    <span className="text-[11px] text-slate-500">{item.reviews} reviews</span>
                  </div>
                  <div className="mt-2 flex items-center justify-between">
                    <button className="px-3 py-1.5 text-xs rounded-lg bg-slate-900 text-white hover:bg-black">
                      Get
                    </button>
                    <span className="text-[11px] text-slate-500">{item.size}</span>
                  </div>
                </div>
              )}

              {/* EXPANDED details (rich hover) */}
              <AnimatePresence>
                {isActive && (
                  <motion.div
                    key="expanded"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    className="absolute inset-0 grid grid-cols-5"
                  >
                    {/* LEFT: media */}
                    <div className="col-span-3 relative">
                      <div className="absolute inset-0">
                        <img
                          src={item.cover}
                          alt=""
                          className="w-full h-full object-cover"
                        />
                        <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-black/10 to-transparent" />
                      </div>

                      {/* Title overlay */}
                      <div className="absolute bottom-24 left-4 right-4 text-white">
                        <div className="text-xs opacity-90">{item.publisher}</div>
                        <div className="text-xl font-semibold leading-tight">{item.title}</div>
                        <div className="mt-1 flex items-center gap-2">
                          <Rating value={item.rating} />
                          <span className="text-[11px] opacity-80">â€¢ {item.reviews} reviews</span>
                        </div>
                      </div>

                      {/* Media controls */}
                      <div className="absolute bottom-4 left-4 right-4">
                        <div className="flex items-center gap-2">
                          <button className="px-3 py-2 rounded-lg bg-white/90 text-slate-900 text-xs ring-1 ring-slate-200 hover:bg-white">
                            <div className="flex items-center gap-2">
                              <Play className="h-4 w-4" />
                              Watch trailer
                            </div>
                          </button>
                          <button className="px-3 py-2 rounded-lg bg-slate-900/80 text-white text-xs ring-1 ring-slate-700 hover:bg-slate-900">
                            <div className="flex items-center gap-2">
                              <Download className="h-4 w-4" />
                              Install
                            </div>
                          </button>
                          <button className="px-3 py-2 rounded-lg bg-white/80 text-slate-800 text-xs ring-1 ring-slate-200 hover:bg-white">
                            <div className="flex items-center gap-2">
                              <Heart className="h-4 w-4" />
                              Wishlist
                            </div>
                          </button>
                          <button className="px-2.5 py-2 rounded-lg bg-white/70 text-slate-800 text-xs ring-1 ring-slate-200 hover:bg-white">
                            <Share2 className="h-4 w-4" />
                          </button>
                        </div>

                        {/* Thumbs */}
                        <div className="mt-2 flex gap-2 overflow-x-auto">
                          {item.screenshots.map((src, i) => (
                            <img
                              key={i}
                              src={src}
                              alt=""
                              className="h-14 w-24 object-cover rounded-lg ring-1 ring-white/30"
                            />
                          ))}
                        </div>
                      </div>
                    </div>

                    {/* RIGHT: info pane (scroll) */}
                    <div className="col-span-2 bg-white/80 backdrop-blur-md border-l border-slate-200 flex flex-col">
                      <div className="p-4 pb-2">
                        <div className="flex items-center gap-2 text-slate-700">
                          <Gamepad2 className="h-4 w-4" />
                          <span className="text-xs">PC â€¢ Cloud Save â€¢ Controller</span>
                        </div>
                        <div className="mt-2 text-[13px] text-slate-700 leading-relaxed">
                          {item.summary}
                        </div>

                        <div className="mt-3 flex flex-wrap gap-1.5">
                          {item.tags.map((t) => (
                            <Tag key={t}>{t}</Tag>
                          ))}
                        </div>

                        <div className="mt-3 grid grid-cols-3 gap-3 text-[11px]">
                          <div className="rounded-lg bg-slate-50 ring-1 ring-slate-200 p-2">
                            <div className="opacity-60">Size</div>
                            <div className="font-medium">{item.size}</div>
                          </div>
                          <div className="rounded-lg bg-slate-50 ring-1 ring-slate-200 p-2">
                            <div className="opacity-60">Updated</div>
                            <div className="font-medium">{item.lastUpdated}</div>
                          </div>
                          <div className="rounded-lg bg-slate-50 ring-1 ring-slate-200 p-2">
                            <div className="opacity-60">Price</div>
                            <div className="font-medium">{item.price}</div>
                          </div>
                        </div>
                      </div>

                      {/* Scroll area */}
                      <div className="px-4 pb-3 overflow-auto" style={{ maxHeight: 180 }}>
                        <div className="mt-2">
                          <div className="text-xs font-semibold text-slate-700 mb-1">Whatâ€™s new</div>
                          <ul className="space-y-1">
                            {item.whatsNew.map((w, i) => (
                              <li key={i} className="text-[12px] text-slate-700 flex items-start gap-2">
                                <Check className="h-3.5 w-3.5 mt-0.5 text-emerald-600" />
                                <span>{w}</span>
                              </li>
                            ))}
                          </ul>
                        </div>

                        <div className="mt-3">
                          <div className="text-xs font-semibold text-slate-700 mb-1">Key features</div>
                          <div className="flex flex-wrap gap-1.5">
                            {item.features.map((f) => (
                              <span
                                key={f}
                                className="text-[11px] px-2 py-0.5 rounded-lg bg-white ring-1 ring-slate-200 text-slate-700"
                              >
                                {f}
                              </span>
                            ))}
                          </div>
                        </div>
                      </div>

                      <div className="mt-auto p-4 pt-2 border-t border-slate-200 flex items-center justify-between">
                        <button
                          className="px-3 py-2 rounded-lg bg-slate-900 text-white text-xs hover:bg-black"
                          style={{ boxShadow: `0 6px 16px ${accent}22` }}
                        >
                          Get {item.title}
                        </button>
                        <button className="text-xs text-slate-700 flex items-center gap-1 hover:underline">
                          More details <ChevronRight className="h-3.5 w-3.5" />
                        </button>
                      </div>
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>
            </motion.div>
          );
        })}
      </div>
    </div>
  );
}

const cx = (...xs) => xs.filter(Boolean).join(" ");

const FsTag = ({ children }) => (
  <span className="inline-flex items-center gap-1 rounded-full border border-white/15 bg-white/5 px-2 py-0.5 text-[11px] leading-5 text-white/80">
    <Sparkles className="h-3 w-3" /> {children}
  </span>
);

const FsPill = ({ children }) => (
  <span className="inline-flex items-center gap-1 rounded-full bg-black/40 px-2 py-0.5 text-[12px] text-white/90 ring-1 ring-white/10 backdrop-blur">
    {children}
  </span>
);

const FsButton = ({ children, variant = "primary", icon: Icon, ...props }) => {
  const base = "inline-flex items-center gap-2 rounded-xl px-3.5 py-2 text-sm transition";
  const styles =
    variant === "primary"
      ? "bg-white text-black hover:bg-white/90"
      : "bg-white/10 text-white hover:bg-white/20";
  return (
    <button className={cx(base, styles)} {...props}>
      {Icon && <Icon className="h-4 w-4" />} {children}
    </button>
  );
};

const fileIconFor = (type) => {
  if (["png", "jpg", "jpeg", "webp"].includes(type)) return ImageIcon;
  if (["xls", "xlsx", "csv"].includes(type)) return FileSpreadsheet;
  return FileText;
};

// ---------- mock data (ALUMINUM industry) ----------
const MOCK_ITEMS = [
  {
    id: "al1",
    title: "6061-T6 Structural Extrusions",
    vendor: "AeroMetals Inc.",
    rating: 4.8,
    orders: "1.2K",
    hero: "https://images.unsplash.com/photo-1604335399105-a0d7ad5c88c7?q=80&w=1800&auto=format&fit=crop", // aluminum bars
    tags: ["Extrusion", "6061-T6", "Mill Finish", "RoHS"],
    verified: true, // ISO 9001
    blurb:
      "High-strength, heat-treatable aluminum extrusions in common aerospace profiles. Tight tolerance cuts, mill certs included. Suitable for structural frames, fixtures, and enclosures.",
    features: ["Â±0.10 mm tolerance", "Mill certificates", "REACH compliant", "Heat treatable"],
    attachments: [
      { name: "6061-T6_Profile_Catalog.pdf", type: "pdf", size: "2.3 MB" },
      { name: "A47_TSlot_Detail.dwg.png", type: "png", size: "640 KB" },
      { name: "Mechanical_Properties_6061.xlsx", type: "xlsx", size: "96 KB" },
    ],
    drawings: [
      "https://images.unsplash.com/photo-1520607162513-77705c0f0d4a?q=80&w=1200&auto=format&fit=crop",
      "https://images.unsplash.com/photo-1503387762-592deb58ef4e?q=80&w=1200&auto=format&fit=crop",
      "https://images.unsplash.com/photo-1531831108325-7fe9616bc231?q=80&w=1200&auto=format&fit=crop",
      "https://images.unsplash.com/photo-1517841905240-472988babdf9?q=80&w=1200&auto=format&fit=crop",
    ],
  },
  {
    id: "al2",
    title: "Anodized Coil Stock (Architectural)",
    vendor: "UrbanMetal Coatings",
    rating: 4.6,
    orders: "870",
    hero: "https://images.unsplash.com/photo-1581092588429-8e09d6a19b24?q=80&w=1800&auto=format&fit=crop",
    tags: ["Coil", "Anodized", "AA10", "UV Stable"],
    verified: true,
    blurb:
      "Pre-anodized aluminum coil in architectural finishes (clear, bronze, black). Consistent color across lots, UV-stable oxide layer, ready for facade cladding and trims.",
    features: ["AA10 coating", "Salt-spray tested", "Color lot traceability", "Non-fingerprint"],
    attachments: [
      { name: "Finish_Swatch_Bronze.pdf", type: "pdf", size: "1.1 MB" },
      { name: "Coil_Dimensions_Sheet.xlsx", type: "xlsx", size: "52 KB" },
    ],
    drawings: [
      "https://images.unsplash.com/photo-1518770660439-4636190af475?q=80&w=1200&auto=format&fit=crop",
      "https://images.unsplash.com/photo-1495562569060-2eec283d3391?q=80&w=1200&auto=format&fit=crop",
    ],
  },
  {
    id: "al3",
    title: "High-Pressure Die Casting (HPDC)",
    vendor: "SynCast Foundry",
    rating: 4.7,
    orders: "2.8K",
    hero: "https://images.unsplash.com/photo-1520607162513-77705c0f0d4a?q=80&w=1800&auto=format&fit=crop",
    tags: ["Casting", "ADC12", "Thin-wall"],
    verified: true,
    blurb:
      "HPDC parts in ADC12 and A380 with thin-wall capability down to 1.2 mm. Tooling DFM, vacuum assist, and post-machining available.",
    features: ["CT capability", "Vacuum gating", "PPAP ready", "Shot monitoring"],
    attachments: [
      { name: "DFM_Checklist_HPDC.pdf", type: "pdf", size: "690 KB" },
      { name: "ADC12_Material_Card.pdf", type: "pdf", size: "420 KB" },
      { name: "PPAP_Template.xlsx", type: "xlsx", size: "88 KB" },
    ],
    drawings: [
      "https://images.unsplash.com/photo-1581093588401-16ec8f20c8f0?q=80&w=1200&auto=format&fit=crop",
      "https://images.unsplash.com/photo-1542751371-adc38448a05e?q=80&w=1200&auto=format&fit=crop",
      "https://images.unsplash.com/photo-1548095115-45697e51374e?q=80&w=1200&auto=format&fit=crop",
    ],
  },
  {
    id: "al4",
    title: "Recycled Aluminum Billets (75% PCR)",
    vendor: "EcoAlloy Mill",
    rating: 4.5,
    orders: "640",
    hero: "https://images.unsplash.com/photo-1581094651181-3592a47057a4?q=80&w=1800&auto=format&fit=crop",
    tags: ["Billets", "Sustainability", "PCR 75%"],
    verified: false,
    blurb:
      "Billets with 75% post-consumer recycled content for low-carbon extrusion programs. EPD available, consistent chemistry, excellent surface quality.",
    features: ["EPD provided", "COâ‚‚e tracked", "Chemistry control", "Traceability"],
    attachments: [{ name: "EPD_EcoAlloy.pdf", type: "pdf", size: "1.9 MB" }],
    drawings: [
      "https://images.unsplash.com/photo-1520607162513-77705c0f0d4a?q=80&w=1200&auto=format&fit=crop",
    ],
  },
];

// ---------- GRID tile (unchanged look, but industry terms) ----------
function FsTileCard({ item, expanded, onHover, onLeave }) {
  return (
    <motion.div
      layout
      onMouseEnter={onHover}
      onMouseLeave={onLeave}
      transition={{ layout: { duration: 0.35, ease: [0.2, 0, 0, 1] } }}
      className={cx(
        "group relative overflow-hidden rounded-2xl border border-white/10 bg-zinc-900",
        "shadow-[0_8px_24px_-12px_rgba(0,0,0,0.65)]",
        expanded ? "col-span-2 row-span-2" : "col-span-1 row-span-1"
      )}
    >
      <img
        src={item.hero}
        alt=""
        className={cx(
          "absolute inset-0 h-full w-full object-cover opacity-70 transition-transform duration-300",
          "group-hover:scale-[1.04]"
        )}
      />
      <div className="absolute inset-0 bg-gradient-to-b from-black/10 via-black/40 to-black/80" />

      <div className="relative z-10 flex h-full flex-col justify-end p-4">
        <div className="mb-auto flex items-center gap-2">
          <FsPill>
            <Building2 className="h-3.5 w-3.5" /> {item.vendor}
          </FsPill>
          {item.verified && (
            <FsPill>
              <BadgeCheck className="h-3.5 w-3.5" /> ISO 9001
            </FsPill>
          )}
        </div>

        <div className="flex flex-wrap items-center gap-2">
          <h3 className="text-lg font-semibold text-white">{item.title}</h3>
          <span className="inline-flex items-center gap-1 text-white/80 text-sm">
            <Star className="h-4 w-4 fill-current" /> {item.rating}
          </span>
          <span className="text-white/60 text-sm">â€¢ {item.orders} orders</span>
        </div>

        <div className="mt-2 flex flex-wrap gap-1.5">
          {item.tags.map((t) => (
            <FsTag key={t}>{t}</FsTag>
          ))}
        </div>

        <AnimatePresence>
          {expanded && (
            <motion.div
              key="expanded"
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 10 }}
              transition={{ duration: 0.25, ease: "easeOut" }}
              className="mt-3"
            >
              <div className="max-h-24 overflow-y-auto pr-1 text-[13px] leading-5 text-white/85">
                {item.blurb}
              </div>

              <div className="mt-3 flex items-center gap-2">
                <FsButton icon={Download}>Download spec</FsButton>
                <FsButton icon={Heart} variant="secondary">
                  Watchlist
                </FsButton>
                <FsButton icon={Share2} variant="secondary">
                  Share
                </FsButton>
              </div>

              <div className="mt-3">
                <div className="text-xs uppercase tracking-wide text-white/60 mb-1">
                  Highlights
                </div>
                <ul className="grid grid-cols-2 gap-x-4 gap-y-1 text-[13px] text-white/85">
                  {item.features.map((f) => (
                    <li key={f} className="flex items-center gap-2">
                      <ChevronRight className="h-3.5 w-3.5" />
                      {f}
                    </li>
                  ))}
                </ul>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </motion.div>
  );
}

// ---------- LIST row (much richer expansion) ----------
function FsRowCard({ item, expanded, onHover, onLeave }) {
  return (
    <motion.div
      layout
      onMouseEnter={onHover}
      onMouseLeave={onLeave}
      transition={{ layout: { duration: 0.38, ease: [0.2, 0, 0, 1] } }}
      className="group overflow-hidden rounded-2xl border border-white/10 bg-zinc-900"
    >
      {/* header row */}
      <div className="grid grid-cols-[220px,1fr] gap-0">
        <div className="relative h-44">
          <img src={item.hero} alt="" className="absolute inset-0 h-full w-full object-cover" />
        </div>

        <div className="relative p-4">
          <div className="mb-1 flex flex-wrap items-center gap-2">
            <h3 className="text-lg font-semibold text-white">{item.title}</h3>
            <span className="inline-flex items-center gap-1 text-white/80 text-sm">
              <Star className="h-4 w-4 fill-current" /> {item.rating}
            </span>
            <span className="text-white/60 text-sm">â€¢ {item.orders} orders</span>
            {item.verified && (
              <span className="ml-2 inline-flex items-center gap-1 text-[12px] text-emerald-300/90">
                <BadgeCheck className="h-4 w-4" /> ISO 9001
              </span>
            )}
          </div>

          <div className="flex flex-wrap gap-1.5">
            {item.tags.map((t) => (
              <FsTag key={t}>{t}</FsTag>
            ))}
          </div>
        </div>
      </div>

      {/* expansion */}
      <AnimatePresence>
        {expanded && (
          <motion.div
            key="expanded-row"
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: "auto" }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.3, ease: "easeOut" }}
            className="px-4 pb-4"
          >
            <div className="mt-3 grid gap-4 xl:grid-cols-3">
              {/* left: long copy + attachments + actions */}
              <div className="xl:col-span-2">
                <div className="max-h-72 overflow-y-auto pr-2 text-[13px] leading-6 text-white/85">
                  <p className="mb-3">{item.blurb}</p>
                  <p className="mb-3">
                    Typical lead time 10â€“15 business days for standard profiles. Custom tooling
                    supported; submit STEP or DWG for a DFM pass. Meets RoHS and REACH; mill
                    certificates available per lot. Recommended finishing: clear anodize or powder coat.
                  </p>
                  <div className="text-xs uppercase tracking-wide text-white/60 mb-2">
                    Attachments
                  </div>
                  <ul className="space-y-1.5">
                    {item.attachments?.map((a) => {
                      const Icon = fileIconFor(a.type);
                      return (
                        <li
                          key={a.name}
                          className="flex items-center justify-between rounded-lg bg-white/5 px-3 py-2 text-white/90 ring-1 ring-white/10"
                        >
                          <div className="flex items-center gap-2">
                            <Icon className="h-4 w-4" />
                            <span className="text-sm">{a.name}</span>
                            <span className="text-xs text-white/50">â€¢ {a.size}</span>
                          </div>
                          <button className="inline-flex items-center gap-1 text-sm text-white/80 hover:text-white">
                            <Download className="h-4 w-4" /> Download
                          </button>
                        </li>
                      );
                    })}
                  </ul>

                  <div className="mt-3 text-xs uppercase tracking-wide text-white/60 mb-1">
                    Highlights
                  </div>
                  <ul className="grid grid-cols-2 gap-x-6 gap-y-1 text-[13px] text-white/85">
                    {item.features.map((f) => (
                      <li key={f} className="flex items-center gap-2">
                        <ClipboardList className="h-4 w-4" /> {f}
                      </li>
                    ))}
                  </ul>

                  <div className="mt-4 flex flex-wrap items-center gap-2">
                    <FsButton icon={MessageSquare}>Request quote</FsButton>
                    <FsButton icon={Mail} variant="secondary">
                      Contact sales
                    </FsButton>
                    <FsButton icon={Phone} variant="secondary">
                      Call mill
                    </FsButton>
                    <FsButton icon={Share2} variant="secondary">
                      Share
                    </FsButton>
                  </div>
                </div>
              </div>

              {/* right: drawings / images */}
              <div className="xl:col-span-1">
                <div className="text-xs uppercase tracking-wide text-white/60 mb-2">
                  Technical drawings & photos
                </div>
                <div className="grid grid-cols-2 gap-2">
                  {(item.drawings || []).map((src, i) => (
                    <div
                      key={src + i}
                      className="relative aspect-[4/3] overflow-hidden rounded-lg border border-white/10"
                    >
                      <img
                        src={src}
                        alt=""
                        className="h-full w-full object-cover transition-transform duration-300 group-hover:scale-[1.03]"
                      />
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
}

// ---------- main panel ----------
function GamesShowcasePanel({
  visible = true,
  view = "grid", // "grid" | "list"
  items = MOCK_ITEMS,
}) {
  const [hovered, setHovered] = useState(null);

  // small delay helps prevent jitter when moving across child elements
  const clearHover = () => {
    window.clearTimeout(GamesShowcasePanel._tid);
    GamesShowcasePanel._tid = window.setTimeout(() => setHovered(null), 40);
  };
  const setHover = (id) => {
    window.clearTimeout(GamesShowcasePanel._tid);
    setHovered(id);
  };

  const grid = view === "grid";

  return (
    <div className={cx(visible ? "block" : "hidden", "w-full overflow-x-hidden")}>
      <div className="mb-4 flex items-center justify-between">
        <h2 className="text-xl font-semibold text-white">Catalog</h2>
        <div className="text-sm text-white/70 flex items-center gap-2">
          <Building2 className="h-4 w-4" /> Store-style hover expansion (aluminum)
        </div>
      </div>

      <LayoutGroup>
        {grid ? (
          <div
            className={cx(
              "grid gap-4",
              "grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4",
              "auto-rows-[12rem]"
            )}
          >
            {items.map((item) => (
              <FsTileCard
                key={item.id}
                item={item}
                expanded={hovered === item.id}
                onHover={() => setHover(item.id)}
                onLeave={clearHover}
              />
            ))}
          </div>
        ) : (
          <div className="flex flex-col gap-3">
            {items.map((item) => (
              <FsRowCard
                key={item.id}
                item={item}
                expanded={hovered === item.id}
                onHover={() => setHover(item.id)}
                onLeave={clearHover}
              />
            ))}
          </div>
        )}
      </LayoutGroup>
    </div>
  );
}

// Gantt Chart Component
function GanttChart() {
  const [viewMode, setViewMode] = useState('month');
  const [selectedTask, setSelectedTask] = useState(null);
  const [showDependencies, setShowDependencies] = useState(true);
  const [currentDate] = useState(new Date('2025-08-14'));

  const [tasks] = useState([
    {
      id: 1,
      name: "Project Planning",
      assignee: "John Smith",
      start: new Date('2025-07-01'),
      end: new Date('2025-07-15'),
      progress: 100,
      status: 'completed',
      dependencies: [],
      color: '#059669'
    },
    {
      id: 2,
      name: "Design Phase",
      assignee: "Sarah Johnson",
      start: new Date('2025-07-10'),
      end: new Date('2025-07-28'),
      progress: 100,
      status: 'completed',
      dependencies: [1],
      color: '#2563eb'
    },
    {
      id: 3,
      name: "Frontend Development",
      assignee: "Mike Chen",
      start: new Date('2025-07-25'),
      end: new Date('2025-08-20'),
      progress: 65,
      status: 'in-progress',
      dependencies: [2],
      color: '#7c3aed'
    },
    {
      id: 4,
      name: "Backend Development",
      assignee: "Lisa Park",
      start: new Date('2025-07-25'),
      end: new Date('2025-08-25'),
      progress: 45,
      status: 'in-progress',
      dependencies: [2],
      color: '#db2777'
    },
    {
      id: 5,
      name: "Database Design",
      assignee: "Tom Wilson",
      start: new Date('2025-07-20'),
      end: new Date('2025-08-05'),
      progress: 100,
      status: 'completed',
      dependencies: [1],
      color: '#ea580c'
    },
    {
      id: 6,
      name: "API Integration",
      assignee: "Emily Davis",
      start: new Date('2025-08-06'),
      end: new Date('2025-08-18'),
      progress: 75,
      status: 'in-progress',
      dependencies: [5],
      color: '#0891b2'
    },
    {
      id: 7,
      name: "Testing & QA",
      assignee: "Robert Lee",
      start: new Date('2025-08-15'),
      end: new Date('2025-09-05'),
      progress: 20,
      status: 'pending',
      dependencies: [3, 4],
      color: '#84cc16'
    },
    {
      id: 8,
      name: "Deployment",
      assignee: "Anna Brown",
      start: new Date('2025-09-01'),
      end: new Date('2025-09-10'),
      progress: 0,
      status: 'pending',
      dependencies: [7],
      color: '#f59e0b'
    }
  ]);

  const getDateRange = () => {
    const starts = tasks.map(t => t.start);
    const ends = tasks.map(t => t.end);
    const minDate = new Date(Math.min(...starts));
    const maxDate = new Date(Math.max(...ends));
    minDate.setDate(minDate.getDate() - 7);
    maxDate.setDate(maxDate.getDate() + 7);
    return { minDate, maxDate };
  };

  const { minDate, maxDate } = getDateRange();
  const totalDays = Math.ceil((maxDate - minDate) / (1000 * 60 * 60 * 24));

  const getTaskPosition = (task) => {
    const startOffset = Math.ceil((task.start - minDate) / (1000 * 60 * 60 * 24));
    const duration = Math.ceil((task.end - task.start) / (1000 * 60 * 60 * 24));
    const left = (startOffset / totalDays) * 100;
    const width = (duration / totalDays) * 100;
    return { left: `${left}%`, width: `${width}%` };
  };

  const getTodayPosition = () => {
    const todayOffset = Math.ceil((currentDate - minDate) / (1000 * 60 * 60 * 24));
    return (todayOffset / totalDays) * 100;
  };

  const getStatusIcon = (status) => {
    switch(status) {
      case 'completed': return <CheckCircle className="h-3 w-3" />;
      case 'in-progress': return <Clock className="h-3 w-3" />;
      case 'pending': return <AlertCircle className="h-3 w-3" />;
      default: return null;
    }
  };

  return (
    <div className="max-w-full mx-auto">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h1 className="text-2xl font-bold tracking-tight">Project Timeline</h1>
          <p className="mt-1 text-sm opacity-80">Interactive Gantt chart with task dependencies and progress tracking</p>
        </div>
        <div className="flex items-center gap-2">
          <button className="px-3 py-2 rounded-xl bg-slate-100 ring-1 ring-slate-200 flex items-center gap-2">
            <Filter className="h-4 w-4" />
            Filter
          </button>
          <button className="px-3 py-2 rounded-xl bg-slate-100 ring-1 ring-slate-200 flex items-center gap-2">
            <Download className="h-4 w-4" />
            Export
          </button>
          <button className="px-3 py-2 rounded-xl bg-slate-900 text-white flex items-center gap-2">
            <Calendar className="h-4 w-4" />
            Add Task
          </button>
        </div>
      </div>

      <div className="mb-4 flex items-center justify-between">
        <div className="flex items-center gap-2">
          <span className="text-sm font-medium">View:</span>
          {['week', 'month', 'quarter'].map(mode => (
            <button
              key={mode}
              onClick={() => setViewMode(mode)}
              className={`px-3 py-1 rounded-lg text-sm capitalize transition-colors ${
                viewMode === mode 
                  ? 'bg-slate-900 text-white' 
                  : 'bg-slate-100 ring-1 ring-slate-200 hover:bg-slate-200'
              }`}
            >
              {mode}
            </button>
          ))}
        </div>
        <div className="flex items-center gap-4">
          <label className="flex items-center gap-2 text-sm">
            <input
              type="checkbox"
              checked={showDependencies}
              onChange={(e) => setShowDependencies(e.target.checked)}
              className="rounded"
            />
            Show dependencies
          </label>
          <div className="flex items-center gap-1">
            <button className="p-1 rounded-lg hover:bg-slate-100">
              <ChevronLeft className="h-4 w-4" />
            </button>
            <span className="text-sm font-medium px-2">August 2025</span>
            <button className="p-1 rounded-lg hover:bg-slate-100">
              <ChevronRight className="h-4 w-4" />
            </button>
          </div>
        </div>
      </div>

      <div className="rounded-2xl ring-1 ring-slate-200 bg-white overflow-hidden">
        <div className="grid grid-cols-[300px_1fr]">
          <div className="border-r border-slate-200">
            <div className="p-3 border-b border-slate-200 bg-slate-50">
              <div className="grid grid-cols-[1fr_80px_100px] gap-2 text-xs font-medium text-slate-600">
                <span>Task Name</span>
                <span>Assignee</span>
                <span>Progress</span>
              </div>
            </div>
            <div className="divide-y divide-slate-200">
              {tasks.map(task => (
                <motion.div
                  key={task.id}
                  whileHover={{ backgroundColor: 'rgb(248 250 252)' }}
                  className={`p-3 cursor-pointer ${selectedTask?.id === task.id ? 'bg-slate-50' : ''}`}
                  onClick={() => setSelectedTask(task)}
                >
                  <div className="grid grid-cols-[1fr_80px_100px] gap-2 items-center">
                    <div className="flex items-center gap-2">
                      <div 
                        className="w-2 h-2 rounded-full"
                        style={{ backgroundColor: task.color }}
                      />
                      <span className="text-sm font-medium truncate">{task.name}</span>
                      {getStatusIcon(task.status)}
                    </div>
                    <div className="text-xs text-slate-600 truncate">{task.assignee.split(' ')[0]}</div>
                    <div className="flex items-center gap-1">
                      <div className="flex-1 h-1.5 bg-slate-200 rounded-full overflow-hidden">
                        <motion.div
                          className="h-full"
                          style={{ 
                            width: `${task.progress}%`,
                            backgroundColor: task.progress === 100 ? '#10b981' : task.color
                          }}
                          initial={{ width: 0 }}
                          animate={{ width: `${task.progress}%` }}
                          transition={{ duration: 1, delay: 0.1 }}
                        />
                      </div>
                      <span className="text-xs text-slate-600">{task.progress}%</span>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          </div>

          <div className="relative">
            <div className="sticky top-0 z-10 bg-slate-50 border-b border-slate-200 h-12 flex items-center px-4">
              <span className="text-xs font-medium text-slate-600">Timeline View</span>
            </div>

            <div className="relative">
              <div
                className="absolute top-0 bottom-0 w-0.5 bg-red-500 z-20 pointer-events-none"
                style={{ left: `${getTodayPosition()}%` }}
              >
                <div className="absolute -top-6 left-1/2 -translate-x-1/2 bg-red-500 text-white text-xs px-2 py-0.5 rounded">
                  Today
                </div>
              </div>

              <div className="relative">
                {tasks.map((task, idx) => {
                  const position = getTaskPosition(task);
                  return (
                    <div key={task.id} className="h-12 relative group">
                      <motion.div
                        className="absolute top-2 h-8 rounded-lg cursor-pointer shadow-sm hover:shadow-md transition-shadow z-10"
                        style={{
                          ...position,
                          backgroundColor: task.color + '20',
                          border: `2px solid ${task.color}`
                        }}
                        whileHover={{ scale: 1.02 }}
                        onClick={() => setSelectedTask(task)}
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ delay: idx * 0.05 }}
                      >
                        <div
                          className="h-full rounded-md transition-all"
                          style={{
                            width: `${task.progress}%`,
                            backgroundColor: task.color + '60'
                          }}
                        />
                        
                        <div className="opacity-0 group-hover:opacity-100 absolute -top-20 left-1/2 -translate-x-1/2 bg-slate-900 text-white text-xs rounded-lg px-3 py-2 pointer-events-none z-30 whitespace-nowrap transition-opacity">
                          <div className="font-medium">{task.name}</div>
                          <div className="mt-1 text-slate-300">
                            {task.start.toLocaleDateString()} - {task.end.toLocaleDateString()}
                          </div>
                          <div className="mt-1">Progress: {task.progress}%</div>
                          <div className="absolute -bottom-1 left-1/2 -translate-x-1/2 w-2 h-2 bg-slate-900 rotate-45" />
                        </div>
                      </motion.div>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
      </div>

      <AnimatePresence>
        {selectedTask && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 20 }}
            className="mt-4 rounded-2xl ring-1 ring-slate-200 bg-white p-4"
          >
            <div className="flex items-start justify-between">
              <div>
                <h3 className="font-semibold flex items-center gap-2">
                  <div 
                    className="w-3 h-3 rounded-full"
                    style={{ backgroundColor: selectedTask.color }}
                  />
                  {selectedTask.name}
                </h3>
                <div className="mt-2 grid grid-cols-2 sm:grid-cols-4 gap-4 text-sm">
                  <div>
                    <span className="text-slate-600">Assignee:</span>
                    <p className="font-medium">{selectedTask.assignee}</p>
                  </div>
                  <div>
                    <span className="text-slate-600">Start Date:</span>
                    <p className="font-medium">{selectedTask.start.toLocaleDateString()}</p>
                  </div>
                  <div>
                    <span className="text-slate-600">End Date:</span>
                    <p className="font-medium">{selectedTask.end.toLocaleDateString()}</p>
                  </div>
                  <div>
                    <span className="text-slate-600">Status:</span>
                    <p className="font-medium capitalize">{selectedTask.status.replace('-', ' ')}</p>
                  </div>
                </div>
              </div>
              <button
                onClick={() => setSelectedTask(null)}
                className="p-1 rounded-lg hover:bg-slate-100"
              >
                <XCircle className="h-4 w-4" />
              </button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}

// Timeline Visualization Component
function TimelineVisualization() {
  const [viewType, setViewType] = useState('linear');
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [autoPlay, setAutoPlay] = useState(false);
  const [currentIndex, setCurrentIndex] = useState(0);

  const [events] = useState([
    {
      id: 1,
      date: new Date('2025-01-15'),
      title: 'Project Kickoff',
      description: 'Initial project meeting and requirements gathering',
      type: 'milestone',
      category: 'planning',
      icon: Flag,
      color: '#059669',
      participants: ['John Smith', 'Sarah Johnson'],
      attachments: 2
    },
    {
      id: 2,
      date: new Date('2025-02-01'),
      title: 'Design Review',
      description: 'First design iteration presented to stakeholders',
      type: 'review',
      category: 'design',
      icon: Target,
      color: '#2563eb',
      participants: ['Sarah Johnson', 'Mike Chen'],
      attachments: 5
    },
    {
      id: 3,
      date: new Date('2025-03-10'),
      title: 'Development Sprint 1',
      description: 'Core functionality implementation begins',
      type: 'sprint',
      category: 'development',
      icon: Zap,
      color: '#7c3aed',
      participants: ['Mike Chen', 'Lisa Park'],
      attachments: 0
    },
    {
      id: 4,
      date: new Date('2025-04-15'),
      title: 'Alpha Release',
      description: 'Internal testing version deployed',
      type: 'release',
      category: 'deployment',
      icon: Award,
      color: '#db2777',
      participants: ['Tom Wilson', 'Emily Davis'],
      attachments: 3
    },
    {
      id: 5,
      date: new Date('2025-05-20'),
      title: 'User Testing',
      description: 'First round of user acceptance testing',
      type: 'testing',
      category: 'quality',
      icon: Users,
      color: '#ea580c',
      participants: ['Robert Lee', 'Anna Brown'],
      attachments: 8
    },
    {
      id: 6,
      date: new Date('2025-06-01'),
      title: 'Beta Launch',
      description: 'Limited public release for feedback',
      type: 'release',
      category: 'deployment',
      icon: TrendingUp,
      color: '#0891b2',
      participants: ['All Team'],
      attachments: 4
    },
    {
      id: 7,
      date: new Date('2025-07-15'),
      title: 'Performance Review',
      description: 'System performance analysis and optimization',
      type: 'review',
      category: 'quality',
      icon: BarChart3,
      color: '#84cc16',
      participants: ['Mike Chen', 'Tom Wilson'],
      attachments: 6
    },
    {
      id: 8,
      date: new Date('2025-08-01'),
      title: 'Final Release',
      description: 'Full production deployment',
      type: 'milestone',
      category: 'deployment',
      icon: Star,
      color: '#f59e0b',
      participants: ['All Team'],
      attachments: 10
    }
  ]);

  useEffect(() => {
    if (autoPlay) {
      const interval = setInterval(() => {
        setCurrentIndex((prev) => (prev + 1) % events.length);
      }, 3000);
      return () => clearInterval(interval);
    }
  }, [autoPlay, events.length]);

  const getRelativeTime = (date) => {
    const now = new Date('2025-08-14');
    const diff = now - date;
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    
    if (days === 0) return 'Today';
    if (days === 1) return 'Yesterday';
    if (days < 7) return `${days} days ago`;
    if (days < 30) return `${Math.floor(days / 7)} weeks ago`;
    if (days < 365) return `${Math.floor(days / 30)} months ago`;
    return `${Math.floor(days / 365)} years ago`;
  };

  return (
    <div className="max-w-full mx-auto">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h1 className="text-2xl font-bold tracking-tight">Project Timeline</h1>
          <p className="mt-1 text-sm opacity-80">Interactive timeline visualization with milestones and events</p>
        </div>
        <div className="flex items-center gap-2">
          <button
            onClick={() => setAutoPlay(!autoPlay)}
            className={`px-3 py-2 rounded-xl flex items-center gap-2 ${
              autoPlay ? 'bg-slate-900 text-white' : 'bg-slate-100 ring-1 ring-slate-200'
            }`}
          >
            {autoPlay ? <Pause className="h-4 w-4" /> : <Play className="h-4 w-4" />}
            {autoPlay ? 'Pause' : 'Play'}
          </button>
          <button className="px-3 py-2 rounded-xl bg-slate-100 ring-1 ring-slate-200 flex items-center gap-2">
            <Grid3x3 className="h-4 w-4" />
            Grid View
          </button>
        </div>
      </div>

      <div className="mb-4 flex items-center gap-2">
        <span className="text-sm font-medium">View:</span>
        {['linear', 'milestone'].map(type => (
          <button
            key={type}
            onClick={() => setViewType(type)}
            className={`px-3 py-1 rounded-lg text-sm capitalize transition-colors ${
              viewType === type 
                ? 'bg-slate-900 text-white' 
                : 'bg-slate-100 ring-1 ring-slate-200 hover:bg-slate-200'
            }`}
          >
            {type}
          </button>
        ))}
      </div>

      {viewType === 'linear' && (
        <div className="rounded-2xl ring-1 ring-slate-200 bg-white p-6">
          <div className="relative">
            <div className="absolute left-8 top-0 bottom-0 w-0.5 bg-slate-200" />
            
            <div className="space-y-6">
              {events.map((event, idx) => {
                const Icon = event.icon;
                const isActive = currentIndex === idx;
                
                return (
                  <motion.div
                    key={event.id}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: idx * 0.1 }}
                    className={`relative flex gap-4 ${isActive ? 'scale-105' : ''}`}
                  >
                    <motion.div
                      className="relative z-10 w-16 h-16 rounded-full flex items-center justify-center shadow-lg"
                      style={{ backgroundColor: event.color + '20', border: `3px solid ${event.color}` }}
                      whileHover={{ scale: 1.1 }}
                      animate={isActive ? { scale: [1, 1.2, 1] } : {}}
                    >
                      <Icon className="h-6 w-6" style={{ color: event.color }} />
                    </motion.div>

                    <motion.div
                      className="flex-1 rounded-xl ring-1 ring-slate-200 bg-white p-4 cursor-pointer hover:shadow-md transition-shadow"
                      onClick={() => setSelectedEvent(event)}
                      whileHover={{ y: -2 }}
                    >
                      <div className="flex items-start justify-between">
                        <div>
                          <div className="flex items-center gap-3">
                            <h3 className="font-semibold">{event.title}</h3>
                            <span className={`text-xs px-2 py-0.5 rounded-full ring-1 ${
                              event.type === 'milestone' ? 'bg-amber-100 text-amber-800 ring-amber-200' :
                              event.type === 'release' ? 'bg-green-100 text-green-800 ring-green-200' :
                              'bg-slate-100 text-slate-600 ring-slate-200'
                            }`}>
                              {event.type}
                            </span>
                          </div>
                          <p className="text-sm text-slate-600 mt-1">{event.description}</p>
                          <div className="flex items-center gap-4 mt-3 text-xs text-slate-500">
                            <span className="flex items-center gap-1">
                              <Calendar className="h-3 w-3" />
                              {event.date.toLocaleDateString()}
                            </span>
                            <span className="flex items-center gap-1">
                              <Clock className="h-3 w-3" />
                              {getRelativeTime(event.date)}
                            </span>
                            <span className="flex items-center gap-1">
                              <Users className="h-3 w-3" />
                              {event.participants.length} participants
                            </span>
                            {event.attachments > 0 && (
                              <span className="flex items-center gap-1">
                                <MessageSquare className="h-3 w-3" />
                                {event.attachments} files
                              </span>
                            )}
                          </div>
                        </div>
                        <ChevronRight className="h-4 w-4 text-slate-400" />
                      </div>
                    </motion.div>
                  </motion.div>
                );
              })}
            </div>
          </div>
        </div>
      )}

      {viewType === 'milestone' && (
        <div className="rounded-2xl ring-1 ring-slate-200 bg-white p-6">
          <div className="relative h-32">
            <div className="absolute top-1/2 left-0 right-0 h-1 bg-slate-200 rounded-full -translate-y-1/2">
              <motion.div
                className="h-full bg-gradient-to-r from-blue-500 to-purple-500 rounded-full"
                initial={{ width: 0 }}
                animate={{ width: '75%' }}
                transition={{ duration: 1.5, ease: "easeOut" }}
              />
            </div>

            <div className="relative h-full flex justify-between items-center">
              {events.filter(e => e.type === 'milestone' || e.type === 'release').map((event, idx, arr) => {
                const Icon = event.icon;
                
                return (
                  <motion.div
                    key={event.id}
                    className="relative"
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: idx * 0.2 }}
                  >
                    <motion.div
                      className="w-12 h-12 rounded-full flex items-center justify-center shadow-lg cursor-pointer"
                      style={{ backgroundColor: event.color + '20', border: `3px solid ${event.color}` }}
                      whileHover={{ scale: 1.15 }}
                      onClick={() => setSelectedEvent(event)}
                    >
                      <Icon className="h-5 w-5" style={{ color: event.color }} />
                    </motion.div>
                    <div className="mt-2 text-center absolute left-1/2 -translate-x-1/2 whitespace-nowrap">
                      <p className="text-xs font-medium">{event.title}</p>
                      <p className="text-xs text-slate-500">{event.date.toLocaleDateString()}</p>
                    </div>
                  </motion.div>
                );
              })}
            </div>
          </div>
        </div>
      )}

      {autoPlay && (
        <div className="mt-4 rounded-2xl ring-1 ring-slate-200 bg-white p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <button className="p-1 rounded-lg hover:bg-slate-100">
                <Rewind className="h-4 w-4" />
              </button>
              <button
                onClick={() => setAutoPlay(!autoPlay)}
                className="p-2 rounded-lg bg-slate-900 text-white"
              >
                <Pause className="h-4 w-4" />
              </button>
              <button className="p-1 rounded-lg hover:bg-slate-100">
                <FastForward className="h-4 w-4" />
              </button>
            </div>
            <div className="flex-1 mx-4">
              <div className="h-1 bg-slate-200 rounded-full">
                <motion.div
                  className="h-full bg-slate-900 rounded-full"
                  style={{ width: `${((currentIndex + 1) / events.length) * 100}%` }}
                />
              </div>
            </div>
            <span className="text-sm text-slate-600">
              {currentIndex + 1} / {events.length}
            </span>
          </div>
        </div>
      )}

      <AnimatePresence>
        {selectedEvent && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4"
            onClick={() => setSelectedEvent(null)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-white rounded-2xl p-6 max-w-lg w-full"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="flex items-start justify-between mb-4">
                <div className="flex items-center gap-3">
                  <div
                    className="w-12 h-12 rounded-xl flex items-center justify-center"
                    style={{ backgroundColor: selectedEvent.color + '20' }}
                  >
                                      {(() => {
                    const Icon = selectedEvent.icon;
                    return <Icon className="h-6 w-6" style={{ color: selectedEvent.color }} />;
                  })()}
                  </div>
                  <div>
                    <h2 className="text-xl font-semibold">{selectedEvent.title}</h2>
                    <p className="text-sm text-slate-600">{selectedEvent.date.toLocaleDateString()}</p>
                  </div>
                </div>
                <button
                  onClick={() => setSelectedEvent(null)}
                  className="p-1 rounded-lg hover:bg-slate-100"
                >
                  <XCircle className="h-5 w-5" />
                </button>
              </div>
              
              <p className="text-slate-700 mb-4">{selectedEvent.description}</p>
              
              <div className="space-y-3">
                <div>
                  <span className="text-sm font-medium text-slate-600">Participants:</span>
                  <div className="flex flex-wrap gap-2 mt-1">
                    {selectedEvent.participants.map(p => (
                      <span key={p} className="text-sm px-2 py-1 rounded-lg bg-slate-100">
                        {p}
                      </span>
                    ))}
                  </div>
                </div>
                
                <div className="flex items-center justify-between pt-3 border-t">
                  <div className="flex items-center gap-3 text-sm text-slate-600">
                    <span className="flex items-center gap-1">
                      <Layers className="h-4 w-4" />
                      {selectedEvent.category}
                    </span>
                    <span className="flex items-center gap-1">
                      <MessageSquare className="h-4 w-4" />
                      {selectedEvent.attachments} attachments
                    </span>
                  </div>
                  <button className="px-3 py-1.5 rounded-lg bg-slate-900 text-white text-sm">
                    View Details
                  </button>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}

// Invoice Processing Tab Component - Version 4
// Drop this into your App.jsx as a new component

const CombinedFloorManagement = () => {
  const [selectedFloor, setSelectedFloor] = useState(1);
  const [backgroundImage, setBackgroundImage] = useState(null);
  const [positions, setPositions] = useState([]);
  const [selectedPosition, setSelectedPosition] = useState(null);
  const [showDetails, setShowDetails] = useState(false);
  const [isAddingPosition, setIsAddingPosition] = useState(false);
  const [hoveredPosition, setHoveredPosition] = useState(null);
  const [viewMode, setViewMode] = useState('interactive'); // interactive, edit, heatmap
  const fileInputRef = useRef(null);

  // Mock floor plans - these can be URLs or null
  const floorPlans = {
    1: null, // Will use uploaded image or show empty
    2: null,
    3: null
  };

  // Predefined positions for demo (these would be loaded from database)
  const defaultPositions = {
    1: [
      { id: 'door-1-1', type: 'door', x: 15, y: 45, name: 'Glavna vrata', status: 'installed' },
      { id: 'door-1-2', type: 'door', x: 35, y: 45, name: 'Vrata hodnik', status: 'pending' },
      { id: 'window-1-1', type: 'window', x: 25, y: 20, name: 'Prozor kuhinja', status: 'installed' },
      { id: 'window-1-2', type: 'window', x: 60, y: 30, name: 'Prozor dnevni', status: 'installed' },
      { id: 'curtain-1-1', type: 'curtain', x: 75, y: 50, name: 'Staklena stijena', status: 'manufacturing' },
    ],
    2: [
      { id: 'door-2-1', type: 'door', x: 20, y: 60, name: 'Vrata spavaÄ‡a 1', status: 'installed' },
      { id: 'door-2-2', type: 'door', x: 40, y: 60, name: 'Vrata spavaÄ‡a 2', status: 'installed' },
      { id: 'window-2-1', type: 'window', x: 30, y: 25, name: 'Prozor spavaÄ‡a 1', status: 'pending' },
      { id: 'window-2-2', type: 'window', x: 50, y: 25, name: 'Prozor spavaÄ‡a 2', status: 'installed' },
    ],
    3: [
      { id: 'door-3-1', type: 'door', x: 25, y: 70, name: 'Vrata ured', status: 'installed' },
      { id: 'window-3-1', type: 'window', x: 45, y: 35, name: 'Prozor ured', status: 'installed' },
      { id: 'curtain-3-1', type: 'curtain', x: 65, y: 40, name: 'Fasada sjever', status: 'pending' },
    ]
  };

  // Load positions for selected floor
  useEffect(() => {
    setPositions(defaultPositions[selectedFloor] || []);
  }, [selectedFloor]);

  // Handle background image upload
  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setBackgroundImage(e.target.result);
      };
      reader.readAsDataURL(file);
    }
  };

  // Add new position
  const handleAddPosition = (e) => {
    if (!isAddingPosition) return;
    
    const rect = e.currentTarget.getBoundingClientRect();
    const x = ((e.clientX - rect.left) / rect.width) * 100;
    const y = ((e.clientY - rect.top) / rect.height) * 100;
    
    const newPosition = {
      id: `custom-${Date.now()}`,
      type: 'door',
      x,
      y,
      name: 'Nova pozicija',
      status: 'pending',
      custom: true
    };
    
    setPositions([...positions, newPosition]);
    setIsAddingPosition(false);
  };

  // Delete position
  const handleDeletePosition = (id) => {
    setPositions(positions.filter(p => p.id !== id));
    setSelectedPosition(null);
    setShowDetails(false);
  };

  // Position details from "troÅ¡kovnik" (cost breakdown)
  const getPositionDetails = (position) => {
    const details = {
      door: {
        material: 'Aluminij eloksirani',
        dimensions: '2100 x 900 mm',
        color: 'RAL 7016',
        glass: 'Sigurnosno staklo 6mm',
        hardware: 'Roto NT',
        price: 'â‚¬ 850',
        installDate: '2025-08-20',
        warranty: '10 godina',
        certificates: ['CE', 'ISO 9001'],
      },
      window: {
        material: 'Aluminij termoprekid',
        dimensions: '1500 x 1200 mm',
        color: 'RAL 9016',
        glass: 'Trostruko IZO staklo',
        hardware: 'Siegenia TITAN',
        price: 'â‚¬ 650',
        installDate: '2025-08-18',
        warranty: '10 godina',
        certificates: ['CE', 'Energy Star'],
      },
      curtain: {
        material: 'Aluminij fasadni sistem',
        dimensions: '4000 x 3000 mm',
        color: 'Anodiziran prirodni',
        glass: 'Strukturno staklo 8+8mm',
        system: 'SchÃ¼co FWS 50',
        price: 'â‚¬ 12,500',
        installDate: '2025-09-01',
        warranty: '15 godina',
        certificates: ['CE', 'LEED Gold'],
      }
    };
    
    return details[position.type] || details.door;
  };

  // Get status color
  const getStatusColor = (status) => {
    
    return colors[status] || 'bg-gray-500';
  };

  // Get icon for position type
  const getPositionIcon = (type) => {
    const icons = {
      door: DoorOpen,
      window: Square,
      curtain: Maximize
    };
    return icons[type] || DoorOpen;
  };

  return (
    <div style={{ minHeight: '100vh', backgroundColor: '#f9fafb' }}>
      {/* Header Controls */}
      <div style={{ 
        backgroundColor: 'white', 
        boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
        borderBottom: '1px solid #e5e7eb',
        padding: '16px'
      }}>
        <div style={{ maxWidth: '1280px', margin: '0 auto' }}>
          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
            {/* Floor Selector */}
            <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
              <h2 style={{ fontSize: '20px', fontWeight: 'bold' }}>Interaktivni Tlocrt</h2>
              <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                <Building style={{ height: '20px', width: '20px', color: '#6b7280' }} />
                <select
                  value={selectedFloor}
                  onChange={(e) => setSelectedFloor(Number(e.target.value))}
                  style={{
                    padding: '8px 12px',
                    border: '1px solid #d1d5db',
                    borderRadius: '8px',
                    backgroundColor: 'white',
                    cursor: 'pointer'
                  }}
                >
                  <option value={1}>Kat 1 - Prizemlje</option>
                  <option value={2}>Kat 2 - Prvi kat</option>
                  <option value={3}>Kat 3 - Drugi kat</option>
                </select>
              </div>
            </div>

            {/* Action Buttons */}
            <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
              {/* View Mode Selector */}
              <div style={{ 
                display: 'flex', 
                alignItems: 'center', 
                gap: '4px',
                backgroundColor: '#f3f4f6',
                borderRadius: '8px',
                padding: '4px'
              }}>
                <button
                  onClick={() => setViewMode('interactive')}
                  style={{
                    padding: '6px 12px',
                    borderRadius: '6px',
                    fontSize: '14px',
                    fontWeight: '500',
                    border: 'none',
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '4px',
                    transition: 'all 0.2s',
                    backgroundColor: viewMode === 'interactive' ? 'white' : 'transparent',
                    color: viewMode === 'interactive' ? '#2563eb' : '#4b5563',
                    boxShadow: viewMode === 'interactive' ? '0 1px 2px rgba(0,0,0,0.05)' : 'none'
                  }}
                >
                  <Eye style={{ height: '16px', width: '16px' }} />
                  Pregled
                </button>
                <button
                  onClick={() => setViewMode('edit')}
                  style={{
                    padding: '6px 12px',
                    borderRadius: '6px',
                    fontSize: '14px',
                    fontWeight: '500',
                    border: 'none',
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '4px',
                    transition: 'all 0.2s',
                    backgroundColor: viewMode === 'edit' ? 'white' : 'transparent',
                    color: viewMode === 'edit' ? '#2563eb' : '#4b5563',
                    boxShadow: viewMode === 'edit' ? '0 1px 2px rgba(0,0,0,0.05)' : 'none'
                  }}
                >
                  <Edit3 style={{ height: '16px', width: '16px' }} />
                  UreÄ‘ivanje
                </button>
                <button
                  onClick={() => setViewMode('heatmap')}
                  style={{
                    padding: '6px 12px',
                    borderRadius: '6px',
                    fontSize: '14px',
                    fontWeight: '500',
                    border: 'none',
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '4px',
                    transition: 'all 0.2s',
                    backgroundColor: viewMode === 'heatmap' ? 'white' : 'transparent',
                    color: viewMode === 'heatmap' ? '#2563eb' : '#4b5563',
                    boxShadow: viewMode === 'heatmap' ? '0 1px 2px rgba(0,0,0,0.05)' : 'none'
                  }}
                >
                  <Activity style={{ height: '16px', width: '16px' }} />
                  Statistika
                </button>
              </div>

              {/* Upload Background */}
              <input
                ref={fileInputRef}
                type="file"
                accept="image/*"
                onChange={handleImageUpload}
                style={{ display: 'none' }}
              />
              <button
                onClick={() => fileInputRef.current?.click()}
                style={{
                  padding: '8px 16px',
                  backgroundColor: '#f3f4f6',
                  color: '#374151',
                  borderRadius: '8px',
                  border: 'none',
                  cursor: 'pointer',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '8px',
                  transition: 'background-color 0.2s'
                }}
                onMouseEnter={(e) => e.target.style.backgroundColor = '#e5e7eb'}
                onMouseLeave={(e) => e.target.style.backgroundColor = '#f3f4f6'}
              >
                <Upload style={{ height: '16px', width: '16px' }} />
                UÄitaj pozadinu
              </button>

              {/* Add Position Button */}
              {viewMode === 'edit' && (
                <button
                  onClick={() => setIsAddingPosition(!isAddingPosition)}
                  style={{
                    padding: '8px 16px',
                    backgroundColor: isAddingPosition ? '#3b82f6' : '#dbeafe',
                    color: isAddingPosition ? 'white' : '#1e40af',
                    borderRadius: '8px',
                    border: 'none',
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px',
                    transition: 'all 0.2s'
                  }}
                >
                  <Plus style={{ height: '16px', width: '16px' }} />
                  {isAddingPosition ? 'Klikni na tlocrt' : 'Dodaj poziciju'}
                </button>
              )}

              {/* Export Button */}
              <button 
                style={{
                  padding: '8px 16px',
                  backgroundColor: '#d1fae5',
                  color: '#065f46',
                  borderRadius: '8px',
                  border: 'none',
                  cursor: 'pointer',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '8px',
                  transition: 'background-color 0.2s'
                }}
                onMouseEnter={(e) => e.target.style.backgroundColor = '#a7f3d0'}
                onMouseLeave={(e) => e.target.style.backgroundColor = '#d1fae5'}
              >
                <Download style={{ height: '16px', width: '16px' }} />
                Izvezi
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Main Floor Plan Area */}
      <div className="max-w-7xl mx-auto p-4">
        <div className="bg-white rounded-xl shadow-lg overflow-hidden">
          <div className="relative">
            {/* Floor Plan Container */}
            <div 
              className="relative w-full h-[600px] bg-gray-100 cursor-crosshair overflow-hidden"
              onClick={viewMode === 'edit' ? handleAddPosition : undefined}
              style={{
                backgroundImage: backgroundImage ? `url(${backgroundImage})` : 'none',
                backgroundSize: 'contain',
                backgroundPosition: 'center',
                backgroundRepeat: 'no-repeat',
                backgroundColor: '#f9f9f9'
              }}
            >
              {/* Show placeholder text when no image */}
              {!backgroundImage && (
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="text-center">
                    <Upload className="h-12 w-12 mx-auto mb-2 text-gray-400" />
                    <p className="text-gray-500">Kliknite "UÄitaj pozadinu" za dodavanje tlocrta</p>
                  </div>
                </div>
              )}
              {/* Grid Overlay for Edit Mode */}
              {viewMode === 'edit' && (
                <div className="absolute inset-0 pointer-events-none">
                  <svg className="w-full h-full opacity-10">
                    <defs>
                      <pattern id="grid" width="20" height="20" patternUnits="userSpaceOnUse">
                        <path d="M 20 0 L 0 0 0 20" fill="none" stroke="black" strokeWidth="0.5"/>
                      </pattern>
                    </defs>
                    <rect width="100%" height="100%" fill="url(#grid)" />
                  </svg>
                </div>
              )}

              {/* Position Markers */}
              {positions.map((position) => {
                const Icon = getPositionIcon(position.type);
                const isHovered = hoveredPosition === position.id;
                const isSelected = selectedPosition?.id === position.id;

                return (
                  <motion.div
                    key={position.id}
                    className="absolute"
                    style={{ 
                      left: `${position.x}%`, 
                      top: `${position.y}%`,
                      transform: 'translate(-50%, -50%)'
                    }}
                    initial={{ scale: 0 }}
                    animate={{ scale: 1 }}
                    whileHover={{ scale: 1.2 }}
                    onHoverStart={() => setHoveredPosition(position.id)}
                    onHoverEnd={() => setHoveredPosition(null)}
                  >
                    {/* Glow Effect */}
                    <AnimatePresence>
                      {(isHovered || isSelected) && (
                        <motion.div
                          initial={{ opacity: 0, scale: 0.8 }}
                          animate={{ opacity: 1, scale: 1.5 }}
                          exit={{ opacity: 0, scale: 0.8 }}
                          className={`absolute inset-0 rounded-full ${getStatusColor(position.status)} opacity-30 blur-xl`}
                        />
                      )}
                    </AnimatePresence>

                    {/* Position Button */}
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        setSelectedPosition(position);
                        setShowDetails(true);
                      }}
                      className={`relative z-10 w-10 h-10 rounded-full flex items-center justify-center shadow-lg transition-all ${
                        getStatusColor(position.status)
                      } text-white hover:shadow-xl`}
                    >
                      <Icon className="h-5 w-5" />
                    </button>

                    {/* Hover Tooltip */}
                    <AnimatePresence>
                      {isHovered && !showDetails && (
                        <motion.div
                          initial={{ opacity: 0, y: 10 }}
                          animate={{ opacity: 1, y: 0 }}
                          exit={{ opacity: 0, y: 10 }}
                          className="absolute bottom-full mb-2 left-1/2 transform -translate-x-1/2 pointer-events-none z-20"
                        >
                          <div className="bg-gray-900 text-white px-3 py-2 rounded-lg text-sm whitespace-nowrap">
                            <div className="font-semibold">{position.name}</div>
                            <div className="text-xs opacity-75 capitalize">{position.status}</div>
                            <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 translate-y-1/2 rotate-45 w-2 h-2 bg-gray-900" />
                          </div>
                        </motion.div>
                      )}
                    </AnimatePresence>
                  </motion.div>
                );
              })}

              {/* Add Position Indicator */}
              {isAddingPosition && (
                <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
                  <div className="bg-blue-500 text-white px-4 py-2 rounded-lg shadow-lg animate-pulse">
                    Klikni gdje Å¾eliÅ¡ dodati novu poziciju
                  </div>
                </div>
              )}
            </div>

            {/* Statistics Overlay (Heatmap Mode) */}
            {viewMode === 'heatmap' && (
              <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
                <div className="bg-white rounded-xl p-6 max-w-2xl w-full mx-4">
                  <h3 className="text-lg font-bold mb-4">Statistika kata {selectedFloor}</h3>
                  <div className="grid grid-cols-3 gap-4">
                    <div className="text-center">
                      <div className="text-3xl font-bold text-green-600">
                        {positions.filter(p => p.status === 'installed').length}
                      </div>
                      <div className="text-sm text-gray-600">Instalirano</div>
                    </div>
                    <div className="text-center">
                      <div className="text-3xl font-bold text-yellow-600">
                        {positions.filter(p => p.status === 'pending').length}
                      </div>
                      <div className="text-sm text-gray-600">Na Äekanju</div>
                    </div>
                    <div className="text-center">
                      <div className="text-3xl font-bold text-blue-600">
                        {positions.filter(p => p.status === 'manufacturing').length}
                      </div>
                      <div className="text-sm text-gray-600">U proizvodnji</div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Position Details Panel */}
        <AnimatePresence>
          {showDetails && selectedPosition && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 20 }}
              className="mt-4"
            >
              <div className="bg-white rounded-xl shadow-lg p-6">
                <div className="flex items-start justify-between mb-4">
                  <div>
                    <h3 className="text-xl font-bold flex items-center gap-2">
                      {React.createElement(getPositionIcon(selectedPosition.type), { className: "h-5 w-5" })}
                      {selectedPosition.name}
                    </h3>
                    <span className={`inline-block px-2 py-1 rounded-full text-xs text-white mt-2 ${
                      getStatusColor(selectedPosition.status)
                    }`}>
                      {selectedPosition.status}
                    </span>
                  </div>
                  <button
                    onClick={() => {
                      setShowDetails(false);
                      setSelectedPosition(null);
                    }}
                    className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                  >
                    <X className="h-5 w-5" />
                  </button>
                </div>

                {/* TroÅ¡kovnik Details */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {Object.entries(getPositionDetails(selectedPosition)).map(([key, value]) => (
                    <div key={key} className="border-l-4 border-blue-500 pl-3">
                      <div className="text-xs text-gray-500 capitalize">{key.replace(/([A-Z])/g, ' $1').trim()}</div>
                      <div className="font-semibold text-gray-900">
                        {Array.isArray(value) ? value.join(', ') : value}
                      </div>
                    </div>
                  ))}
                </div>

                {/* Action Buttons */}
                <div className="flex items-center gap-2 mt-6">
                  <button className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors flex items-center gap-2">
                    <Edit3 className="h-4 w-4" />
                    Uredi
                  </button>
                  <button className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors flex items-center gap-2">
                    <CheckCircle className="h-4 w-4" />
                    Potvrdi instalaciju
                  </button>
                  <button className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors flex items-center gap-2">
                    <Package className="h-4 w-4" />
                    TroÅ¡kovnik
                  </button>
                  {selectedPosition.custom && (
                    <button 
                      onClick={() => handleDeletePosition(selectedPosition.id)}
                      className="px-4 py-2 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition-colors flex items-center gap-2 ml-auto"
                    >
                      <Trash2 className="h-4 w-4" />
                      ObriÅ¡i
                    </button>
                  )}
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
};

const InvoiceProcessingTab = () => {
  const [processingStage, setProcessingStage] = useState('idle');
  const [uploadedFile, setUploadedFile] = useState(null);
  const [extractedData, setExtractedData] = useState(null);
  const [missingData, setMissingData] = useState({});
  const [selectedOIB, setSelectedOIB] = useState('');
  const [selectedMaterial, setSelectedMaterial] = useState('');
  const [animationProgress, setAnimationProgress] = useState(0);

  // Mock data for demonstration
  const mockExtractedData = {
    invoice_number: 'R-2025-0847',
    date: '2025-08-15',
    supplier: {
      name: 'Aluminum Solutions d.o.o.',
      oib: null, // Missing
      address: 'Industrijska 15, Zagreb'
    },
    items: [
      { description: 'Aluminijski profil 40x40mm', quantity: 50, price: 125.50, material_code: null },
      { description: 'Kutni spojevi', quantity: 100, price: 3.20, material_code: 'KUT-001' },
      { description: 'Vijci M8x20', quantity: 200, price: 0.15, material_code: 'VIJ-M8-20' }
    ],
    total: 6635.00,
    confidence: 87
  };

  const recentOIBs = [
    { oib: '12345678901', name: 'Metal Tech d.o.o.', usage: 15 },
    { oib: '98765432109', name: 'Alu Pro Zagreb', usage: 12 },
    { oib: '55566677788', name: 'Profil Expert', usage: 8 }
  ];

  const materialSuggestions = [
    { code: 'ALU-40-40', name: 'Standardni profil 40x40', match: 92 },
    { code: 'ALU-40-40-H', name: 'Profil 40x40 Heavy', match: 78 },
    { code: 'ALU-40-40-L', name: 'Profil 40x40 Light', match: 65 }
  ];

  useEffect(() => {
    let timer;
    if (processingStage === 'extracting') {
      timer = setTimeout(() => {
        setProcessingStage('analyzing');
        setExtractedData(mockExtractedData);
      }, 2000);
    } else if (processingStage === 'analyzing') {
      timer = setTimeout(() => {
        setProcessingStage('validating');
      }, 2500);
    } else if (processingStage === 'validating') {
      timer = setTimeout(() => {
        setProcessingStage('missing-data');
      }, 1500);
    }
    
    return () => {
      if (timer) clearTimeout(timer);
    };
  }, [processingStage]);

  useEffect(() => {
    let interval;
    if (processingStage === 'extracting' || processingStage === 'analyzing' || processingStage === 'validating') {
      let progress = 0;
      interval = setInterval(() => {
        progress += 2;
        if (progress > 100) progress = 100;
        setAnimationProgress(progress);
      }, 100);
    } else {
      setAnimationProgress(0);
    }
    
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [processingStage]);

  const ProcessingStageIndicator = ({ stage, currentStage }) => {
    const stages = ['extracting', 'analyzing', 'validating', 'missing-data'];
    const currentIndex = stages.indexOf(currentStage);
    const stageIndex = stages.indexOf(stage.id);
    
    const status = stageIndex < currentIndex ? 'complete' : 
                   stageIndex === currentIndex ? 'active' : 'pending';
    
    const Icon = stage.icon;

    return (
      <motion.div 
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: stageIndex * 0.1 }}
        className="flex flex-col items-center"
      >
        <motion.div 
          className={`
            w-12 h-12 rounded-full flex items-center justify-center
            ${status === 'complete' ? 'bg-green-500 text-white' : 
              status === 'active' ? 'bg-blue-500 text-white' : 
              'bg-gray-200 text-gray-400'}
          `}
          animate={status === 'active' ? {
            boxShadow: ['0 0 0 0 rgba(59,130,246,0.4)', '0 0 0 20px rgba(59,130,246,0)']
          } : {}}
          transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
        >
          {status === 'complete' ? <CheckCheck className="h-5 w-5" /> : <Icon className="h-5 w-5" />}
        </motion.div>
        <span className={`text-xs mt-2 ${status === 'active' ? 'font-semibold' : ''}`}>
          {stage.label}
        </span>
      </motion.div>
    );
  };

  const UploadZone = () => (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      className="bg-white rounded-2xl p-8 shadow-lg ring-1 ring-slate-200"
    >
      <div className="text-center mb-6">
        <h2 className="text-2xl font-bold mb-2">Unos RaÄuna - Verzija 4</h2>
        <p className="text-gray-600">AI procesiranje s automatskom validacijom i dopunom podataka</p>
      </div>

      <label className="block">
        <motion.div 
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          className="border-2 border-dashed border-gray-300 rounded-xl p-12 text-center cursor-pointer hover:border-blue-500 transition-colors"
        >
          <Upload className="h-12 w-12 mx-auto mb-4 text-gray-400" />
          <p className="text-lg font-medium mb-2">Povucite raÄun ovdje</p>
          <p className="text-sm text-gray-500 mb-4">ili kliknite za odabir</p>
          <div className="flex justify-center gap-2">
            <span className="px-2 py-1 bg-blue-100 text-blue-700 rounded text-xs">PDF</span>
            <span className="px-2 py-1 bg-green-100 text-green-700 rounded text-xs">JPG</span>
            <span className="px-2 py-1 bg-purple-100 text-purple-700 rounded text-xs">PNG</span>
            <span className="px-2 py-1 bg-orange-100 text-orange-700 rounded text-xs">XLSX</span>
          </div>
        </motion.div>
        <input 
          type="file" 
          className="hidden" 
          accept=".pdf,.jpg,.jpeg,.png,.xlsx,.xls"
          onChange={(e) => {
            if (e.target.files[0]) {
              setUploadedFile(e.target.files[0]);
              setProcessingStage('extracting');
            }
          }}
        />
      </label>

      <div className="mt-6 grid grid-cols-3 gap-4">
        <div className="bg-gray-50 rounded-lg p-4">
          <div className="flex items-center gap-2 mb-2">
            <TrendingUp className="h-4 w-4 text-green-600" />
            <span className="text-sm font-medium">Danas obraÄ‘eno</span>
          </div>
          <p className="text-2xl font-bold">47</p>
          <p className="text-xs text-gray-500">raÄuna</p>
        </div>
        <div className="bg-gray-50 rounded-lg p-4">
          <div className="flex items-center gap-2 mb-2">
            <Clock className="h-4 w-4 text-blue-600" />
            <span className="text-sm font-medium">ProsjeÄno vrijeme</span>
          </div>
          <p className="text-2xl font-bold">1.2</p>
          <p className="text-xs text-gray-500">sekunde</p>
        </div>
        <div className="bg-gray-50 rounded-lg p-4">
          <div className="flex items-center gap-2 mb-2">
            <CheckCircle className="h-4 w-4 text-purple-600" />
            <span className="text-sm font-medium">ToÄnost</span>
          </div>
          <p className="text-2xl font-bold">99.2%</p>
          <p className="text-xs text-gray-500">validacija</p>
        </div>
      </div>
    </motion.div>
  );

  const MissingDataForm = () => (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-white rounded-2xl p-6 shadow-lg ring-1 ring-slate-200"
    >
      <div className="flex items-center justify-between mb-6">
        <div>
          <h3 className="text-xl font-bold flex items-center gap-2">
            <AlertCircle className="h-5 w-5 text-orange-500" />
            Dopuna Podataka
          </h3>
          <p className="text-sm text-gray-600 mt-1">AI je detektirao nedostajuÄ‡e podatke</p>
        </div>
        <div className="flex items-center gap-2 text-sm">
          <span className="text-gray-500">Pouzdanost analize:</span>
          <span className="font-semibold text-green-600">87%</span>
        </div>
      </div>

      {/* OIB Section */}
      <div className="mb-6">
        <label className="block text-sm font-medium mb-2">
          OIB DobavljaÄa <span className="text-red-500">*</span>
        </label>
        <div className="flex gap-2 mb-3">
          <input
            type="text"
            value={selectedOIB}
            onChange={(e) => setSelectedOIB(e.target.value)}
            placeholder="Unesite OIB (11 znamenki)"
            className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            maxLength="11"
          />
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
          >
            <Search className="h-4 w-4" />
          </motion.button>
        </div>
        
        <div className="space-y-2">
          <p className="text-xs text-gray-500 mb-2">Nedavno koriÅ¡teni OIB-ovi:</p>
          {recentOIBs.map((item) => (
            <motion.button
              key={item.oib}
              whileHover={{ x: 5 }}
              onClick={() => setSelectedOIB(item.oib)}
              className="w-full text-left px-3 py-2 bg-gray-50 rounded-lg hover:bg-gray-100 flex items-center justify-between group"
            >
              <div>
                <span className="font-medium text-sm">{item.oib}</span>
                <span className="text-xs text-gray-500 ml-2">{item.name}</span>
              </div>
              <span className="text-xs text-gray-400">koriÅ¡teno {item.usage}x</span>
            </motion.button>
          ))}
        </div>
      </div>

      {/* Material Mapping Section */}
      <div className="mb-6">
        <label className="block text-sm font-medium mb-2">
          Mapiranje Materijala <span className="text-gray-400">(preporuÄeno)</span>
        </label>
        <div className="bg-orange-50 border border-orange-200 rounded-lg p-3 mb-3">
          <p className="text-sm font-medium text-orange-800">Nepoznat materijal:</p>
          <p className="text-sm text-orange-600">"Aluminijski profil 40x40mm"</p>
        </div>
        
        <div className="space-y-2">
          <p className="text-xs text-gray-500 mb-2">Prijedlozi:</p>
          {materialSuggestions.map((material) => (
            <motion.button
              key={material.code}
              whileHover={{ x: 5 }}
              onClick={() => setSelectedMaterial(material.code)}
              className={`w-full text-left px-3 py-2 rounded-lg flex items-center justify-between group transition-all
                ${selectedMaterial === material.code ? 'bg-blue-50 ring-2 ring-blue-500' : 'bg-gray-50 hover:bg-gray-100'}`}
            >
              <div className="flex items-center gap-3">
                <div className={`w-12 h-6 rounded-full bg-gradient-to-r flex items-center justify-center text-xs font-bold text-white
                  ${material.match > 90 ? 'from-green-500 to-green-600' :
                    material.match > 75 ? 'from-yellow-500 to-yellow-600' :
                    'from-orange-500 to-orange-600'}`}>
                  {material.match}%
                </div>
                <div>
                  <span className="font-medium text-sm">{material.code}</span>
                  <span className="text-xs text-gray-500 ml-2">{material.name}</span>
                </div>
              </div>
              <ChevronRight className="h-4 w-4 text-gray-400 group-hover:text-gray-600" />
            </motion.button>
          ))}
          
          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            className="w-full px-3 py-2 border-2 border-dashed border-gray-300 rounded-lg hover:border-blue-500 text-sm text-gray-600 hover:text-blue-600 flex items-center justify-center gap-2"
          >
            <Plus className="h-4 w-4" />
            Stvori novi materijal
          </motion.button>
        </div>
      </div>

      {/* Action Buttons */}
      <div className="flex gap-3">
        <motion.button
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          onClick={() => setProcessingStage('task-created')}
          className="flex-1 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200"
        >
          PreskoÄi sve
        </motion.button>
        <motion.button
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          onClick={() => setProcessingStage('completed')}
          className="flex-1 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
        >
          Spremi i nastavi
        </motion.button>
      </div>
    </motion.div>
  );

  const CompletedView = () => (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      className="bg-white rounded-2xl p-8 shadow-lg ring-1 ring-slate-200 text-center"
    >
      <motion.div
        initial={{ scale: 0 }}
        animate={{ scale: 1 }}
        transition={{ type: "spring", duration: 0.5 }}
        className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4"
      >
        <CheckCircle className="h-10 w-10 text-green-600" />
      </motion.div>
      
      <h3 className="text-2xl font-bold mb-2">UspjeÅ¡no obraÄ‘eno!</h3>
      <p className="text-gray-600 mb-6">RaÄun je uspjeÅ¡no procesiran i spremljen u sustav</p>
      
      <div className="bg-gray-50 rounded-lg p-4 mb-6 text-left">
        <div className="grid grid-cols-2 gap-3 text-sm">
          <div>
            <span className="text-gray-500">Broj raÄuna:</span>
            <p className="font-semibold">R-2025-0847</p>
          </div>
          <div>
            <span className="text-gray-500">DobavljaÄ:</span>
            <p className="font-semibold">Aluminum Solutions d.o.o.</p>
          </div>
          <div>
            <span className="text-gray-500">Iznos:</span>
            <p className="font-semibold">6,635.00 â‚¬</p>
          </div>
          <div>
            <span className="text-gray-500">Stavki:</span>
            <p className="font-semibold">3 artikla</p>
          </div>
        </div>
      </div>
      
      <div className="flex gap-3">
        <motion.button
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          onClick={() => setProcessingStage('idle')}
          className="flex-1 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200"
        >
          Novi raÄun
        </motion.button>
        <motion.button
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          className="flex-1 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 flex items-center justify-center gap-2"
        >
          <Download className="h-4 w-4" />
          Izvezi Excel
        </motion.button>
      </div>
    </motion.div>
  );

  const TaskCreatedView = () => (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      className="bg-white rounded-2xl p-8 shadow-lg ring-1 ring-slate-200 text-center"
    >
      <motion.div
        initial={{ scale: 0 }}
        animate={{ scale: 1 }}
        transition={{ type: "spring", duration: 0.5 }}
        className="w-20 h-20 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4"
      >
        <AlertTriangle className="h-10 w-10 text-orange-600" />
      </motion.div>
      
      <h3 className="text-2xl font-bold mb-2">Zadatak stvoren</h3>
      <p className="text-gray-600 mb-6">RaÄun zahtijeva ruÄni pregled prije finalizacije</p>
      
      <div className="bg-orange-50 border border-orange-200 rounded-lg p-4 mb-6">
        <p className="text-sm text-orange-800 font-medium mb-2">Nedostaju sljedeÄ‡i podaci:</p>
        <ul className="text-sm text-orange-700 space-y-1">
          <li>â€¢ OIB dobavljaÄa</li>
          <li>â€¢ Mapiranje materijala (1 artikl)</li>
        </ul>
      </div>
      
      <motion.button
        whileHover={{ scale: 1.02 }}
        whileTap={{ scale: 0.98 }}
        onClick={() => setProcessingStage('idle')}
        className="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
      >
        Novi unos
      </motion.button>
    </motion.div>
  );

  return (
    <div className="max-w-4xl mx-auto">
      {/* Processing Pipeline */}
      {processingStage !== 'idle' && processingStage !== 'completed' && processingStage !== 'task-created' && (
        <div className="flex justify-between mb-8 bg-white rounded-xl p-4 shadow-sm ring-1 ring-slate-200">
          {[
            { id: 'extracting', label: 'ÄŒitanje', icon: FileText },
            { id: 'analyzing', label: 'AI Analiza', icon: Sparkles },
            { id: 'validating', label: 'Validacija', icon: CheckCircle },
            { id: 'missing-data', label: 'Dopuna', icon: AlertCircle }
          ].map(stage => (
            <ProcessingStageIndicator 
              key={stage.id} 
              stage={stage} 
              currentStage={processingStage} 
            />
          ))}
        </div>
      )}

      {/* Progress Bar */}
      {processingStage !== 'idle' && processingStage !== 'completed' && processingStage !== 'task-created' && (
        <div className="mb-6">
          <div className="h-2 bg-gray-200 rounded-full overflow-hidden">
            <motion.div
              className="h-full bg-gradient-to-r from-blue-500 to-purple-500"
              style={{ width: `${animationProgress}%` }}
            />
          </div>
        </div>
      )}

      {/* Main Content */}
      <AnimatePresence mode="wait">
        {processingStage === 'idle' && <UploadZone key="upload" />}
        {processingStage === 'missing-data' && <MissingDataForm key="missing" />}
        {processingStage === 'completed' && <CompletedView key="completed" />}
        {processingStage === 'task-created' && <TaskCreatedView key="task" />}
        
        {(processingStage === 'extracting' || processingStage === 'analyzing' || processingStage === 'validating') && (
          <motion.div
            key="processing"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="bg-white rounded-2xl p-8 shadow-lg ring-1 ring-slate-200"
          >
            <div className="text-center">
              <div className="relative w-16 h-16 mx-auto mb-4">
                <motion.div
                  className="absolute inset-0 border-4 border-blue-200 rounded-full"
                />
                <motion.div
                  className="absolute inset-0 border-4 border-transparent border-t-blue-500 rounded-full"
                  animate={{ rotate: 360 }}
                  transition={{ 
                    duration: 1.5, 
                    repeat: Infinity, 
                    ease: "linear",
                    repeatDelay: 0
                  }}
                />
              </div>
              <h3 className="text-xl font-bold mb-2">
                {processingStage === 'extracting' && 'ÄŒitanje dokumenta...'}
                {processingStage === 'analyzing' && 'AI analizira sadrÅ¾aj...'}
                {processingStage === 'validating' && 'Validacija podataka...'}
              </h3>
              <p className="text-gray-600">
                {processingStage === 'extracting' && 'Ekstraktiranje teksta iz PDF-a'}
                {processingStage === 'analyzing' && 'Prepoznavanje dobavljaÄa i artikala'}
                {processingStage === 'validating' && 'Provjera u bazi podataka'}
              </p>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

function ReportsPanel() {
  // ----- Invoices sample data -----
  const [range, setRange] = useState("Last 30 days");
  const [invoices, setInvoices] = useState([
    { date: "2025-08-01", supplier: "ACME d.o.o.", currency: "EUR", net: 1000, vat: 250, total: 1250 },
    { date: "2025-08-05", supplier: "Nebula Labs", currency: "EUR", net: 420, vat: 105, total: 525 },
    { date: "2025-08-10", supplier: "ZenTasks LLC", currency: "EUR", net: 860, vat: 215, total: 1075 },
  ]);

  const sums = invoices.reduce(
    (a, r) => ({ net: a.net + r.net, vat: a.vat + r.vat, total: a.total + r.total }),
    { net: 0, vat: 0, total: 0 }
  );

  // ----- Positions snapshot -----
  const [filterStatus, setFilterStatus] = useState("all");
  const [positions, setPositions] = useState([
    {
      id: '1',
      positionNumber: 'POS-2025-001',
      title: 'Main Assembly Unit',
      category: 'Mechanical',
      status: 'active',
      createdDate: '2025-01-15',
      expanded: false,
      subdrawings: [
        {
          id: 'sd1',
          name: 'Housing Assembly.dwg',
          type: 'CAD Drawing',
          currentVersion: 'v3.2',
          locked: false,
          lastModified: '2025-08-10',
          size: '4.2 MB',
          versions: [
            { version: 'v3.2', date: '2025-08-10', author: 'John Smith', changes: 'Updated tolerances', status: 'approved' },
            { version: 'v3.1', date: '2025-08-05', author: 'Jane Doe', changes: 'Added fastener details', status: 'approved' },
            { version: 'v3.0', date: '2025-07-28', author: 'Mike Johnson', changes: 'Major revision', status: 'approved' }
          ]
        },
        {
          id: 'sd2',
          name: 'Electrical Schematic.pdf',
          type: 'Schematic',
          currentVersion: 'v2.1',
          locked: true,
          lastModified: '2025-08-08',
          size: '1.8 MB',
          versions: [
            { version: 'v2.1', date: '2025-08-08', author: 'Sarah Wilson', changes: 'Wire gauge updates', status: 'pending' },
            { version: 'v2.0', date: '2025-07-20', author: 'Tom Brown', changes: 'Circuit redesign', status: 'approved' }
          ]
        }
      ]
    },
    {
      id: '2',
      positionNumber: 'POS-2025-002',
      title: 'Control Panel Interface',
      category: 'Electronics',
      status: 'active',
      createdDate: '2025-02-01',
      expanded: false,
      subdrawings: [
        {
          id: 'sd3',
          name: 'PCB Layout.brd',
          type: 'PCB Design',
          currentVersion: 'v1.5',
          locked: false,
          lastModified: '2025-08-12',
          size: '2.3 MB',
          versions: [
            { version: 'v1.5', date: '2025-08-12', author: 'Alex Chen', changes: 'Routing optimization', status: 'approved' },
            { version: 'v1.4', date: '2025-08-01', author: 'Lisa Park', changes: 'Component placement', status: 'approved' }
          ]
        }
      ]
    },
    {
      id: '3',
      positionNumber: 'POS-2025-003',
      title: 'Hydraulic System',
      category: 'Fluid Power',
      status: 'draft',
      createdDate: '2025-03-10',
      expanded: false,
      subdrawings: [
        {
          id: 'sd4',
          name: 'Hydraulic Circuit.dwg',
          type: 'CAD Drawing',
          currentVersion: 'v0.9',
          locked: false,
          lastModified: '2025-08-14',
          size: '3.1 MB',
          versions: [
            { version: 'v0.9', date: '2025-08-14', author: 'Robert Lee', changes: 'Initial draft', status: 'pending' }
          ]
        }
      ]
    }
  ]);
  const [selectedSubdrawing, setSelectedSubdrawing] = useState(null);
  const [showVersionHistory, setShowVersionHistory] = useState(false);

  const toggleExpanded = (posId) => {
    setPositions(prev => prev.map(pos =>
      pos.id === posId ? { ...pos, expanded: !pos.expanded } : pos
    ));
  };

  const toggleLock = (posId, subId) => {
    setPositions(prev => prev.map(pos =>
      pos.id === posId
        ? {
            ...pos,
            subdrawings: pos.subdrawings.map(sub =>
              sub.id === subId ? { ...sub, locked: !sub.locked } : sub
            )
          }
        : pos
    ));
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'approved': return <CheckCircle className="h-4 w-4 text-green-600" />;
      case 'pending': return <Clock className="h-4 w-4 text-amber-600" />;
      case 'rejected': return <XCircle className="h-4 w-4 text-red-600" />;
      default: return null;
    }
  };

  const getStatusBadge = (status) => {
    
    return colors[status] || 'bg-slate-100 text-slate-600 ring-slate-200';
    };

  const filteredPositions = positions.filter(pos =>
    filterStatus === 'all' || pos.status === filterStatus
  );

  // ----- Report Settings (same as Settings tab) -----
  const [liveTiles, setLiveTiles] = useState(true);
  const [channel, setChannel] = useState("Beta");
  const [date, setDate] = useState("");
  const [scale, setScale] = useState(100);
  const [language, setLanguage] = useState("English");
  const [pageSize, setPageSize] = useState(20);
  const [accent, setAccent] = useState("#2563eb");
  const [hotkey, setHotkey] = useState("Ctrl+I");
  const [capturing, setCapturing] = useState(false);
  const [progress, setProgress] = useState(0);
  const [openAdvanced, setOpenAdvanced] = useState(false);
  const [showToast, setShowToast] = useState(false);

  useEffect(() => {
    function onKey(e) {
      if (!capturing) return;
      e.preventDefault();
      const key = e.key || "";
      const parts = [e.ctrlKey ? "Ctrl" : null, e.altKey ? "Alt" : null, e.shiftKey ? "Shift" : null, key.length === 1 ? key.toUpperCase() : key].filter(Boolean);
      setHotkey(parts.join("+"));
      setCapturing(false);
    }
    window.addEventListener("keydown", onKey);
    return () => window.removeEventListener("keydown", onKey);
  }, [capturing]);

  useEffect(() => {
    if (progress <= 0 || progress >= 100) return;
    const t = setTimeout(() => setProgress((p) => Math.min(100, p + 6)), 120);
    return () => clearTimeout(t);
  }, [progress]);

  return (
    <div className="max-w-7xl mx-auto">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold tracking-tight flex items-center gap-2">
            <BarChart3 className="h-6 w-6" /> Reports
          </h1>
          <p className="mt-1 text-sm opacity-80">KPIs, invoice rollups, positions & version control snapshot, and report-level settings.</p>
        </div>
        <div className="flex gap-2">
          <select
            value={range}
            onChange={(e) => setRange(e.target.value)}
            className="rounded-xl bg-slate-50 ring-1 ring-slate-200 px-3 py-2 text-sm"
          >
            {["Last 7 days", "Last 30 days", "Quarter to date", "Year to date"].map((r) => (
              <option key={r}>{r}</option>
            ))}
          </select>
          <button className="px-3 py-2 rounded-xl bg-slate-100 ring-1 ring-slate-200 text-sm flex items-center gap-2">
            <Download className="h-4 w-4" /> Export CSV
          </button>
        </div>
      </div>

      {/* KPI cards */}
      <div className="mt-6 grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-4">
        <div className="rounded-2xl ring-1 ring-slate-200 bg-white p-4">
          <div className="text-xs opacity-70">Invoices</div>
          <div className="text-2xl font-semibold">{invoices.length}</div>
        </div>
        <div className="rounded-2xl ring-1 ring-slate-200 bg-white p-4">
          <div className="text-xs opacity-70">Net</div>
          <div className="text-2xl font-semibold">{sums.net.toFixed(2)} EUR</div>
        </div>
        <div className="rounded-2xl ring-1 ring-slate-200 bg-white p-4">
          <div className="text-xs opacity-70">VAT</div>
          <div className="text-2xl font-semibold text-amber-600">{sums.vat.toFixed(2)} EUR</div>
        </div>
        <div className="rounded-2xl ring-1 ring-slate-200 bg-white p-4">
          <div className="text-xs opacity-70">Total</div>
          <div className="text-2xl font-semibold">{sums.total.toFixed(2)} EUR</div>
        </div>
      </div>

      {/* Main content */}
      <div className="mt-6 grid grid-cols-1 xl:grid-cols-3 gap-6">
        {/* Left 2 cols */}
        <div className="xl:col-span-2 space-y-6">
          {/* Invoice summary */}
          <div className="rounded-2xl ring-1 ring-slate-200 bg-white p-4">
            <div className="flex items-center justify-between mb-3">
              <h3 className="font-semibold">Invoice Summary</h3>
              <div className="text-xs px-2 py-1 rounded-lg bg-slate-100 ring-1 ring-slate-200">{range}</div>
            </div>
            <div className="grid grid-cols-6 text-xs font-medium opacity-70 px-3">
              <div>Date</div><div className="col-span-2">Supplier</div><div className="text-right">Net</div><div className="text-right">VAT</div><div className="text-right">Total</div>
            </div>
            <div className="mt-2 space-y-2">
              {invoices.map((r, i) => (
                <div key={i} className="grid grid-cols-6 gap-2 text-sm rounded-xl ring-1 ring-slate-200 bg-slate-50 px-3 py-2">
                  <div>{r.date}</div>
                  <div className="col-span-2 truncate">{r.supplier}</div>
                  <div className="text-right">{r.net.toFixed(2)} {r.currency}</div>
                  <div className="text-right">{r.vat.toFixed(2)} {r.currency}</div>
                  <div className="text-right font-medium">{r.total.toFixed(2)} {r.currency}</div>
                </div>
              ))}
            </div>
            <div className="mt-3 grid grid-cols-6 gap-2 px-3 py-2 text-sm">
              <div className="col-span-3 text-right font-medium">Totals:</div>
              <div className="text-right font-medium">{sums.net.toFixed(2)} EUR</div>
              <div className="text-right font-medium">{sums.vat.toFixed(2)} EUR</div>
              <div className="text-right font-semibold">{sums.total.toFixed(2)} EUR</div>
            </div>
          </div>

          {/* Positions snapshot */}
          <div className="rounded-2xl ring-1 ring-slate-200 bg-white p-4">
            <div className="flex items-center justify-between mb-4">
              <div>
                <h3 className="font-semibold">Positions & Drawings (Snapshot)</h3>
                <p className="text-sm opacity-70">Quick manage from within Reports</p>
              </div>
              <div className="flex items-center gap-2 text-sm">
                <span className="opacity-70">Filter:</span>
                {['all', 'active', 'draft', 'archived'].map(status => (
                  <button
                    key={status}
                    onClick={() => setFilterStatus(status)}
                    className={`px-3 py-1 rounded-lg text-sm capitalize transition-colors ${
                      filterStatus === status 
                        ? 'bg-slate-900 text-white' 
                        : 'bg-slate-100 ring-1 ring-slate-200 hover:bg-slate-200'
                    }`}
                  >
                    {status}
                  </button>
                ))}
              </div>
            </div>

            <div className="space-y-3">
              {filteredPositions.map(position => (
                <motion.div key={position.id} layout className="rounded-2xl ring-1 ring-slate-200 overflow-hidden">
                  {/* Header */}
                  <div className="p-3 bg-white cursor-pointer hover:bg-slate-50 transition-colors" onClick={() => toggleExpanded(position.id)}>
                    <div className="flex items-start justify-between">
                      <div className="flex items-start gap-3">
                        <motion.div
                          animate={{ rotate: position.expanded ? 90 : 0 }}
                          transition={{ type: "spring", stiffness: 300, damping: 25 }}
                        >
                          <ChevronRight className="h-5 w-5 mt-0.5 text-slate-400" />
                        </motion.div>
                        <div>
                          <div className="flex items-center gap-3">
                            <h4 className="font-semibold">{position.positionNumber}</h4>
                            <span className={`text-xs px-2 py-0.5 rounded-full ring-1 ${getStatusBadge(position.status)}`}>{position.status}</span>
                          </div>
                          <p className="text-sm text-slate-600">{position.title}</p>
                        </div>
                      </div>
                      <div className="text-xs text-slate-500 flex items-center gap-3">
                        <span className="flex items-center gap-1"><FolderOpen className="h-3 w-3" />{position.category}</span>
                        <span className="flex items-center gap-1"><FileText className="h-3 w-3" />{position.subdrawings.length} drawings</span>
                        <span className="flex items-center gap-1"><Clock className="h-3 w-3" />{position.createdDate}</span>
                      </div>
                    </div>
                  </div>

                  {/* Subdrawings */}
                  <AnimatePresence>
                    {position.expanded && (
                      <motion.div
                        initial={{ height: 0, opacity: 0 }}
                        animate={{ height: "auto", opacity: 1 }}
                        exit={{ height: 0, opacity: 0 }}
                        transition={{ duration: 0.3 }}
                        className="border-t border-slate-200 bg-white"
                      >
                        <div className="p-3 space-y-2">
                          {position.subdrawings.map(subdrawing => (
                            <motion.div
                              key={subdrawing.id}
                              whileHover={{ scale: 1.01 }}
                              className="rounded-xl ring-1 ring-slate-200 bg-slate-50 p-3 cursor-pointer"
                              onClick={() => { setSelectedSubdrawing(subdrawing); setShowVersionHistory(true); }}
                            >
                              <div className="flex items-center justify-between">
                                <div className="flex items-center gap-3">
                                  <div className="p-2 rounded-lg bg-white ring-1 ring-slate-200">
                                    <FileText className="h-4 w-4 text-slate-600" />
                                  </div>
                                  <div>
                                    <div className="flex items-center gap-2">
                                      <p className="font-medium text-sm">{subdrawing.name}</p>
                                      {subdrawing.locked && <Lock className="h-3 w-3 text-amber-600" />}
                                    </div>
                                    <div className="flex items-center gap-3 text-xs text-slate-500 mt-1">
                                      <span>{subdrawing.type}</span><span>â€¢</span>
                                      <span>{subdrawing.currentVersion}</span><span>â€¢</span>
                                      <span>{subdrawing.size}</span><span>â€¢</span>
                                      <span>{subdrawing.lastModified}</span>
                                    </div>
                                  </div>
                                </div>
                                <div className="flex items-center gap-2">
                                  <button
                                    className="p-1.5 rounded-lg hover:bg-white transition-colors"
                                    onClick={(e) => { e.stopPropagation(); toggleLock(position.id, subdrawing.id); }}
                                  >
                                    {subdrawing.locked ? <Unlock className="h-4 w-4" /> : <Lock className="h-4 w-4" />}
                                  </button>
                                  <button className="p-1.5 rounded-lg hover:bg-white transition-colors"><Download className="h-4 w-4" /></button>
                                  <button className="p-1.5 rounded-lg hover:bg-white transition-colors"><Eye className="h-4 w-4" /></button>
                                </div>
                              </div>
                            </motion.div>
                          ))}
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </motion.div>
              ))}
            </div>

            {/* Snapshot stats */}
            <div className="mt-4 grid grid-cols-2 md:grid-cols-4 gap-3">
              <div className="rounded-xl ring-1 ring-slate-200 bg-slate-50 px-3 py-2">
                <div className="text-xs opacity-70">Total Positions</div>
                <div className="font-medium">{positions.length}</div>
              </div>
              <div className="rounded-xl ring-1 ring-slate-200 bg-slate-50 px-3 py-2">
                <div className="text-xs opacity-70">Drawings</div>
                <div className="font-medium">{positions.reduce((a, p) => a + p.subdrawings.length, 0)}</div>
              </div>
              <div className="rounded-xl ring-1 ring-slate-200 bg-slate-50 px-3 py-2">
                <div className="text-xs opacity-70">Locked</div>
                <div className="font-medium text-amber-600">{positions.reduce((a, p) => a + p.subdrawings.filter(s => s.locked).length, 0)}</div>
              </div>
              <div className="rounded-xl ring-1 ring-slate-200 bg-slate-50 px-3 py-2">
                <div className="text-xs opacity-70">Pending</div>
                <div className="font-medium text-amber-600">
                  {positions.reduce((acc, pos) => acc + pos.subdrawings.reduce((subAcc, sub) => subAcc + sub.versions.filter(v => v.status === 'pending').length, 0), 0)}
                </div>
              </div>
            </div>
          </div>

          {/* Version history panel */}
          {showVersionHistory && selectedSubdrawing && (
            <motion.div
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              className="rounded-2xl ring-1 ring-slate-200 bg-white p-4"
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="font-semibold flex items-center gap-2">
                  <GitBranch className="h-4 w-4" />
                  Version History
                </h3>
                <button onClick={() => setShowVersionHistory(false)} className="p-1 rounded-lg hover:bg-slate-100">
                  <XCircle className="h-4 w-4" />
                </button>
              </div>
              <div className="mb-4 p-3 rounded-xl bg-slate-50 ring-1 ring-slate-200">
                <p className="font-medium text-sm">{selectedSubdrawing.name}</p>
                <p className="text-xs text-slate-600 mt-1">Current: {selectedSubdrawing.currentVersion}</p>
              </div>
              <div className="space-y-3">
                {selectedSubdrawing.versions.map((v, idx) => (
                  <div key={v.version} className={`relative pl-6 pb-3 ${idx < selectedSubdrawing.versions.length - 1 ? 'border-l-2 border-slate-200 ml-2' : ''}`}>
                    <div className="absolute -left-[7px] top-0 w-4 h-4 rounded-full bg-white ring-2 ring-slate-300" />
                    <div className="rounded-xl ring-1 ring-slate-200 bg-white p-3">
                      <div className="flex items-start justify-between">
                        <div>
                          <div className="flex items-center gap-2">
                            <span className="font-medium text-sm">{v.version}</span>
                            {getStatusIcon(v.status)}
                          </div>
                          <p className="text-xs text-slate-600 mt-1">{v.changes}</p>
                          <div className="flex items-center gap-3 mt-2 text-xs text-slate-500">
                            <span className="flex items-center gap-1"><Users className="h-3 w-3" />{v.author}</span>
                            <span>{v.date}</span>
                          </div>
                        </div>
                        <button className="p-1.5 rounded-lg hover:bg-slate-100"><RefreshCw className="h-3 w-3" /></button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              <div className="mt-4 grid grid-cols-2 gap-2">
                <button className="px-3 py-2 rounded-xl bg-slate-900 text-white text-sm flex items-center justify-center gap-2"><Save className="h-4 w-4" /> New Version</button>
                <button className="px-3 py-2 rounded-xl ring-1 ring-slate-200 text-sm flex items-center justify-center gap-2"><History className="h-4 w-4" /> Compare</button>
              </div>
            </motion.div>
          )}
        </div>

        {/* Right col: Report-level Settings */}
        <div className="space-y-4">
          <div className="rounded-2xl ring-1 ring-slate-200 bg-white p-4">
            <h3 className="font-semibold mb-3">Report Settings</h3>

            <div className="grid gap-4">
              <div className="flex items-center justify-between rounded-xl ring-1 ring-slate-200 bg-slate-50 p-3">
                <div>
                  <div className="font-medium text-sm">Live tiles</div>
                  <div className="text-xs opacity-70">Show live previews on tiles</div>
                </div>
                <ToggleSwitch value={liveTiles} onChange={setLiveTiles} />
              </div>

              <div>
                <div className="mb-2 text-sm font-medium">Update channel</div>
                <SegmentedControl options={["Stable","Beta","Dev"]} value={channel} onChange={setChannel} />
              </div>

              <div>
                <div className="mb-2 text-sm font-medium">Default VAT start date</div>
                <input type="date" value={date} onChange={(e)=>setDate(e.target.value)} className="w-full rounded-xl bg-slate-50 ring-1 ring-slate-200 px-3 py-2 focus:ring-2 focus:ring-slate-300"/>
              </div>

              <div>
                <div className="flex items-center justify-between mb-2">
                  <div className="text-sm font-medium">UI scale</div>
                  <div className="text-xs opacity-70">{scale}%</div>
                </div>
                <input type="range" min={75} max={150} value={scale} onChange={(e)=>setScale(parseInt(e.target.value))} className="w-full"/>
              </div>

              <div>
                <div className="mb-2 text-sm font-medium">Language</div>
                <select value={language} onChange={(e)=>setLanguage(e.target.value)} className="w-full rounded-xl bg-slate-50 ring-1 ring-slate-200 px-3 py-2">
                  {['English','Deutsch','Hrvatski','EspaÃ±ol','FranÃ§ais'].map((l)=> <option key={l}>{l}</option>)}
                </select>
              </div>

              <div>
                <div className="mb-2 text-sm font-medium">Accent color</div>
                <div className="flex items-center gap-3">
                  <input type="color" value={accent} onChange={(e)=>setAccent(e.target.value)} className="h-10 w-14 rounded"/>
                  <div className="text-xs opacity-70">{accent}</div>
                </div>
              </div>

              <div>
                <div className="mb-2 text-sm font-medium">Items per page</div>
                <div className="flex items-center gap-2">
                  <button className="p-2 rounded-lg bg-slate-100 ring-1 ring-slate-200" onClick={()=>setPageSize((n)=>Math.max(5,n-5))}><Minus className="h-4 w-4"/></button>
                  <input type="number" value={pageSize} onChange={(e)=>setPageSize(parseInt(e.target.value)||0)} className="w-20 text-center rounded-xl bg-slate-50 ring-1 ring-slate-200 px-3 py-2"/>
                  <button className="p-2 rounded-lg bg-slate-100 ring-1 ring-slate-200" onClick={()=>setPageSize((n)=>n+5)}><Plus className="h-4 w-4"/></button>
                </div>
              </div>

              <div>
                <div className="mb-2 text-sm font-medium">Smart Ingest hotkey</div>
                <div className="flex items-center gap-2">
                  <div className="px-3 py-2 rounded-xl bg-slate-50 ring-1 ring-slate-200 text-sm">{hotkey}</div>
                  <button className="px-3 py-2 rounded-xl bg-white ring-1 ring-slate-200 hover:bg-slate-100" onClick={()=>setCapturing(true)}>{capturing ? "Press any key..." : "Assign"}</button>
                </div>
              </div>

              <div className="flex items-center justify-between rounded-2xl ring-1 ring-slate-200 bg-white p-4">
                <div>
                  <div className="font-medium text-sm">Background sync</div>
                  <div className="text-xs opacity-70">{progress >= 100 ? "Completed" : progress > 0 ? `${progress}%` : "Idle"}</div>
                </div>
                <div className="flex items-center gap-3">
                  <div className="h-12 w-12 rounded-full grid place-items-center" style={{ background: `conic-gradient(${accent} ${progress*3.6}deg, #e5e7eb 0deg)` }}>
                    <div className="h-8 w-8 rounded-full bg-white"/>
                  </div>
                  {progress === 0 ? (
                    <button className="px-3 py-2 rounded-xl bg-slate-900 text-white" onClick={()=>setProgress(6)}>Start</button>
                  ) : progress < 100 ? (
                    <button className="px-3 py-2 rounded-xl bg-slate-100 ring-1 ring-slate-200" onClick={()=>setProgress(0)}>Cancel</button>
                  ) : (
                    <button className="px-3 py-2 rounded-xl bg-slate-100 ring-1 ring-slate-200" onClick={()=>setProgress(0)}>Reset</button>
                  )}
                </div>
              </div>

              <div>
                <div className="mb-2 text-sm font-medium">Notifications</div>
                <button
                  className="px-3 py-2 rounded-xl bg-slate-900 text-white flex items-center gap-2"
                  onClick={()=>{setShowToast(true); setTimeout(()=>setShowToast(false), 2500);}}
                >
                  <Bell className="h-4 w-4"/> Send test toast
                </button>
              </div>
            </div>
          </div>

          <AnimatePresence>
            {showToast && (
              <motion.div initial={{opacity:0, y:10}} animate={{opacity:1, y:0}} exit={{opacity:0, y:10}} className="fixed bottom-6 right-6 z-[60]">
                <div className="rounded-xl bg-slate-900 text-white shadow-lg px-4 py-3">Settings saved successfully</div>
              </motion.div>
            )}
          </AnimatePresence>

          {/* Recent activity */}
          <div className="rounded-2xl ring-1 ring-slate-200 bg-white p-4">
            <h3 className="font-semibold mb-3">Audit / Recent Activity</h3>
            <div className="space-y-2 text-sm">
              {[
                { t: "CSV export", d: "Prepared invoice summary", ago: "2m ago", icon: History, color: "text-slate-600" },
                { t: "Version approved", d: "Housing Assembly.dwg", ago: "2h ago", icon: CheckCircle, color: "text-green-600" },
                { t: "File locked", d: "Electrical Schematic.pdf", ago: "4h ago", icon: Lock, color: "text-amber-600" },
              ].map((a, i) => (
                <div key={i} className="flex items-start gap-3 rounded-xl bg-slate-50 ring-1 ring-slate-200 px-3 py-2">
                  <a.icon className={`h-4 w-4 mt-0.5 ${a.color}`} />
                  <div className="flex-1 min-w-0">
                    <div className="font-medium">{a.t}</div>
                    <div className="opacity-70">{a.d} â€¢ {a.ago}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>

        </div>
      </div>
    </div>
  );
}

const ProductionTimelineTab = () => {
  const [currentView, setCurrentView] = useState('week'); // day, week, month
  const [selectedPosition, setSelectedPosition] = useState(null);
  const [showAddModal, setShowAddModal] = useState(false);
  const [draggedItem, setDraggedItem] = useState(null);
  const [currentDate, setCurrentDate] = useState(new Date());
  const [productionCapacity, setProductionCapacity] = useState(75);
  const containerRef = useRef(null);

  // Production positions (rows in timeline)
  const [positions] = useState([
    { id: 'POS-001', name: 'Vrata A-01', material: 'ALU-2100', status: 'active' },
    { id: 'POS-002', name: 'Prozor B-01', material: 'ALU-1500', status: 'active' },
    { id: 'POS-003', name: 'Fasada C-01', material: 'ALU-4000', status: 'pending' },
    { id: 'POS-004', name: 'Vrata D-01', material: 'ALU-2100', status: 'active' },
    { id: 'POS-005', name: 'Prozor E-01', material: 'ALU-1200', status: 'completed' },
  ]);

  // Production tasks (items on timeline)
  const [productions, setProductions] = useState([
    {
      id: 1,
      positionId: 'POS-001',
      type: 'cutting',
      name: 'Rezanje profila',
      start: 0,
      duration: 2,
      progress: 60,
      materialStatus: 'received',
      priority: 'high'
    },
    {
      id: 2,
      positionId: 'POS-001',
      type: 'assembly',
      name: 'MontaÅ¾a',
      start: 2,
      duration: 3,
      progress: 30,
      materialStatus: 'ordered',
      priority: 'medium'
    },
    {
      id: 3,
      positionId: 'POS-002',
      type: 'cutting',
      name: 'Rezanje stakla',
      start: 1,
      duration: 2,
      progress: 80,
      materialStatus: 'received',
      priority: 'high'
    },
    {
      id: 4,
      positionId: 'POS-003',
      type: 'finishing',
      name: 'ZavrÅ¡na obrada',
      start: 3,
      duration: 4,
      progress: 0,
      materialStatus: 'pending',
      priority: 'low'
    },
    {
      id: 5,
      positionId: 'POS-004',
      type: 'packaging',
      name: 'Pakiranje',
      start: 5,
      duration: 1,
      progress: 0,
      materialStatus: 'ordered',
      priority: 'medium'
    }
  ]);

  // Get date range based on view
  const getDateRange = () => {
    const dates = [];
    const daysCount = currentView === 'day' ? 7 : currentView === 'week' ? 28 : 30;
    
    for (let i = 0; i < daysCount; i++) {
      const date = new Date(currentDate);
      date.setDate(date.getDate() + i);
      dates.push(date);
    }
    return dates;
  };

  // Get color for production type
  const getTypeColor = (type) => {
    const colors = {
      cutting: '#10b981',    // green
      assembly: '#8b5cf6',   // purple
      finishing: '#f59e0b',  // orange
      packaging: '#3b82f6'   // blue
    };
    return colors[type] || '#6b7280';
  };

  // Get material status icon and color
  const getMaterialStatus = (status) => {
    const statuses = {
      received: { icon: CheckCircle, color: '#10b981' },
      ordered: { icon: Package, color: '#3b82f6' },
      pending: { icon: AlertCircle, color: '#f59e0b' }
    };
    return statuses[status] || { icon: AlertCircle, color: '#6b7280' };
  };

  // Handle drag and drop
  const handleDragStart = (e, production) => {
    setDraggedItem(production);
  };

  const handleDragOver = (e) => {
    e.preventDefault();
  };

  const handleDrop = (e, newStart, positionId) => {
    e.preventDefault();
    if (draggedItem) {
      const updatedProductions = productions.map(p => 
        p.id === draggedItem.id 
          ? { ...p, start: newStart, positionId: positionId }
          : p
      );
      setProductions(updatedProductions);
      setDraggedItem(null);
    }
  };

  // Calculate capacity based on productions
  useEffect(() => {
    const totalHours = productions.reduce((acc, p) => acc + p.duration, 0);
    const capacity = Math.min(100, (totalHours / 40) * 100);
    setProductionCapacity(capacity);
  }, [productions]);

  // Add new production
  const handleAddProduction = (data) => {
    const newProduction = {
      id: productions.length + 1,
      ...data,
      progress: 0,
      materialStatus: 'pending'
    };
    setProductions([...productions, newProduction]);
    setShowAddModal(false);
  };

  // Delete production
  const handleDeleteProduction = (id) => {
    setProductions(productions.filter(p => p.id !== id));
  };

  return (
    <div style={{ maxWidth: '100%', margin: '0 auto' }}>
      {/* Header */}
      <div style={{ 
        backgroundColor: 'white',
        borderRadius: '12px',
        padding: '20px',
        marginBottom: '20px',
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
      }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <div>
            <h2 style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '8px' }}>
              Production Timeline
            </h2>
            <p style={{ color: '#6b7280', fontSize: '14px' }}>
              ClickUp-style production planning and scheduling
            </p>
          </div>
          
          {/* View Controls */}
          <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>
            <div style={{ display: 'flex', gap: '4px', backgroundColor: '#f3f4f6', padding: '4px', borderRadius: '8px' }}>
              {['day', 'week', 'month'].map(view => (
                <button
                  key={view}
                  onClick={() => setCurrentView(view)}
                  style={{
                    padding: '6px 12px',
                    borderRadius: '6px',
                    border: 'none',
                    backgroundColor: currentView === view ? 'white' : 'transparent',
                    color: currentView === view ? '#3b82f6' : '#6b7280',
                    fontWeight: currentView === view ? '600' : '400',
                    cursor: 'pointer',
                    transition: 'all 0.2s',
                    textTransform: 'capitalize'
                  }}
                >
                  {view}
                </button>
              ))}
            </div>

            {/* Navigation */}
            <div style={{ display: 'flex', gap: '4px', alignItems: 'center' }}>
              <button 
                onClick={() => {
                  const newDate = new Date(currentDate);
                  newDate.setDate(newDate.getDate() - 1);
                  setCurrentDate(newDate);
                }}
                style={{
                  padding: '6px',
                  backgroundColor: '#f3f4f6',
                  border: 'none',
                  borderRadius: '6px',
                  cursor: 'pointer'
                }}
              >
                <ChevronLeft size={16} />
              </button>
              <span style={{ padding: '0 10px', fontSize: '14px', fontWeight: '500' }}>
                {currentDate.toLocaleDateString()}
              </span>
              <button
                onClick={() => {
                  const newDate = new Date(currentDate);
                  newDate.setDate(newDate.getDate() + 1);
                  setCurrentDate(newDate);
                }}
                style={{
                  padding: '6px',
                  backgroundColor: '#f3f4f6',
                  border: 'none',
                  borderRadius: '6px',
                  cursor: 'pointer'
                }}
              >
                <ChevronRight size={16} />
              </button>
            </div>

            {/* Action Buttons */}
            <button
              onClick={() => setShowAddModal(true)}
              style={{
                padding: '8px 16px',
                backgroundColor: '#3b82f6',
                color: 'white',
                border: 'none',
                borderRadius: '8px',
                display: 'flex',
                alignItems: 'center',
                gap: '6px',
                cursor: 'pointer'
              }}
            >
              <Plus size={16} />
              Add Production
            </button>
          </div>
        </div>

        {/* Capacity Bar */}
        <div style={{ marginTop: '16px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '4px' }}>
            <span style={{ fontSize: '12px', color: '#6b7280' }}>Production Capacity</span>
            <span style={{ fontSize: '12px', fontWeight: '600' }}>
              {productionCapacity.toFixed(0)}%
            </span>
          </div>
          <div style={{ 
            height: '8px',
            backgroundColor: '#e5e7eb',
            borderRadius: '4px',
            overflow: 'hidden'
          }}>
            <motion.div
              style={{
                height: '100%',
                backgroundColor: productionCapacity > 90 ? '#ef4444' : 
                                productionCapacity > 75 ? '#f59e0b' : '#10b981',
                borderRadius: '4px'
              }}
              initial={{ width: 0 }}
              animate={{ width: `${productionCapacity}%` }}
              transition={{ duration: 0.5 }}
            />
          </div>
        </div>
      </div>

      {/* Timeline */}
      <div style={{
        backgroundColor: 'white',
        borderRadius: '12px',
        padding: '20px',
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
        overflowX: 'auto'
      }}>
        {/* Timeline Header */}
        <div style={{ display: 'flex', borderBottom: '2px solid #e5e7eb', paddingBottom: '10px' }}>
          <div style={{ width: '200px', fontWeight: '600', fontSize: '14px', color: '#374151' }}>
            Position / Material
          </div>
          <div style={{ flex: 1, display: 'flex' }}>
            {getDateRange().map((date, index) => (
              <div 
                key={index}
                style={{
                  flex: 1,
                  minWidth: '40px',
                  textAlign: 'center',
                  fontSize: '12px',
                  color: '#6b7280',
                  borderLeft: index === 0 ? 'none' : '1px solid #e5e7eb',
                  paddingLeft: '4px'
                }}
              >
                {currentView === 'day' ? 
                  date.toLocaleDateString('hr', { weekday: 'short' }) :
                  date.getDate()
                }
              </div>
            ))}
          </div>
        </div>

        {/* Timeline Rows */}
        {positions.map(position => {
          const positionProductions = productions.filter(p => p.positionId === position.id);
          
          return (
            <div 
              key={position.id}
              style={{
                display: 'flex',
                borderBottom: '1px solid #e5e7eb',
                minHeight: '80px',
                position: 'relative'
              }}
            >
              {/* Position Info */}
              <div style={{
                width: '200px',
                padding: '10px',
                backgroundColor: '#f9fafb',
                borderRight: '1px solid #e5e7eb'
              }}>
                <div style={{ fontWeight: '600', fontSize: '14px', marginBottom: '4px' }}>
                  {position.name}
                </div>
                <div style={{ fontSize: '12px', color: '#6b7280', marginBottom: '4px' }}>
                  {position.material}
                </div>
                <span style={{
                  display: 'inline-block',
                  padding: '2px 8px',
                  borderRadius: '12px',
                  fontSize: '10px',
                  fontWeight: '500',
                  backgroundColor: position.status === 'active' ? '#dcfce7' : 
                                  position.status === 'completed' ? '#dbeafe' : '#fef3c7',
                  color: position.status === 'active' ? '#166534' : 
                         position.status === 'completed' ? '#1e40af' : '#92400e'
                }}>
                  {position.status}
                </span>
              </div>

              {/* Timeline Grid */}
              <div 
                style={{
                  flex: 1,
                  position: 'relative',
                  display: 'flex'
                }}
                onDragOver={handleDragOver}
              >
                {/* Grid Lines */}
                {getDateRange().map((_, index) => (
                  <div
                    key={index}
                    style={{
                      flex: 1,
                      borderLeft: index === 0 ? 'none' : '1px solid #f3f4f6',
                      minWidth: '40px'
                    }}
                    onDrop={(e) => handleDrop(e, index, position.id)}
                  />
                ))}

                {/* Production Blocks */}
                {positionProductions.map((production, pIndex) => {
                  const StatusIcon = getMaterialStatus(production.materialStatus).icon;
                  const statusColor = getMaterialStatus(production.materialStatus).color;
                  const typeColor = getTypeColor(production.type);
                  const blockWidth = (production.duration / getDateRange().length) * 100;
                  const blockLeft = (production.start / getDateRange().length) * 100;

                  return (
                    <motion.div
                      key={production.id}
                      draggable
                      onDragStart={(e) => handleDragStart(e, production)}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: pIndex * 0.1 }}
                      style={{
                        position: 'absolute',
                        top: `${10 + (pIndex * 35)}px`,
                        left: `${blockLeft}%`,
                        width: `${blockWidth}%`,
                        height: '30px',
                        backgroundColor: typeColor,
                        borderRadius: '6px',
                        padding: '4px 8px',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'space-between',
                        cursor: 'move',
                        boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
                        border: `2px solid ${typeColor}`,
                        opacity: 0.9,
                        transition: 'all 0.2s',
                        minWidth: '80px',
                        zIndex: draggedItem?.id === production.id ? 1000 : pIndex
                      }}
                      whileHover={{ 
                        scale: 1.02,
                        opacity: 1,
                        boxShadow: '0 4px 8px rgba(0,0,0,0.2)'
                      }}
                      onClick={() => setSelectedPosition(production)}
                    >
                      <div style={{ 
                        display: 'flex', 
                        alignItems: 'center', 
                        gap: '4px',
                        overflow: 'hidden'
                      }}>
                        <StatusIcon size={14} color={statusColor} />
                        <span style={{ 
                          fontSize: '11px', 
                          fontWeight: '600',
                          color: 'white',
                          whiteSpace: 'nowrap',
                          overflow: 'hidden',
                          textOverflow: 'ellipsis'
                        }}>
                          {production.name}
                        </span>
                      </div>
                      
                      {/* Progress indicator */}
                      {production.progress > 0 && (
                        <div style={{
                          position: 'absolute',
                          bottom: 0,
                          left: 0,
                          right: 0,
                          height: '3px',
                          backgroundColor: 'rgba(255,255,255,0.3)',
                          borderRadius: '0 0 4px 4px'
                        }}>
                          <div style={{
                            width: `${production.progress}%`,
                            height: '100%',
                            backgroundColor: 'white',
                            borderRadius: '0 0 4px 4px'
                          }} />
                        </div>
                      )}
                    </motion.div>
                  );
                })}
              </div>
            </div>
          );
        })}

        {/* Today Indicator */}
        <div style={{
          position: 'absolute',
          top: '60px',
          bottom: '20px',
          left: '200px',
          width: '2px',
          backgroundColor: '#ef4444',
          pointerEvents: 'none',
          zIndex: 100
        }}>
          <div style={{
            position: 'absolute',
            top: '-20px',
            left: '50%',
            transform: 'translateX(-50%)',
            backgroundColor: '#ef4444',
            color: 'white',
            padding: '2px 8px',
            borderRadius: '4px',
            fontSize: '10px',
            fontWeight: '600',
            whiteSpace: 'nowrap'
          }}>
            Today
          </div>
        </div>
      </div>

      {/* Statistics */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(4, 1fr)',
        gap: '20px',
        marginTop: '20px'
      }}>
        {[
          { label: 'Total Productions', value: productions.length, icon: Layers, color: '#3b82f6' },
          { label: 'Active Positions', value: positions.filter(p => p.status === 'active').length, icon: Activity, color: '#10b981' },
          { label: 'Materials Ordered', value: productions.filter(p => p.materialStatus === 'ordered').length, icon: Package, color: '#f59e0b' },
          { label: 'Avg. Progress', value: `${(productions.reduce((acc, p) => acc + p.progress, 0) / productions.length).toFixed(0)}%`, icon: TrendingUp, color: '#8b5cf6' }
        ].map((stat, index) => {
          const Icon = stat.icon;
          return (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
              style={{
                backgroundColor: 'white',
                borderRadius: '12px',
                padding: '20px',
                boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
              }}
            >
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start' }}>
                <div>
                  <p style={{ fontSize: '12px', color: '#6b7280', marginBottom: '4px' }}>
                    {stat.label}
                  </p>
                  <p style={{ fontSize: '24px', fontWeight: 'bold', color: '#111827' }}>
                    {stat.value}
                  </p>
                </div>
                <div style={{
                  padding: '8px',
                  backgroundColor: stat.color + '20',
                  borderRadius: '8px'
                }}>
                  <Icon size={20} color={stat.color} />
                </div>
              </div>
            </motion.div>
          );
        })}
      </div>

      {/* Add Production Modal */}
      <AnimatePresence>
        {showAddModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            style={{
              position: 'fixed',
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              backgroundColor: 'rgba(0,0,0,0.5)',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              zIndex: 1000
            }}
            onClick={() => setShowAddModal(false)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              onClick={(e) => e.stopPropagation()}
              style={{
                backgroundColor: 'white',
                borderRadius: '12px',
                padding: '24px',
                width: '90%',
                maxWidth: '500px',
                maxHeight: '80vh',
                overflow: 'auto'
              }}
            >
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
                <h3 style={{ fontSize: '20px', fontWeight: 'bold' }}>Add New Production</h3>
                <button
                  onClick={() => setShowAddModal(false)}
                  style={{
                    padding: '4px',
                    backgroundColor: 'transparent',
                    border: 'none',
                    cursor: 'pointer'
                  }}
                >
                  <X size={20} />
                </button>
              </div>

              <form onSubmit={(e) => {
                e.preventDefault();
                const formData = new FormData(e.target);
                handleAddProduction({
                  positionId: formData.get('position'),
                  type: formData.get('type'),
                  name: formData.get('name'),
                  start: parseInt(formData.get('start')),
                  duration: parseInt(formData.get('duration')),
                  priority: formData.get('priority')
                });
              }}>
                <div style={{ marginBottom: '16px' }}>
                  <label style={{ display: 'block', marginBottom: '4px', fontSize: '14px', fontWeight: '500' }}>
                    Position
                  </label>
                  <select 
                    name="position"
                    required
                    style={{
                      width: '100%',
                      padding: '8px',
                      borderRadius: '6px',
                      border: '1px solid #d1d5db'
                    }}
                  >
                    {positions.map(pos => (
                      <option key={pos.id} value={pos.id}>{pos.name}</option>
                    ))}
                  </select>
                </div>

                <div style={{ marginBottom: '16px' }}>
                  <label style={{ display: 'block', marginBottom: '4px', fontSize: '14px', fontWeight: '500' }}>
                    Production Type
                  </label>
                  <select 
                    name="type"
                    required
                    style={{
                      width: '100%',
                      padding: '8px',
                      borderRadius: '6px',
                      border: '1px solid #d1d5db'
                    }}
                  >
                    <option value="cutting">Cutting</option>
                    <option value="assembly">Assembly</option>
                    <option value="finishing">Finishing</option>
                    <option value="packaging">Packaging</option>
                  </select>
                </div>

                <div style={{ marginBottom: '16px' }}>
                  <label style={{ display: 'block', marginBottom: '4px', fontSize: '14px', fontWeight: '500' }}>
                    Name
                  </label>
                  <input
                    type="text"
                    name="name"
                    required
                    style={{
                      width: '100%',
                      padding: '8px',
                      borderRadius: '6px',
                      border: '1px solid #d1d5db'
                    }}
                  />
                </div>

                <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px', marginBottom: '16px' }}>
                  <div>
                    <label style={{ display: 'block', marginBottom: '4px', fontSize: '14px', fontWeight: '500' }}>
                      Start Day
                    </label>
                    <input
                      type="number"
                      name="start"
                      min="0"
                      max="30"
                      required
                      style={{
                        width: '100%',
                        padding: '8px',
                        borderRadius: '6px',
                        border: '1px solid #d1d5db'
                      }}
                    />
                  </div>
                  <div>
                    <label style={{ display: 'block', marginBottom: '4px', fontSize: '14px', fontWeight: '500' }}>
                      Duration (days)
                    </label>
                    <input
                      type="number"
                      name="duration"
                      min="1"
                      max="10"
                      required
                      style={{
                        width: '100%',
                        padding: '8px',
                        borderRadius: '6px',
                        border: '1px solid #d1d5db'
                      }}
                    />
                  </div>
                </div>

                <div style={{ marginBottom: '20px' }}>
                  <label style={{ display: 'block', marginBottom: '4px', fontSize: '14px', fontWeight: '500' }}>
                    Priority
                  </label>
                  <select 
                    name="priority"
                    required
                    style={{
                      width: '100%',
                      padding: '8px',
                      borderRadius: '6px',
                      border: '1px solid #d1d5db'
                    }}
                  >
                    <option value="low">Low</option>
                    <option value="medium">Medium</option>
                    <option value="high">High</option>
                  </select>
                </div>

                <div style={{ display: 'flex', gap: '10px' }}>
                  <button
                    type="submit"
                    style={{
                      flex: 1,
                      padding: '10px',
                      backgroundColor: '#3b82f6',
                      color: 'white',
                      border: 'none',
                      borderRadius: '6px',
                      fontWeight: '500',
                      cursor: 'pointer'
                    }}
                  >
                    Add Production
                  </button>
                  <button
                    type="button"
                    onClick={() => setShowAddModal(false)}
                    style={{
                      flex: 1,
                      padding: '10px',
                      backgroundColor: '#f3f4f6',
                      color: '#374151',
                      border: 'none',
                      borderRadius: '6px',
                      fontWeight: '500',
                      cursor: 'pointer'
                    }}
                  >
                    Cancel
                  </button>
                </div>
              </form>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Selected Production Details */}
      <AnimatePresence>
        {selectedPosition && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 20 }}
            style={{
              position: 'fixed',
              bottom: '20px',
              right: '20px',
              backgroundColor: 'white',
              borderRadius: '12px',
              padding: '20px',
              boxShadow: '0 10px 30px rgba(0,0,0,0.2)',
              width: '350px',
              zIndex: 1000
            }}
          >
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start', marginBottom: '16px' }}>
              <div>
                <h4 style={{ fontSize: '16px', fontWeight: 'bold', marginBottom: '4px' }}>
                  {selectedPosition.name}
                </h4>
                <p style={{ fontSize: '12px', color: '#6b7280' }}>
                  Type: {selectedPosition.type}
                </p>
              </div>
              <button
                onClick={() => setSelectedPosition(null)}
                style={{
                  padding: '4px',
                  backgroundColor: 'transparent',
                  border: 'none',
                  cursor: 'pointer'
                }}
              >
                <X size={16} />
              </button>
            </div>

            <div style={{ marginBottom: '16px' }}>
              <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '4px' }}>
                <span style={{ fontSize: '12px', color: '#6b7280' }}>Progress</span>
                <span style={{ fontSize: '12px', fontWeight: '600' }}>{selectedPosition.progress}%</span>
              </div>
              <div style={{ height: '6px', backgroundColor: '#e5e7eb', borderRadius: '3px' }}>
                <div 
                  style={{
                    width: `${selectedPosition.progress}%`,
                    height: '100%',
                    backgroundColor: '#3b82f6',
                    borderRadius: '3px'
                  }}
                />
              </div>
            </div>

            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '12px', marginBottom: '16px' }}>
              <div>
                <p style={{ fontSize: '11px', color: '#6b7280', marginBottom: '2px' }}>Start</p>
                <p style={{ fontSize: '14px', fontWeight: '500' }}>Day {selectedPosition.start}</p>
              </div>
              <div>
                <p style={{ fontSize: '11px', color: '#6b7280', marginBottom: '2px' }}>Duration</p>
                <p style={{ fontSize: '14px', fontWeight: '500' }}>{selectedPosition.duration} days</p>
              </div>
              <div>
                <p style={{ fontSize: '11px', color: '#6b7280', marginBottom: '2px' }}>Priority</p>
                <p style={{ fontSize: '14px', fontWeight: '500', textTransform: 'capitalize' }}>
                  {selectedPosition.priority}
                </p>
              </div>
              <div>
                <p style={{ fontSize: '11px', color: '#6b7280', marginBottom: '2px' }}>Material</p>
                <p style={{ fontSize: '14px', fontWeight: '500', textTransform: 'capitalize' }}>
                  {selectedPosition.materialStatus}
                </p>
              </div>
            </div>

            <div style={{ display: 'flex', gap: '8px' }}>
              <button
                style={{
                  flex: 1,
                  padding: '8px',
                  backgroundColor: '#3b82f6',
                  color: 'white',
                  border: 'none',
                  borderRadius: '6px',
                  fontSize: '12px',
                  fontWeight: '500',
                  cursor: 'pointer',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  gap: '4px'
                }}
              >
                <Edit3 size={14} />
                Edit
              </button>
              <button
                onClick={() => {
                  handleDeleteProduction(selectedPosition.id);
                  setSelectedPosition(null);
                }}
                style={{
                  flex: 1,
                  padding: '8px',
                  backgroundColor: '#ef4444',
                  color: 'white',
                  border: 'none',
                  borderRadius: '6px',
                  fontSize: '12px',
                  fontWeight: '500',
                  cursor: 'pointer',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  gap: '4px'
                }}
              >
                <Trash2 size={14} />
                Delete
              </button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

const WarehouseManagementTab = () => {
  const [activeScanner, setActiveScanner] = useState(null);
  const [selectedArticle, setSelectedArticle] = useState(null);
  const [filterText, setFilterText] = useState('');
  const [showARView, setShowARView] = useState(false);
  const [activeTab, setActiveTab] = useState('inventory');
  const [scanResult, setScanResult] = useState(null);
  const [isScanning, setIsScanning] = useState(false);

  // Mock data za artikle
  const [articles, setArticles] = useState([
    { id: 'ALU-001', name: 'Aluminijski profil 40x40', location: 'A-12-3', quantity: 245, status: 'available', project: 'Projekt Nova Zgrada' },
    { id: 'ALU-002', name: 'Kutni spojevi L-tip', location: 'B-05-2', quantity: 1250, status: 'available', project: 'Projekt Fasada' },
    { id: 'ALU-003', name: 'Profil 60x60 eloksirani', location: 'A-14-1', quantity: 89, status: 'low', project: 'Projekt Tower' },
    { id: 'ALU-004', name: 'T-spojevi standard', location: 'C-02-4', quantity: 450, status: 'available', project: 'Projekt Marina' },
    { id: 'ALU-005', name: 'ZavrÅ¡ne kape 40mm', location: 'D-08-3', quantity: 15, status: 'critical', project: 'Projekt Nova Zgrada' },
    { id: 'ALU-006', name: 'Vijci M8x20', location: 'E-01-1', quantity: 5000, status: 'available', project: 'OpÄ‡i lager' },
    { id: 'ALU-007', name: 'Brtve EPDM 5m', location: 'F-10-2', quantity: 120, status: 'available', project: 'Projekt Fasada' },
    { id: 'ALU-008', name: 'NosaÄi stakla', location: 'G-15-4', quantity: 34, status: 'low', project: 'Projekt Tower' }
  ]);

  // Mock data za narudÅ¾be
  const [orders, setOrders] = useState([
    { id: 'ORD-001', supplier: 'Alu-Trade d.o.o.', items: 12, status: 'incoming', eta: '2025-08-20', value: 'â‚¬12,500' },
    { id: 'ORD-002', supplier: 'Metal Pro Zagreb', items: 8, status: 'processing', eta: '2025-08-19', value: 'â‚¬8,200' },
    { id: 'ORD-003', supplier: 'Euro Profiles', items: 25, status: 'delivered', eta: '2025-08-18', value: 'â‚¬15,700' },
    { id: 'ORD-004', supplier: 'Tech Metals', items: 5, status: 'incoming', eta: '2025-08-22', value: 'â‚¬4,300' }
  ]);

  // Statistike
  const stats = {
    totalArticles: articles.length,
    activeOrders: orders.filter(o => o.status !== 'delivered').length,
    todayDeliveries: 3,
    criticalItems: articles.filter(a => a.status === 'critical').length,
    lowStock: articles.filter(a => a.status === 'low').length
  };

  // Filtrirani artikli
  const filteredArticles = articles.filter(article => 
    article.name.toLowerCase().includes(filterText.toLowerCase()) ||
    article.id.toLowerCase().includes(filterText.toLowerCase()) ||
    article.project.toLowerCase().includes(filterText.toLowerCase())
  );

  // Simulacija skeniranja
  const handleScan = (type) => {
    setIsScanning(true);
    setActiveScanner(type);
    
    setTimeout(() => {
      setIsScanning(false);
      
      if (type === 'barcode') {
        setScanResult({
          type: 'article',
          data: {
            id: 'ALU-009',
            name: 'Novi skenirani profil',
            quantity: 100,
            location: 'A-NEW-1'
          }
        });
      } else if (type === 'profile') {
        setScanResult({
          type: 'profile',
          data: {
            shape: 'L-profil',
            dimensions: '50x50x5mm',
            material: 'AlMgSi0.5',
            match: '94%'
          }
        });
      }
    }, 2000);
  };

  // Export funkcija
  const handleExport = () => {
    const csvContent = "data:text/csv;charset=utf-8," 
      + "ID,Naziv,Lokacija,KoliÄina,Status,Projekt\n"
      + articles.map(a => `${a.id},${a.name},${a.location},${a.quantity},${a.status},${a.project}`).join("\n");
    
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "skladiste_export.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // Scanner Component
  const ScannerModal = () => (
    <AnimatePresence>
      {activeScanner && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.8)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 1000
          }}
          onClick={() => setActiveScanner(null)}
        >
          <motion.div
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.9, opacity: 0 }}
            onClick={(e) => e.stopPropagation()}
            style={{
              backgroundColor: 'white',
              borderRadius: '16px',
              padding: '32px',
              width: '90%',
              maxWidth: '500px',
              textAlign: 'center'
            }}
          >
            {isScanning ? (
              <div>
                <motion.div
                  animate={{ rotate: 360 }}
                  transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
                  style={{ margin: '0 auto 24px', width: '80px', height: '80px' }}
                >
                  <QrCode size={80} color="#6366f1" />
                </motion.div>
                <h3 style={{ fontSize: '20px', marginBottom: '8px' }}>Skeniram...</h3>
                <p style={{ color: '#6b7280' }}>DrÅ¾ite kameru usmjerenu prema barkodu</p>
              </div>
            ) : scanResult ? (
              <div>
                <CheckCircle size={64} color="#10b981" style={{ margin: '0 auto 16px' }} />
                <h3 style={{ fontSize: '20px', marginBottom: '16px' }}>UspjeÅ¡no skenirano!</h3>
                {scanResult.type === 'article' ? (
                  <div style={{ textAlign: 'left', backgroundColor: '#f9fafb', padding: '16px', borderRadius: '8px' }}>
                    <p><strong>ID:</strong> {scanResult.data.id}</p>
                    <p><strong>Naziv:</strong> {scanResult.data.name}</p>
                    <p><strong>KoliÄina:</strong> {scanResult.data.quantity}</p>
                    <p><strong>Lokacija:</strong> {scanResult.data.location}</p>
                  </div>
                ) : (
                  <div style={{ textAlign: 'left', backgroundColor: '#f9fafb', padding: '16px', borderRadius: '8px' }}>
                    <p><strong>Oblik:</strong> {scanResult.data.shape}</p>
                    <p><strong>Dimenzije:</strong> {scanResult.data.dimensions}</p>
                    <p><strong>Materijal:</strong> {scanResult.data.material}</p>
                    <p><strong>Podudaranje:</strong> {scanResult.data.match}</p>
                  </div>
                )}
                <button
                  onClick={() => {
                    setActiveScanner(null);
                    setScanResult(null);
                  }}
                  style={{
                    marginTop: '16px',
                    padding: '10px 24px',
                    backgroundColor: '#6366f1',
                    color: 'white',
                    border: 'none',
                    borderRadius: '8px',
                    cursor: 'pointer'
                  }}
                >
                  Zatvori
                </button>
              </div>
            ) : (
              <div>
                <h3 style={{ fontSize: '20px', marginBottom: '24px' }}>
                  {activeScanner === 'barcode' && 'ðŸ“· Barcode Skener'}
                  {activeScanner === 'search' && 'ðŸ”Ž PretraÅ¾i Artikl'}
                  {activeScanner === 'profile' && 'ðŸ“ Skener Profila'}
                </h3>
                <button
                  onClick={() => handleScan(activeScanner)}
                  style={{
                    padding: '12px 32px',
                    backgroundColor: '#10b981',
                    color: 'white',
                    border: 'none',
                    borderRadius: '8px',
                    fontSize: '16px',
                    cursor: 'pointer',
                    marginBottom: '16px'
                  }}
                >
                  ZapoÄni Skeniranje
                </button>
                <button
                  onClick={() => setActiveScanner(null)}
                  style={{
                    display: 'block',
                    margin: '0 auto',
                    padding: '8px 16px',
                    backgroundColor: 'transparent',
                    color: '#6b7280',
                    border: 'none',
                    cursor: 'pointer'
                  }}
                >
                  OtkaÅ¾i
                </button>
              </div>
            )}
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );

  // AR View Component
  const ARViewModal = () => (
    <AnimatePresence>
      {showARView && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.95)',
            display: 'flex',
            flexDirection: 'column',
            zIndex: 1000
          }}
        >
          <div style={{
            padding: '20px',
            backgroundColor: 'rgba(255,255,255,0.1)',
            backdropFilter: 'blur(10px)',
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center'
          }}>
            <h2 style={{ color: 'white', fontSize: '20px' }}>ðŸ¥½ AR Pregled SkladiÅ¡ta</h2>
            <button
              onClick={() => setShowARView(false)}
              style={{
                padding: '8px',
                backgroundColor: 'rgba(255,255,255,0.2)',
                border: 'none',
                borderRadius: '8px',
                cursor: 'pointer',
                color: 'white'
              }}
            >
              <X size={24} />
            </button>
          </div>
          
          <div style={{
            flex: 1,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            position: 'relative'
          }}>
            <div style={{
              position: 'relative',
              width: '80%',
              maxWidth: '600px',
              height: '400px',
              backgroundColor: '#1f2937',
              borderRadius: '16px',
              overflow: 'hidden'
            }}>
              {/* Simulated AR view */}
              <div style={{
                position: 'absolute',
                top: '20%',
                left: '10%',
                padding: '8px 12px',
                backgroundColor: 'rgba(16, 185, 129, 0.9)',
                color: 'white',
                borderRadius: '8px',
                fontSize: '12px'
              }}>
                <strong>ALU-001</strong><br/>
                Profil 40x40<br/>
                245 kom
              </div>
              
              <div style={{
                position: 'absolute',
                top: '50%',
                right: '20%',
                padding: '8px 12px',
                backgroundColor: 'rgba(239, 68, 68, 0.9)',
                color: 'white',
                borderRadius: '8px',
                fontSize: '12px'
              }}>
                <strong>ALU-005</strong><br/>
                KritiÄno!<br/>
                15 kom
              </div>
              
              <div style={{
                position: 'absolute',
                bottom: '20%',
                left: '30%',
                padding: '8px 12px',
                backgroundColor: 'rgba(99, 102, 241, 0.9)',
                color: 'white',
                borderRadius: '8px',
                fontSize: '12px'
              }}>
                <strong>ALU-003</strong><br/>
                Profil 60x60<br/>
                89 kom
              </div>
            </div>
          </div>
          
          <div style={{
            padding: '20px',
            backgroundColor: 'rgba(255,255,255,0.1)',
            backdropFilter: 'blur(10px)',
            color: 'white',
            textAlign: 'center'
          }}>
            <p>PomiÄite naoÄale za skeniranje prostora. Artikli Ä‡e biti automatski prepoznati.</p>
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  );

  return (
    <div style={{ minHeight: '100vh', backgroundColor: '#f9fafb' }}>
      {/* Header */}
      <div style={{
        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
        padding: '24px',
        color: 'white'
      }}>
        <h1 style={{ fontSize: '28px', fontWeight: 'bold', marginBottom: '8px' }}>
          ðŸ­ Sustav Upravljanja SkladiÅ¡tem
        </h1>
        <p style={{ opacity: 0.9 }}>
          Napredni sustav s AR podrÅ¡kom i inteligentnim prepoznavanjem
        </p>
      </div>

      {/* Stats Grid */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
        gap: '16px',
        padding: '20px',
        marginTop: '-30px'
      }}>
        <motion.div
          whileHover={{ scale: 1.02 }}
          style={{
            backgroundColor: 'white',
            padding: '20px',
            borderRadius: '12px',
            boxShadow: '0 4px 6px rgba(0,0,0,0.1)'
          }}
        >
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start' }}>
            <div>
              <p style={{ fontSize: '12px', color: '#6b7280', marginBottom: '4px' }}>Ukupno Artikala</p>
              <p style={{ fontSize: '28px', fontWeight: 'bold', color: '#1f2937' }}>{stats.totalArticles}</p>
            </div>
            <Package size={24} color="#6366f1" />
          </div>
        </motion.div>

        <motion.div
          whileHover={{ scale: 1.02 }}
          style={{
            backgroundColor: 'white',
            padding: '20px',
            borderRadius: '12px',
            boxShadow: '0 4px 6px rgba(0,0,0,0.1)'
          }}
        >
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start' }}>
            <div>
              <p style={{ fontSize: '12px', color: '#6b7280', marginBottom: '4px' }}>Aktivne NarudÅ¾be</p>
              <p style={{ fontSize: '28px', fontWeight: 'bold', color: '#1f2937' }}>{stats.activeOrders}</p>
            </div>
            <ShoppingCart size={24} color="#10b981" />
          </div>
        </motion.div>

        <motion.div
          whileHover={{ scale: 1.02 }}
          style={{
            backgroundColor: 'white',
            padding: '20px',
            borderRadius: '12px',
            boxShadow: '0 4px 6px rgba(0,0,0,0.1)'
          }}
        >
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start' }}>
            <div>
              <p style={{ fontSize: '12px', color: '#6b7280', marginBottom: '4px' }}>DanaÅ¡nje Isporuke</p>
              <p style={{ fontSize: '28px', fontWeight: 'bold', color: '#1f2937' }}>{stats.todayDeliveries}</p>
            </div>
            <Truck size={24} color="#f59e0b" />
          </div>
        </motion.div>

        <motion.div
          whileHover={{ scale: 1.02 }}
          style={{
            backgroundColor: 'white',
            padding: '20px',
            borderRadius: '12px',
            boxShadow: '0 4px 6px rgba(0,0,0,0.1)'
          }}
        >
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start' }}>
            <div>
              <p style={{ fontSize: '12px', color: '#6b7280', marginBottom: '4px' }}>KritiÄni Artikli</p>
              <p style={{ fontSize: '28px', fontWeight: 'bold', color: '#ef4444' }}>{stats.criticalItems}</p>
            </div>
            <AlertCircle size={24} color="#ef4444" />
          </div>
        </motion.div>
      </div>

      {/* Scanner Section */}
      <div style={{ padding: '20px' }}>
        <div style={{ backgroundColor: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 2px 4px rgba(0,0,0,0.1)' }}>
          <h2 style={{ fontSize: '20px', fontWeight: 'bold', marginBottom: '8px' }}>
            ðŸ” Skeneri i Prepoznavanje
          </h2>
          <p style={{ color: '#6b7280', marginBottom: '20px' }}>
            Odaberite naÄin skeniranja ili prepoznavanja
          </p>
          
          <div style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
            gap: '16px'
          }}>
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setActiveScanner('barcode')}
              style={{
                padding: '20px',
                backgroundColor: '#f3f4f6',
                border: 'none',
                borderRadius: '12px',
                cursor: 'pointer',
                textAlign: 'center',
                transition: 'all 0.2s'
              }}
            >
              <Camera size={32} color="#6366f1" style={{ marginBottom: '8px' }} />
              <h3 style={{ fontSize: '16px', fontWeight: '600', marginBottom: '4px' }}>Barcode Skener</h3>
              <p style={{ fontSize: '12px', color: '#6b7280' }}>Skeniraj artikle za brzi unos</p>
            </motion.button>

            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setActiveScanner('search')}
              style={{
                padding: '20px',
                backgroundColor: '#f3f4f6',
                border: 'none',
                borderRadius: '12px',
                cursor: 'pointer',
                textAlign: 'center',
                transition: 'all 0.2s'
              }}
            >
              <Search size={32} color="#10b981" style={{ marginBottom: '8px' }} />
              <h3 style={{ fontSize: '16px', fontWeight: '600', marginBottom: '4px' }}>PretraÅ¾i Artikl</h3>
              <p style={{ fontSize: '12px', color: '#6b7280' }}>PronaÄ‘i artikl i projekte</p>
            </motion.button>

            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setActiveScanner('profile')}
              style={{
                padding: '20px',
                backgroundColor: '#f3f4f6',
                border: 'none',
                borderRadius: '12px',
                cursor: 'pointer',
                textAlign: 'center',
                transition: 'all 0.2s'
              }}
            >
              <Grid3x3 size={32} color="#f59e0b" style={{ marginBottom: '8px' }} />
              <h3 style={{ fontSize: '16px', fontWeight: '600', marginBottom: '4px' }}>Skener Profila</h3>
              <p style={{ fontSize: '12px', color: '#6b7280' }}>Prepoznaj presjek profila</p>
            </motion.button>

            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setShowARView(true)}
              style={{
                padding: '20px',
                backgroundColor: '#f3f4f6',
                border: 'none',
                borderRadius: '12px',
                cursor: 'pointer',
                textAlign: 'center',
                transition: 'all 0.2s'
              }}
            >
              <Eye size={32} color="#8b5cf6" style={{ marginBottom: '8px' }} />
              <h3 style={{ fontSize: '16px', fontWeight: '600', marginBottom: '4px' }}>AR NaoÄale</h3>
              <p style={{ fontSize: '12px', color: '#6b7280' }}>OptiÄko prepoznavanje</p>
            </motion.button>
          </div>
        </div>
      </div>

      {/* Tabs */}
      <div style={{ padding: '0 20px' }}>
        <div style={{ display: 'flex', gap: '8px', marginBottom: '16px' }}>
          <button
            onClick={() => setActiveTab('inventory')}
            style={{
              padding: '10px 20px',
              backgroundColor: activeTab === 'inventory' ? '#6366f1' : 'white',
              color: activeTab === 'inventory' ? 'white' : '#6b7280',
              border: 'none',
              borderRadius: '8px',
              cursor: 'pointer',
              fontWeight: '500'
            }}
          >
            ðŸ“¦ Artikli
          </button>
          <button
            onClick={() => setActiveTab('orders')}
            style={{
              padding: '10px 20px',
              backgroundColor: activeTab === 'orders' ? '#6366f1' : 'white',
              color: activeTab === 'orders' ? 'white' : '#6b7280',
              border: 'none',
              borderRadius: '8px',
              cursor: 'pointer',
              fontWeight: '500'
            }}
          >
            ðŸšš NarudÅ¾be
          </button>
          <button
            onClick={() => setActiveTab('deliveries')}
            style={{
              padding: '10px 20px',
              backgroundColor: activeTab === 'deliveries' ? '#6366f1' : 'white',
              color: activeTab === 'deliveries' ? 'white' : '#6b7280',
              border: 'none',
              borderRadius: '8px',
              cursor: 'pointer',
              fontWeight: '500'
            }}
          >
            ðŸ“… Isporuke
          </button>
        </div>
      </div>

      {/* Main Content */}
      <div style={{ padding: '0 20px 20px' }}>
        {activeTab === 'inventory' && (
          <div style={{ backgroundColor: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 2px 4px rgba(0,0,0,0.1)' }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
              <h2 style={{ fontSize: '20px', fontWeight: 'bold' }}>Lista Artikala</h2>
              <div style={{ display: 'flex', gap: '8px' }}>
                <input
                  type="text"
                  placeholder="Filtriraj artikle..."
                  value={filterText}
                  onChange={(e) => setFilterText(e.target.value)}
                  style={{
                    padding: '8px 12px',
                    border: '1px solid #e5e7eb',
                    borderRadius: '8px',
                    width: '200px'
                  }}
                />
                <button
                  onClick={handleExport}
                  style={{
                    padding: '8px 16px',
                    backgroundColor: '#10b981',
                    color: 'white',
                    border: 'none',
                    borderRadius: '8px',
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '4px'
                  }}
                >
                  <Download size={16} />
                  Export
                </button>
              </div>
            </div>

            <div style={{ overflowX: 'auto' }}>
              <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                <thead>
                  <tr style={{ borderBottom: '2px solid #e5e7eb' }}>
                    <th style={{ padding: '12px', textAlign: 'left', fontSize: '12px', fontWeight: '600', color: '#6b7280' }}>ID</th>
                    <th style={{ padding: '12px', textAlign: 'left', fontSize: '12px', fontWeight: '600', color: '#6b7280' }}>Naziv</th>
                    <th style={{ padding: '12px', textAlign: 'left', fontSize: '12px', fontWeight: '600', color: '#6b7280' }}>Lokacija</th>
                    <th style={{ padding: '12px', textAlign: 'left', fontSize: '12px', fontWeight: '600', color: '#6b7280' }}>KoliÄina</th>
                    <th style={{ padding: '12px', textAlign: 'left', fontSize: '12px', fontWeight: '600', color: '#6b7280' }}>Status</th>
                    <th style={{ padding: '12px', textAlign: 'left', fontSize: '12px', fontWeight: '600', color: '#6b7280' }}>Projekt</th>
                    <th style={{ padding: '12px', textAlign: 'left', fontSize: '12px', fontWeight: '600', color: '#6b7280' }}>Akcije</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredArticles.map((article, index) => (
                    <motion.tr
                      key={article.id}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: index * 0.05 }}
                      style={{ borderBottom: '1px solid #f3f4f6' }}
                    >
                      <td style={{ padding: '12px', fontSize: '14px', fontWeight: '500' }}>{article.id}</td>
                      <td style={{ padding: '12px', fontSize: '14px' }}>{article.name}</td>
                      <td style={{ padding: '12px', fontSize: '14px' }}>
                        <span style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
                          <MapPin size={14} />
                          {article.location}
                        </span>
                      </td>
                      <td style={{ padding: '12px', fontSize: '14px' }}>{article.quantity}</td>
                      <td style={{ padding: '12px' }}>
                        <span style={{
                          padding: '4px 8px',
                          borderRadius: '12px',
                          fontSize: '12px',
                          fontWeight: '500',
                          backgroundColor: article.status === 'available' ? '#dcfce7' :
                                         article.status === 'low' ? '#fef3c7' : '#fee2e2',
                          color: article.status === 'available' ? '#166534' :
                                article.status === 'low' ? '#92400e' : '#991b1b'
                        }}>
                          {article.status === 'available' ? 'Dostupno' :
                           article.status === 'low' ? 'Malo' : 'KritiÄno'}
                        </span>
                      </td>
                      <td style={{ padding: '12px', fontSize: '14px' }}>{article.project}</td>
                      <td style={{ padding: '12px' }}>
                        <button
                          onClick={() => setSelectedArticle(article)}
                          style={{
                            padding: '4px 8px',
                            backgroundColor: '#f3f4f6',
                            border: 'none',
                            borderRadius: '6px',
                            cursor: 'pointer',
                            fontSize: '12px'
                          }}
                        >
                          Detalji
                        </button>
                      </td>
                    </motion.tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {activeTab === 'orders' && (
          <div style={{ backgroundColor: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 2px 4px rgba(0,0,0,0.1)' }}>
            <h2 style={{ fontSize: '20px', fontWeight: 'bold', marginBottom: '20px' }}>NarudÅ¾be</h2>
            <div style={{
              display: 'grid',
              gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))',
              gap: '16px'
            }}>
              {orders.map((order) => (
                <motion.div
                  key={order.id}
                  whileHover={{ scale: 1.02 }}
                  style={{
                    padding: '16px',
                    backgroundColor: '#f9fafb',
                    borderRadius: '8px',
                    border: '1px solid #e5e7eb'
                  }}
                >
                  <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '12px' }}>
                    <h3 style={{ fontSize: '16px', fontWeight: '600' }}>{order.id}</h3>
                    <span style={{
                      padding: '4px 8px',
                      borderRadius: '12px',
                      fontSize: '12px',
                      fontWeight: '500',
                      backgroundColor: order.status === 'delivered' ? '#dcfce7' :
                                     order.status === 'processing' ? '#dbeafe' : '#fef3c7',
                      color: order.status === 'delivered' ? '#166534' :
                            order.status === 'processing' ? '#1e40af' : '#92400e'
                    }}>
                      {order.status === 'delivered' ? 'IsporuÄeno' :
                       order.status === 'processing' ? 'U obradi' : 'Dolazi'}
                    </span>
                  </div>
                  <p style={{ fontSize: '14px', color: '#374151', marginBottom: '8px' }}>{order.supplier}</p>
                  <div style={{ display: 'flex', justifyContent: 'space-between', fontSize: '12px', color: '#6b7280' }}>
                    <span>{order.items} artikala</span>
                    <span>ETA: {order.eta}</span>
                  </div>
                  <div style={{ marginTop: '12px', paddingTop: '12px', borderTop: '1px solid #e5e7eb' }}>
                    <p style={{ fontSize: '18px', fontWeight: 'bold', color: '#1f2937' }}>{order.value}</p>
                  </div>
                </motion.div>
              ))}
            </div>
          </div>
        )}

        {activeTab === 'deliveries' && (
          <div style={{ backgroundColor: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 2px 4px rgba(0,0,0,0.1)' }}>
            <h2 style={{ fontSize: '20px', fontWeight: 'bold', marginBottom: '20px' }}>Planirane Isporuke</h2>
            <div style={{
              display: 'grid',
              gap: '12px'
            }}>
              <div style={{
                padding: '16px',
                backgroundColor: '#f0fdf4',
                borderRadius: '8px',
                borderLeft: '4px solid #10b981'
              }}>
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start' }}>
                  <div>
                    <h3 style={{ fontSize: '16px', fontWeight: '600', marginBottom: '4px' }}>Projekt Nova Zgrada</h3>
                    <p style={{ fontSize: '14px', color: '#6b7280', marginBottom: '8px' }}>15 artikala â€¢ Vrijednost: â‚¬8,500</p>
                    <p style={{ fontSize: '12px', color: '#059669' }}>Isporuka: Danas 14:00</p>
                  </div>
                  <CheckCircle size={24} color="#10b981" />
                </div>
              </div>

              <div style={{
                padding: '16px',
                backgroundColor: '#fef3c7',
                borderRadius: '8px',
                borderLeft: '4px solid #f59e0b'
              }}>
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start' }}>
                  <div>
                    <h3 style={{ fontSize: '16px', fontWeight: '600', marginBottom: '4px' }}>Projekt Fasada</h3>
                    <p style={{ fontSize: '14px', color: '#6b7280', marginBottom: '8px' }}>8 artikala â€¢ Vrijednost: â‚¬5,200</p>
                    <p style={{ fontSize: '12px', color: '#d97706' }}>Isporuka: Sutra 10:00</p>
                  </div>
                  <Clock size={24} color="#f59e0b" />
                </div>
              </div>

              <div style={{
                padding: '16px',
                backgroundColor: '#fee2e2',
                borderRadius: '8px',
                borderLeft: '4px solid #ef4444'
              }}>
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start' }}>
                  <div>
                    <h3 style={{ fontSize: '16px', fontWeight: '600', marginBottom: '4px' }}>Projekt Tower - HITNO</h3>
                    <p style={{ fontSize: '14px', color: '#6b7280', marginBottom: '8px' }}>3 artikla â€¢ Vrijednost: â‚¬2,100</p>
                    <p style={{ fontSize: '12px', color: '#dc2626' }}>KaÅ¡njenje: 2 dana</p>
                  </div>
                  <AlertCircle size={24} color="#ef4444" />
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Modals */}
      <ScannerModal />
      <ARViewModal />

      {/* Article Details Modal */}
      <AnimatePresence>
        {selectedArticle && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            style={{
              position: 'fixed',
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              backgroundColor: 'rgba(0,0,0,0.5)',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              zIndex: 1000
            }}
            onClick={() => setSelectedArticle(null)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              onClick={(e) => e.stopPropagation()}
              style={{
                backgroundColor: 'white',
                borderRadius: '16px',
                padding: '32px',
                width: '90%',
                maxWidth: '500px'
              }}
            >
              <h3 style={{ fontSize: '20px', fontWeight: 'bold', marginBottom: '16px' }}>
                Detalji Artikla
              </h3>
              <div style={{ marginBottom: '12px' }}>
                <span style={{ fontSize: '12px', color: '#6b7280' }}>ID:</span>
                <p style={{ fontSize: '16px', fontWeight: '500' }}>{selectedArticle.id}</p>
              </div>
              <div style={{ marginBottom: '12px' }}>
                <span style={{ fontSize: '12px', color: '#6b7280' }}>Naziv:</span>
                <p style={{ fontSize: '16px', fontWeight: '500' }}>{selectedArticle.name}</p>
              </div>
              <div style={{ marginBottom: '12px' }}>
                <span style={{ fontSize: '12px', color: '#6b7280' }}>Lokacija:</span>
                <p style={{ fontSize: '16px', fontWeight: '500' }}>{selectedArticle.location}</p>
              </div>
              <div style={{ marginBottom: '12px' }}>
                <span style={{ fontSize: '12px', color: '#6b7280' }}>KoliÄina:</span>
                <p style={{ fontSize: '16px', fontWeight: '500' }}>{selectedArticle.quantity} kom</p>
              </div>
              <div style={{ marginBottom: '12px' }}>
                <span style={{ fontSize: '12px', color: '#6b7280' }}>Projekt:</span>
                <p style={{ fontSize: '16px', fontWeight: '500' }}>{selectedArticle.project}</p>
              </div>
              <button
                onClick={() => setSelectedArticle(null)}
                style={{
                  marginTop: '16px',
                  padding: '10px 24px',
                  backgroundColor: '#6366f1',
                  color: 'white',
                  border: 'none',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  width: '100%'
                }}
              >
                Zatvori
              </button>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

const MobileAnimationTab = () => {
  const [activeCategory, setActiveCategory] = useState('chains');
  const [isPlaying, setIsPlaying] = useState(false);
  const [selectedAnimation, setSelectedAnimation] = useState(null);
  const [animationSpeed, setAnimationSpeed] = useState(1);
  const [glowIntensity, setGlowIntensity] = useState(50);
  const [enableGlow, setEnableGlow] = useState(true);
  const [randomSeed, setRandomSeed] = useState(0);
  const containerRef = useRef(null);

  // Animation categories
  const categories = [
    { id: 'chains', label: 'Chain Animations', icon: Layers },
    { id: 'morph', label: 'Morphing', icon: Hexagon },
    { id: 'physics', label: 'Physics', icon: Activity },
    { id: 'glow', label: 'Glow Effects', icon: Sparkles },
    { id: 'gesture', label: 'Gestures', icon: Move },
    { id: 'random', label: 'Random', icon: Shuffle }
  ];

  // Preset Transform Patterns - 15 standard operations
  const presetTransforms = {
    // Entry Animations
    dataEntry: {
      name: 'ðŸ“ Data Entry',
      icon: 'ðŸ“',
      color: '#6366f1',
      sequence: [
        { scale: [0, 1.1, 1], opacity: [0, 1], duration: 0.4 },
        { y: [-20, 0], duration: 0.4 }
      ]
    },
    
    // Success/Complete Animations
    taskComplete: {
      name: 'âœ… Task Complete',
      icon: 'âœ…',
      color: '#10b981',
      sequence: [
        { scale: [1, 1.2, 1], duration: 0.3 },
        { rotate: [0, 15, -15, 0], duration: 0.4 },
        { y: [0, -10, 0], duration: 0.3 }
      ]
    },
    
    // Error Animations
    errorBounce: {
      name: 'âŒ Error Bounce',
      icon: 'âŒ',
      color: '#ef4444',
      sequence: [
        { x: [0, -10, 10, -10, 10, 0], duration: 0.5 },
        { scale: [1, 1.05, 1], duration: 0.5 }
      ]
    },
    
    // Loading States
    loadingTransform: {
      name: 'âš¡ Loading Transform',
      icon: 'âš¡',
      color: '#f59e0b',
      sequence: [
        { rotate: [0, 360], duration: 1 },
        { scale: [1, 0.8, 1], duration: 1 },
        { opacity: [1, 0.5, 1], duration: 1 }
      ]
    },
    
    // Notification
    notification: {
      name: 'ðŸ”” Notification',
      icon: 'ðŸ””',
      color: '#8b5cf6',
      sequence: [
        { scale: [0.8, 1.2, 1], duration: 0.4 },
        { rotate: [0, -20, 20, -20, 20, 0], duration: 0.6 }
      ]
    },
    
    // Delete/Remove
    deleteItem: {
      name: 'ðŸ—‘ï¸ Delete Item',
      icon: 'ðŸ—‘ï¸',
      color: '#dc2626',
      sequence: [
        { scale: [1, 1.1, 0], duration: 0.4 },
        { opacity: [1, 0], duration: 0.4 },
        { rotate: [0, 180], duration: 0.4 }
      ]
    },
    
    // Save Animation
    saveProgress: {
      name: 'ðŸ’¾ Save Progress',
      icon: 'ðŸ’¾',
      color: '#059669',
      sequence: [
        { y: [0, -5, 0], duration: 0.3 },
        { scale: [1, 0.95, 1.05, 1], duration: 0.4 }
      ]
    },
    
    // Refresh/Update
    refreshData: {
      name: 'ðŸ”„ Refresh Data',
      icon: 'ðŸ”„',
      color: '#0891b2',
      sequence: [
        { rotate: [0, 360, 720], duration: 1 },
        { scale: [1, 0.9, 1], duration: 0.5 }
      ]
    },
    
    // Expand/Collapse
    expandCollapse: {
      name: 'ðŸ“‚ Expand/Collapse',
      icon: 'ðŸ“‚',
      color: '#7c3aed',
      sequence: [
        { scaleY: [1, 0, 1], duration: 0.4 },
        { opacity: [1, 0.3, 1], duration: 0.4 }
      ]
    },
    
    // Highlight/Focus
    focusHighlight: {
      name: 'ðŸŽ¯ Focus Highlight',
      icon: 'ðŸŽ¯',
      color: '#ea580c',
      sequence: [
        { scale: [1, 1.15, 1], duration: 0.5 },
        { opacity: [0.7, 1, 0.7], duration: 1 }
      ]
    },
    
    // Send/Submit
    sendMessage: {
      name: 'ðŸ“¤ Send Message',
      icon: 'ðŸ“¤',
      color: '#2563eb',
      sequence: [
        { x: [0, 20, 100], opacity: [1, 0.8, 0], duration: 0.5 },
        { scale: [1, 0.9, 0.8], duration: 0.5 }
      ]
    },
    
    // Receive/Incoming
    receiveData: {
      name: 'ðŸ“¥ Receive Data',
      icon: 'ðŸ“¥',
      color: '#16a34a',
      sequence: [
        { x: [-100, 0], opacity: [0, 1], duration: 0.5 },
        { scale: [0.8, 1.1, 1], duration: 0.3 }
      ]
    },
    
    // Processing/Working
    processing: {
      name: 'âš™ï¸ Processing',
      icon: 'âš™ï¸',
      color: '#6b7280',
      sequence: [
        { rotate: [0, 180, 360], duration: 2 },
        { scale: [1, 1.1, 1, 1.1, 1], duration: 2 }
      ]
    },
    
    // Warning/Alert
    warningPulse: {
      name: 'âš ï¸ Warning Pulse',
      icon: 'âš ï¸',
      color: '#f97316',
      sequence: [
        { scale: [1, 1.2, 1, 1.2, 1], duration: 1 },
        { opacity: [1, 0.6, 1, 0.6, 1], duration: 1 }
      ]
    },
    
    // Success Checkmark
    successCheck: {
      name: 'âœ¨ Success Check',
      icon: 'âœ¨',
      color: '#14b8a6',
      sequence: [
        { scale: [0, 1.3, 1], duration: 0.4 },
        { rotate: [0, -10, 10, 0], duration: 0.3 },
        { y: [0, -15, 0], duration: 0.4 }
      ]
    }
  };

  // Keep the original animation chains for the chains category
  const animationChains = {
    bounceExpand: {
      name: 'Bounce & Expand',
      sequence: [
        { scale: [1, 1.2, 0.9, 1.3, 0.95, 1.4, 1], duration: 2 },
        { rotate: [0, 10, -10, 15, -15, 20, 0], duration: 2 },
        { x: [0, 0, 0, 0, 0, 0, 300], duration: 0.5 }
      ]
    },
    pulseCollapse: {
      name: 'Pulse & Collapse',
      sequence: [
        { scale: [1, 1.5, 1.4, 1.3, 1.2, 1.1, 1, 0.5, 0], duration: 3 },
        { opacity: [1, 0.8, 0.9, 0.7, 0.8, 0.6, 0.7, 0.3, 0], duration: 3 }
      ]
    },
    spiralOut: {
      name: 'Spiral Out',
      sequence: [
        { rotate: [0, 360, 720, 1080], duration: 2 },
        { scale: [1, 0.8, 0.6, 0], duration: 2 },
        { x: [0, 50, 100, 200], y: [0, -50, -100, -200], duration: 2 }
      ]
    },
    elasticToggle: {
      name: 'Elastic Toggle',
      sequence: [
        { scaleX: [1, 1.5, 0.5, 1.2, 0.8, 1], duration: 1.5 },
        { scaleY: [1, 0.5, 1.5, 0.8, 1.2, 1], duration: 1.5 },
        { rotate: [0, 180, 360], duration: 1 }
      ]
    },
    chaosMode: {
      name: 'Chaos Mode',
      sequence: [
        { scale: [1, 2, 0.5, 3, 0.2, 1.5, 0], duration: 3 },
        { rotate: [0, 180, -270, 450, -90, 360, 720], duration: 3 },
        { x: [0, -100, 200, -150, 100, -50, 300], duration: 3 }
      ]
    }
  };

  // Generate random animation chain
  const generateRandomChain = () => {
    const randomScale = Array.from({ length: 7 }, () => Math.random() * 2);
    const randomRotate = Array.from({ length: 7 }, () => Math.random() * 360 - 180);
    const randomX = Array.from({ length: 7 }, () => Math.random() * 200 - 100);
    
    return {
      scale: randomScale,
      rotate: randomRotate,
      x: randomX,
      duration: 2 + Math.random() * 2
    };
  };

  // Glow colors based on intensity
  const getGlowColor = () => {
    const colors = ['#ff4444', '#ff8800', '#4444ff', '#a855f7', '#06b6d4', '#10b981'];
    return colors[Math.floor(Math.random() * colors.length)];
  };

  // Animation element component
  const AnimationElement = ({ type, animation, index }) => {
    const [glowColor] = useState(getGlowColor());
    
    const shapes = {
      square: <Square className="w-full h-full" />,
      circle: <Circle className="w-full h-full" />,
      triangle: <Triangle className="w-full h-full" />,
      heart: <Heart className="w-full h-full" />,
      star: <Star className="w-full h-full" />,
      hexagon: <Hexagon className="w-full h-full" />
    };

    return (
      <motion.div
        style={{
          width: '80px',
          height: '80px',
          position: 'relative',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          color: '#6366f1',
          filter: enableGlow ? `drop-shadow(0 0 ${glowIntensity}px ${glowColor})` : 'none'
        }}
        animate={animation}
        transition={{
          duration: animation.duration / animationSpeed,
          ease: "easeInOut",
          repeat: isPlaying ? Infinity : 0
        }}
      >
        {/* Glow background effect */}
        {enableGlow && (
          <motion.div
            style={{
              position: 'absolute',
              width: '120%',
              height: '120%',
              background: `radial-gradient(circle, ${glowColor}40 0%, transparent 70%)`,
              borderRadius: '50%',
              zIndex: -1
            }}
            animate={{
              scale: [1, 1.2, 1],
              opacity: [0.5, 0.8, 0.5]
            }}
            transition={{
              duration: 2,
              repeat: Infinity
            }}
          />
        )}
        {shapes[type] || shapes.square}
      </motion.div>
    );
  };

  return (
    <div style={{ minHeight: '100vh', backgroundColor: '#f9fafb' }}>
      {/* Header */}
      <div style={{
        backgroundColor: 'white',
        padding: '20px',
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
        marginBottom: '20px'
      }}>
        <h2 style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '8px' }}>
          Animation Playground
        </h2>
        <p style={{ color: '#6b7280', fontSize: '14px' }}>
          Test and experiment with advanced animation chains and effects
        </p>
      </div>

      {/* Category Tabs */}
      <div style={{
        display: 'flex',
        overflowX: 'auto',
        gap: '8px',
        padding: '0 20px',
        marginBottom: '20px',
        WebkitOverflowScrolling: 'touch'
      }}>
        {categories.map(cat => {
          const Icon = cat.icon;
          return (
            <button
              key={cat.id}
              onClick={() => setActiveCategory(cat.id)}
              style={{
                display: 'flex',
                alignItems: 'center',
                gap: '6px',
                padding: '10px 16px',
                backgroundColor: activeCategory === cat.id ? '#6366f1' : 'white',
                color: activeCategory === cat.id ? 'white' : '#6b7280',
                border: 'none',
                borderRadius: '8px',
                fontSize: '14px',
                fontWeight: '500',
                cursor: 'pointer',
                whiteSpace: 'nowrap',
                transition: 'all 0.2s',
                boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
              }}
            >
              <Icon size={16} />
              {cat.label}
            </button>
          );
        })}
      </div>

      {/* Controls Panel */}
      <div style={{
        backgroundColor: 'white',
        padding: '20px',
        margin: '0 20px 20px',
        borderRadius: '12px',
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
      }}>
        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px' }}>
          {/* Speed Control */}
          <div>
            <label style={{ fontSize: '12px', color: '#6b7280', display: 'block', marginBottom: '4px' }}>
              Animation Speed: {animationSpeed}x
            </label>
            <input
              type="range"
              min="0.1"
              max="3"
              step="0.1"
              value={animationSpeed}
              onChange={(e) => setAnimationSpeed(parseFloat(e.target.value))}
              style={{
                width: '100%',
                height: '6px',
                borderRadius: '3px',
                background: '#e5e7eb',
                outline: 'none'
              }}
            />
          </div>

          {/* Glow Intensity */}
          <div>
            <label style={{ fontSize: '12px', color: '#6b7280', display: 'block', marginBottom: '4px' }}>
              Glow Intensity: {glowIntensity}px
            </label>
            <input
              type="range"
              min="0"
              max="100"
              value={glowIntensity}
              onChange={(e) => setGlowIntensity(parseInt(e.target.value))}
              style={{
                width: '100%',
                height: '6px',
                borderRadius: '3px',
                background: '#e5e7eb',
                outline: 'none'
              }}
            />
          </div>
        </div>

        {/* Action Buttons */}
        <div style={{
          display: 'flex',
          gap: '8px',
          marginTop: '16px',
          flexWrap: 'wrap'
        }}>
          <button
            onClick={() => setIsPlaying(!isPlaying)}
            style={{
              flex: 1,
              minWidth: '100px',
              padding: '10px',
              backgroundColor: isPlaying ? '#ef4444' : '#10b981',
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              gap: '6px',
              cursor: 'pointer',
              fontSize: '14px',
              fontWeight: '500'
            }}
          >
            {isPlaying ? <Pause size={16} /> : <Play size={16} />}
            {isPlaying ? 'Pause' : 'Play'}
          </button>

          <button
            onClick={() => setRandomSeed(Date.now())}
            style={{
              flex: 1,
              minWidth: '100px',
              padding: '10px',
              backgroundColor: '#8b5cf6',
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              gap: '6px',
              cursor: 'pointer',
              fontSize: '14px',
              fontWeight: '500'
            }}
          >
            <Shuffle size={16} />
            Randomize
          </button>

          <button
            onClick={() => setEnableGlow(!enableGlow)}
            style={{
              flex: 1,
              minWidth: '100px',
              padding: '10px',
              backgroundColor: enableGlow ? '#f59e0b' : '#6b7280',
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              gap: '6px',
              cursor: 'pointer',
              fontSize: '14px',
              fontWeight: '500'
            }}
          >
            {enableGlow ? <Eye size={16} /> : <EyeOff size={16} />}
            Glow {enableGlow ? 'On' : 'Off'}
          </button>
        </div>
      </div>

      {/* Animation Display Area */}
      <div style={{
        backgroundColor: 'white',
        margin: '0 20px 20px',
        borderRadius: '12px',
        padding: '20px',
        minHeight: '300px',
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
      }}>
        {activeCategory === 'chains' && (
          <div>
            <h3 style={{ fontSize: '16px', fontWeight: '600', marginBottom: '16px' }}>
              Preset Transform Patterns
            </h3>
            
            {/* Preset Configurations Grid */}
            <div style={{
              display: 'grid',
              gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',
              gap: '12px',
              marginBottom: '32px'
            }}>
              {Object.entries(presetTransforms).map(([key, preset]) => (
                <motion.button
                  key={key}
                  onClick={() => setSelectedAnimation(key)}
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  style={{
                    padding: '12px',
                    backgroundColor: selectedAnimation === key ? preset.color : 'white',
                    color: selectedAnimation === key ? 'white' : '#374151',
                    border: `2px solid ${preset.color}`,
                    borderRadius: '8px',
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px',
                    fontSize: '13px',
                    fontWeight: '500',
                    transition: 'all 0.2s'
                  }}
                >
                  <span style={{ fontSize: '16px' }}>{preset.icon}</span>
                  <span style={{ flex: 1, textAlign: 'left' }}>{preset.name.replace(preset.icon, '').trim()}</span>
                </motion.button>
              ))}
            </div>

            {/* Preview Area for Selected Preset */}
            {selectedAnimation && presetTransforms[selectedAnimation] && (
              <div style={{
                padding: '20px',
                backgroundColor: '#f9fafb',
                borderRadius: '8px',
                marginBottom: '24px'
              }}>
                <p style={{ fontSize: '14px', fontWeight: '600', marginBottom: '16px' }}>
                  Preview: {presetTransforms[selectedAnimation].name}
                </p>
                <div style={{
                  display: 'flex',
                  justifyContent: 'center',
                  alignItems: 'center',
                  minHeight: '120px'
                }}>
                  <AnimationElement
                    type="square"
                    animation={presetTransforms[selectedAnimation].sequence[0]}
                    index={0}
                  />
                </div>
              </div>
            )}

            <h3 style={{ fontSize: '16px', fontWeight: '600', marginBottom: '16px', marginTop: '32px' }}>
              Advanced Chain Animations
            </h3>
            <div style={{
              display: 'grid',
              gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))',
              gap: '20px'
            }}>
              {Object.entries(animationChains).map(([key, chain]) => (
                <div
                  key={key}
                  style={{
                    padding: '16px',
                    backgroundColor: '#f9fafb',
                    borderRadius: '8px',
                    textAlign: 'center'
                  }}
                >
                  <p style={{ fontSize: '12px', marginBottom: '12px', fontWeight: '500' }}>
                    {chain.name}
                  </p>
                  <div style={{
                    display: 'flex',
                    justifyContent: 'center',
                    marginBottom: '12px',
                    minHeight: '100px',
                    alignItems: 'center'
                  }}>
                    <AnimationElement
                      type="square"
                      animation={chain.sequence[0]}
                      index={0}
                    />
                  </div>
                  <button
                    onClick={() => setSelectedAnimation(key)}
                    style={{
                      width: '100%',
                      padding: '6px',
                      backgroundColor: selectedAnimation === key ? '#6366f1' : '#e5e7eb',
                      color: selectedAnimation === key ? 'white' : '#374151',
                      border: 'none',
                      borderRadius: '6px',
                      fontSize: '12px',
                      cursor: 'pointer'
                    }}
                  >
                    Select
                  </button>
                </div>
              ))}
            </div>
          </div>
        )}

        {activeCategory === 'morph' && (
          <div>
            <h3 style={{ fontSize: '16px', fontWeight: '600', marginBottom: '16px' }}>
              Shape Morphing
            </h3>
            <div style={{
              display: 'flex',
              justifyContent: 'space-around',
              alignItems: 'center',
              padding: '40px 20px',
              backgroundColor: '#f9fafb',
              borderRadius: '8px'
            }}>
              {['square', 'circle', 'triangle', 'heart', 'star', 'hexagon'].map((shape, index) => (
                <motion.div
                  key={shape}
                  initial={{ opacity: 0, scale: 0 }}
                  animate={{ 
                    opacity: 1, 
                    scale: 1,
                    rotate: isPlaying ? 360 : 0
                  }}
                  transition={{
                    delay: index * 0.1,
                    duration: 1,
                    rotate: {
                      duration: 3,
                      repeat: Infinity,
                      ease: "linear"
                    }
                  }}
                >
                  <AnimationElement
                    type={shape}
                    animation={{
                      scale: isPlaying ? [1, 1.2, 1] : 1,
                      duration: 2
                    }}
                    index={index}
                  />
                </motion.div>
              ))}
            </div>
          </div>
        )}

        {activeCategory === 'physics' && (
          <div>
            <h3 style={{ fontSize: '16px', fontWeight: '600', marginBottom: '16px' }}>
              Physics-Based Animations
            </h3>
            <div style={{
              height: '300px',
              position: 'relative',
              backgroundColor: '#f9fafb',
              borderRadius: '8px',
              overflow: 'hidden'
            }}>
              {/* Bouncing Ball */}
              <motion.div
                style={{
                  position: 'absolute',
                  left: '20%',
                  width: '60px',
                  height: '60px',
                  backgroundColor: '#6366f1',
                  borderRadius: '50%',
                  boxShadow: enableGlow ? `0 0 ${glowIntensity}px #6366f1` : '0 2px 4px rgba(0,0,0,0.2)'
                }}
                animate={{
                  y: isPlaying ? [0, 200, 0] : 0
                }}
                transition={{
                  y: {
                    duration: 1.5 / animationSpeed,
                    repeat: Infinity,
                    ease: [0.25, 0.46, 0.45, 0.94]
                  }
                }}
              />

              {/* Pendulum */}
              <motion.div
                style={{
                  position: 'absolute',
                  right: '20%',
                  top: '0',
                  width: '2px',
                  height: '150px',
                  backgroundColor: '#374151',
                  transformOrigin: 'top center'
                }}
                animate={{
                  rotate: isPlaying ? [45, -45, 45] : 0
                }}
                transition={{
                  duration: 2 / animationSpeed,
                  repeat: Infinity,
                  ease: "easeInOut"
                }}
              >
                <div style={{
                  position: 'absolute',
                  bottom: '-30px',
                  left: '-29px',
                  width: '60px',
                  height: '60px',
                  backgroundColor: '#8b5cf6',
                  borderRadius: '50%',
                  boxShadow: enableGlow ? `0 0 ${glowIntensity}px #8b5cf6` : '0 2px 4px rgba(0,0,0,0.2)'
                }} />
              </motion.div>

              {/* Wave */}
              <svg
                style={{
                  position: 'absolute',
                  bottom: 0,
                  width: '100%',
                  height: '100px'
                }}
              >
                <motion.path
                  d={`M0,50 Q${100},${isPlaying ? 20 : 50} 200,50 T400,50`}
                  fill="none"
                  stroke="#06b6d4"
                  strokeWidth="3"
                  animate={{
                    d: isPlaying ? [
                      "M0,50 Q100,20 200,50 T400,50",
                      "M0,50 Q100,80 200,50 T400,50",
                      "M0,50 Q100,20 200,50 T400,50"
                    ] : "M0,50 Q100,50 200,50 T400,50"
                  }}
                  transition={{
                    duration: 2 / animationSpeed,
                    repeat: Infinity
                  }}
                />
              </svg>
            </div>
          </div>
        )}

        {activeCategory === 'glow' && (
          <div>
            <h3 style={{ fontSize: '16px', fontWeight: '600', marginBottom: '16px' }}>
              Advanced Glow Effects
            </h3>
            <div style={{
              display: 'grid',
              gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))',
              gap: '30px',
              padding: '20px'
            }}>
              {/* Pulsing Glow */}
              <div style={{ textAlign: 'center' }}>
                <p style={{ fontSize: '12px', marginBottom: '8px' }}>Pulse</p>
                <motion.div
                  style={{
                    width: '80px',
                    height: '80px',
                    margin: '0 auto',
                    backgroundColor: '#ef4444',
                    borderRadius: '12px',
                    boxShadow: `0 0 ${glowIntensity}px #ef4444`
                  }}
                  animate={{
                    boxShadow: isPlaying ? [
                      `0 0 ${glowIntensity}px #ef4444`,
                      `0 0 ${glowIntensity * 2}px #ef4444`,
                      `0 0 ${glowIntensity}px #ef4444`
                    ] : `0 0 ${glowIntensity}px #ef4444`
                  }}
                  transition={{
                    duration: 1.5 / animationSpeed,
                    repeat: Infinity
                  }}
                />
              </div>

              {/* Rainbow Glow */}
              <div style={{ textAlign: 'center' }}>
                <p style={{ fontSize: '12px', marginBottom: '8px' }}>Rainbow</p>
                <motion.div
                  style={{
                    width: '80px',
                    height: '80px',
                    margin: '0 auto',
                    backgroundColor: '#6366f1',
                    borderRadius: '50%'
                  }}
                  animate={{
                    boxShadow: isPlaying ? [
                      `0 0 ${glowIntensity}px #ef4444`,
                      `0 0 ${glowIntensity}px #f59e0b`,
                      `0 0 ${glowIntensity}px #10b981`,
                      `0 0 ${glowIntensity}px #06b6d4`,
                      `0 0 ${glowIntensity}px #8b5cf6`,
                      `0 0 ${glowIntensity}px #ef4444`
                    ] : `0 0 ${glowIntensity}px #6366f1`
                  }}
                  transition={{
                    duration: 3 / animationSpeed,
                    repeat: Infinity
                  }}
                />
              </div>

              {/* Breathing Glow */}
              <div style={{ textAlign: 'center' }}>
                <p style={{ fontSize: '12px', marginBottom: '8px' }}>Breathe</p>
                <motion.div
                  style={{
                    width: '80px',
                    height: '80px',
                    margin: '0 auto',
                    backgroundColor: '#10b981',
                    borderRadius: '50%'
                  }}
                  animate={{
                    scale: isPlaying ? [1, 1.1, 1] : 1,
                    boxShadow: isPlaying ? [
                      `0 0 ${glowIntensity * 0.5}px #10b981`,
                      `0 0 ${glowIntensity * 1.5}px #10b981`,
                      `0 0 ${glowIntensity * 0.5}px #10b981`
                    ] : `0 0 ${glowIntensity}px #10b981`
                  }}
                  transition={{
                    duration: 2 / animationSpeed,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }}
                />
              </div>

              {/* Electric Glow */}
              <div style={{ textAlign: 'center' }}>
                <p style={{ fontSize: '12px', marginBottom: '8px' }}>Electric</p>
                <motion.div
                  style={{
                    width: '80px',
                    height: '80px',
                    margin: '0 auto',
                    backgroundColor: '#fbbf24',
                    borderRadius: '8px'
                  }}
                  animate={{
                    boxShadow: isPlaying ? [
                      `0 0 ${glowIntensity}px #fbbf24, 0 0 ${glowIntensity * 2}px #fbbf24`,
                      `0 0 ${glowIntensity * 0.5}px #fbbf24, 0 0 ${glowIntensity}px #fbbf24`,
                      `0 0 ${glowIntensity * 1.5}px #fbbf24, 0 0 ${glowIntensity * 3}px #fbbf24`,
                      `0 0 ${glowIntensity}px #fbbf24, 0 0 ${glowIntensity * 2}px #fbbf24`
                    ] : `0 0 ${glowIntensity}px #fbbf24`
                  }}
                  transition={{
                    duration: 0.5 / animationSpeed,
                    repeat: Infinity
                  }}
                />
              </div>
            </div>
          </div>
        )}

        {activeCategory === 'gesture' && (
          <div>
            <h3 style={{ fontSize: '16px', fontWeight: '600', marginBottom: '16px' }}>
              Gesture Animations
            </h3>
            <div style={{
              display: 'grid',
              gridTemplateColumns: 'repeat(2, 1fr)',
              gap: '20px'
            }}>
              {/* Swipe Right */}
              <div style={{
                padding: '20px',
                backgroundColor: '#f9fafb',
                borderRadius: '8px',
                overflow: 'hidden'
              }}>
                <p style={{ fontSize: '12px', marginBottom: '12px', fontWeight: '500' }}>
                  Swipe Right
                </p>
                <motion.div
                  style={{
                    width: '100%',
                    height: '60px',
                    backgroundColor: '#6366f1',
                    borderRadius: '8px',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    color: 'white',
                    fontSize: '14px',
                    fontWeight: '500'
                  }}
                  animate={{
                    x: isPlaying ? [0, 100, 0] : 0,
                    opacity: isPlaying ? [1, 0.5, 1] : 1
                  }}
                  transition={{
                    duration: 1.5 / animationSpeed,
                    repeat: Infinity
                  }}
                >
                  <ArrowRight size={20} />
                </motion.div>
              </div>

              {/* Swipe Up */}
              <div style={{
                padding: '20px',
                backgroundColor: '#f9fafb',
                borderRadius: '8px',
                overflow: 'hidden'
              }}>
                <p style={{ fontSize: '12px', marginBottom: '12px', fontWeight: '500' }}>
                  Swipe Up
                </p>
                <motion.div
                  style={{
                    width: '100%',
                    height: '60px',
                    backgroundColor: '#10b981',
                    borderRadius: '8px',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    color: 'white',
                    fontSize: '14px',
                    fontWeight: '500'
                  }}
                  animate={{
                    y: isPlaying ? [0, -30, 0] : 0,
                    scale: isPlaying ? [1, 0.95, 1] : 1
                  }}
                  transition={{
                    duration: 1 / animationSpeed,
                    repeat: Infinity
                  }}
                >
                  <ArrowUp size={20} />
                </motion.div>
              </div>

              {/* Tap */}
              <div style={{
                padding: '20px',
                backgroundColor: '#f9fafb',
                borderRadius: '8px'
              }}>
                <p style={{ fontSize: '12px', marginBottom: '12px', fontWeight: '500' }}>
                  Tap Effect
                </p>
                <motion.div
                  style={{
                    width: '60px',
                    height: '60px',
                    margin: '0 auto',
                    backgroundColor: '#8b5cf6',
                    borderRadius: '50%',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    color: 'white',
                    position: 'relative'
                  }}
                  animate={{
                    scale: isPlaying ? [1, 0.9, 1.1, 1] : 1
                  }}
                  transition={{
                    duration: 0.5 / animationSpeed,
                    repeat: Infinity,
                    repeatDelay: 1
                  }}
                >
                  <Target size={24} />
                  {isPlaying && (
                    <motion.div
                      style={{
                        position: 'absolute',
                        width: '100%',
                        height: '100%',
                        border: '2px solid #8b5cf6',
                        borderRadius: '50%'
                      }}
                      animate={{
                        scale: [1, 2],
                        opacity: [1, 0]
                      }}
                      transition={{
                        duration: 1 / animationSpeed,
                        repeat: Infinity
                      }}
                    />
                  )}
                </motion.div>
              </div>

              {/* Long Press */}
              <div style={{
                padding: '20px',
                backgroundColor: '#f9fafb',
                borderRadius: '8px'
              }}>
                <p style={{ fontSize: '12px', marginBottom: '12px', fontWeight: '500' }}>
                  Long Press
                </p>
                <motion.div
                  style={{
                    width: '60px',
                    height: '60px',
                    margin: '0 auto',
                    backgroundColor: '#f59e0b',
                    borderRadius: '12px',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    color: 'white'
                  }}
                >
                  <Loader
                    size={24}
                    style={{
                      animation: isPlaying ? 'spin 2s linear infinite' : 'none'
                    }}
                  />
                </motion.div>
              </div>
            </div>
          </div>
        )}

        {activeCategory === 'random' && (
          <div>
            <h3 style={{ fontSize: '16px', fontWeight: '600', marginBottom: '16px' }}>
              Random Chain Generator
            </h3>
            <div style={{
              padding: '40px',
              backgroundColor: '#f9fafb',
              borderRadius: '8px',
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center'
            }}>
              <motion.div
                key={randomSeed}
                style={{
                  width: '100px',
                  height: '100px',
                  backgroundColor: '#6366f1',
                  borderRadius: '12px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  color: 'white',
                  fontSize: '24px',
                  fontWeight: 'bold',
                  boxShadow: enableGlow ? `0 0 ${glowIntensity}px #6366f1` : '0 2px 4px rgba(0,0,0,0.2)'
                }}
                animate={generateRandomChain()}
                transition={{
                  duration: 3 / animationSpeed,
                  repeat: isPlaying ? Infinity : 0
                }}
              >
                <Zap />
              </motion.div>
              
              <button
                onClick={() => setRandomSeed(Date.now())}
                style={{
                  marginTop: '24px',
                  padding: '10px 24px',
                  backgroundColor: '#6366f1',
                  color: 'white',
                  border: 'none',
                  borderRadius: '8px',
                  fontSize: '14px',
                  fontWeight: '500',
                  cursor: 'pointer',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '8px'
                }}
              >
                <RefreshCw size={16} />
                Generate New Chain
              </button>
            </div>
          </div>
        )}
      </div>

      {/* Info Panel */}
      <div style={{
        backgroundColor: 'white',
        margin: '0 20px 20px',
        padding: '20px',
        borderRadius: '12px',
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
      }}>
        <h3 style={{ fontSize: '14px', fontWeight: '600', marginBottom: '12px' }}>
          Animation Properties
        </h3>
        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(2, 1fr)',
          gap: '12px',
          fontSize: '12px'
        }}>
          <div>
            <span style={{ color: '#6b7280' }}>Category:</span>
            <span style={{ marginLeft: '8px', fontWeight: '500' }}>
              {categories.find(c => c.id === activeCategory)?.label}
            </span>
          </div>
          <div>
            <span style={{ color: '#6b7280' }}>Speed:</span>
            <span style={{ marginLeft: '8px', fontWeight: '500' }}>
              {animationSpeed}x
            </span>
          </div>
          <div>
            <span style={{ color: '#6b7280' }}>Glow:</span>
            <span style={{ marginLeft: '8px', fontWeight: '500' }}>
              {enableGlow ? `${glowIntensity}px` : 'Off'}
            </span>
          </div>
          <div>
            <span style={{ color: '#6b7280' }}>Status:</span>
            <span style={{ marginLeft: '8px', fontWeight: '500' }}>
              {isPlaying ? 'Playing' : 'Paused'}
            </span>
          </div>
        </div>
      </div>

      <style>{`
        @keyframes spin {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }
        
        input[type="range"]::-webkit-slider-thumb {
          appearance: none;
          width: 16px;
          height: 16px;
          border-radius: 50%;
          background: #6366f1;
          cursor: pointer;
        }
        
        input[type="range"]::-moz-range-thumb {
          width: 16px;
          height: 16px;
          border-radius: 50%;
          background: #6366f1;
          cursor: pointer;
          border: none;
        }
      `}</style>
    </div>
  );
};

export default function FsHoverPreviewTab({ items, onPrimaryAction }) {
  const data = useMemo(() => items && items.length ? items : mockItems(), [items]);
  const [hoverId, setHoverId] = useState(null);
  const [hoverPos, setHoverPos] = useState(null); // {x,y,side}
  const [modalItem, setModalItem] = useState(null);
  const openTimer = useRef(null);
  const closeTimer = useRef(null);
  const previewRef = useRef(null);

  // Clean timers
  useEffect(() => () => {
    clearTimeout(openTimer.current);
    clearTimeout(closeTimer.current);
  }, []);

  const handleEnter = (e, id) => {
    clearTimeout(closeTimer.current);
    openTimer.current = setTimeout(() => {
      const rect = e.currentTarget.getBoundingClientRect();
      const panelW = 420;
      const panelH = 280;
      const gap = 12;

      // Prefer right, flip to left if near edge
      const preferRight = rect.right + gap + panelW < window.innerWidth;
      const side = preferRight ? "right" : "left";
      const x = preferRight ? Math.min(rect.right + gap, window.innerWidth - panelW - 8)
                            : Math.max(rect.left - gap - panelW, 8);
      const rawTop = rect.top + (rect.height - panelH) / 2;
      const y = Math.max(8, Math.min(rawTop, window.innerHeight - panelH - 8));

      setHoverId(id);
      setHoverPos({ x, y, side });
    }, 90);
  };

  const scheduleClose = () => {
    clearTimeout(openTimer.current);
    closeTimer.current = setTimeout(() => {
      setHoverId(null);
      setHoverPos(null);
    }, 120);
  };

  const keepOpen = () => clearTimeout(closeTimer.current);

  const current = data.find((x) => x.id === hoverId);

  return (
    <div className="fs-tab-root">
      <FsInlineStyles />

      {/* Grid */}
      <div className="fs-grid" onMouseLeave={scheduleClose}>
        {data.map((item) => (
          <div
            key={item.id}
            className="fs-card"
            onMouseEnter={(e) => handleEnter(e, item.id)}
            onFocus={(e) => handleEnter(e, item.id)}
            onMouseLeave={scheduleClose}
            onClick={() => setModalItem(item)}
            role="button"
            tabIndex={0}
          >
            <div className="fs-card-img" style={{ backgroundImage: `url(${safeUrl(item.image)})` }} />
            <div className="fs-card-footer">
              <div className="fs-card-title" title={item.title}>{item.title}</div>
              <div className="fs-card-sub">{item.subtitle || "â€”"}</div>
            </div>
          </div>
        ))}
      </div>

      {/* Floating Hover Preview (position: fixed, no layout shift) */}
      <AnimatePresence>
        {current && hoverPos && (
          <motion.div
            ref={previewRef}
            className="fs-preview"
            style={{ left: hoverPos.x, top: hoverPos.y }}
            initial={{ opacity: 0, scale: 0.98 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.98 }}
            transition={{ type: "spring", stiffness: 420, damping: 30, mass: 0.8 }}
            onMouseEnter={keepOpen}
            onMouseLeave={scheduleClose}
          >
            <div className="fs-preview-hero" style={{ backgroundImage: `url(${safeUrl(current.hero || current.image)})` }}>
              <div className="fs-badge">
                <BadgeCheck size={14} /> Verified
              </div>
            </div>

            <div className="fs-preview-body">
              <div className="fs-row">
                <div className="fs-titles">
                  <div className="fs-title">{current.title}</div>
                  <div className="fs-sub">{current.subtitle}</div>
                </div>
                <div className="fs-rating">
                  <Star size={16} />
                  <span>{formatRating(current.rating)}</span>
                </div>
              </div>

              <p className="fs-short">{current.short || "Hover preview with quick summary. Click to open full details."}</p>

              {current.tags && current.tags.length > 0 && (
                <div className="fs-tags">
                  {current.tags.slice(0, 4).map((t, i) => (
                    <span key={i} className="fs-tag">{t}</span>
                  ))}
                </div>
              )}

              <div className="fs-actions">
                <button
                  className="fs-btn primary"
                  onClick={() => {
                    if (onPrimaryAction) onPrimaryAction(current);
                    setModalItem(current);
                  }}
                >
                  <Play size={16} /> View details
                </button>
                <button className="fs-btn">
                  <Download size={16} /> {current.price || "Free"}
                </button>
                <button className="fs-icon">
                  <Heart size={16} />
                </button>
                <button className="fs-icon">
                  <Share2 size={16} />
                </button>
              </div>

              <div className="fs-more">
                More <ChevronRight size={16} />
              </div>
            </div>

            {/* little pointer */}
            <div className={`fs-pointer ${hoverPos.side}`} />
          </motion.div>
        )}
      </AnimatePresence>

      {/* Modal with rich info (opens on click) */}
      <AnimatePresence>
        {modalItem && (
          <motion.div
            className="fs-modal-backdrop"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={() => setModalItem(null)}
          >
            <motion.div
              className="fs-modal"
              initial={{ y: 24, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              exit={{ y: 24, opacity: 0 }}
              transition={{ type: "spring", stiffness: 360, damping: 30 }}
              onClick={(e) => e.stopPropagation()}
              role="dialog"
              aria-modal="true"
            >
              <div className="fs-modal-hero" style={{ backgroundImage: `url(${safeUrl(modalItem.hero || modalItem.image)})` }} />
              <div className="fs-modal-content">
                <div className="fs-modal-head">
                  <div>
                    <h2 className="fs-modal-title">{modalItem.title}</h2>
                    <div className="fs-modal-sub">{modalItem.subtitle}</div>
                  </div>
                  <div className="fs-rating big">
                    <Star size={18} />
                    <span>{formatRating(modalItem.rating)}</span>
                  </div>
                </div>

                <p className="fs-modal-text">
                  {modalItem.description || sampleDescription}
                </p>

                {Array.isArray(modalItem.drawings) && modalItem.drawings.length > 0 && (
                  <>
                    <h3 className="fs-section">Drawings & imagery</h3>
                    <div className="fs-gallery">
                      {modalItem.drawings.map((src, i) => (
                        <div key={i} className="fs-thumb" style={{ backgroundImage: `url(${safeUrl(src)})` }} />
                      ))}
                    </div>
                  </>
                )}

                {Array.isArray(modalItem.files) && modalItem.files.length > 0 && (
                  <>
                    <h3 className="fs-section">Attached files</h3>
                    <ul className="fs-files">
                      {modalItem.files.map((f, i) => (
                        <li key={i} className="fs-file">
                          <Download size={16} />
                          <span className="name">{f.name}</span>
                          <span className="meta">{f.size || ""}</span>
                          <button className="fs-link">Open</button>
                        </li>
                      ))}
                    </ul>
                  </>
                )}

                <div className="fs-modal-actions">
                  <button className="fs-btn primary" onClick={() => onPrimaryAction && onPrimaryAction(modalItem)}>
                    <Play size={16} /> Start
                  </button>
                  <button className="fs-btn">
                    <Download size={16} /> {modalItem.price || "Free"}
                  </button>
                  <div className="spacer" />
                  <button className="fs-btn ghost" onClick={() => setModalItem(null)}>Close</button>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}

/* ---------- helpers ---------- */

function safeUrl(u) {
  if (!u) return "";
  try {
    // Support imported URLs or plain strings
    return typeof u === "string" ? u : (u?.src || "");
  } catch {
    return "";
  }
}
function formatRating(r) {
  if (r == null || isNaN(Number(r))) return "â€”";
  return Number(r).toFixed(1);
}

const sampleDescription = `Detailed view with rich content. Use this space to show aluminum alloy specs, manufacturing notes, compliance, images, and links. This modal scrolls internally on small screens.`;

/* ---------- mock data (only used if no items prop is given) ---------- */
function mockItems() {
  // If you have local assets, swap these with: new URL('../assets/whatever.jpg', import.meta.url).href
  const g = (n) => `https://picsum.photos/seed/${n}/512/288`;
  return [
    {
      id: "1",
      title: "Gardenscapes",
      subtitle: "Playrix â€¢ Puzzle",
      price: "Free",
      rating: 4.7,
      image: g("garden-card"),
      hero: g("garden-hero"),
      tags: ["Match-3", "Cozy", "Casual"],
      short: "Restore a garden with match-3 puzzles.",
      drawings: [g("d1"), g("d2"), g("d3")],
      files: [
        { name: "Alu_Sheet_6061_T6.pdf", size: "1.2 MB" },
        { name: "Extrusion_Profile_45x45.step", size: "840 KB" },
      ],
    },
    {
      id: "2",
      title: "Candy Crush Saga",
      subtitle: "King â€¢ Puzzle",
      price: "Free",
      rating: 4.6,
      image: g("candy-card"),
      hero: g("candy-hero"),
      tags: ["Match-3", "Popular"],
      short: "Sweet challenges and combos.",
      drawings: [g("c1"), g("c2")],
      files: [{ name: "Alloy_7075_Properties.xlsx", size: "88 KB" }],
    },
    {
      id: "3",
      title: "Cooking Fever",
      subtitle: "Nordcurrent â€¢ Arcade",
      price: "Free",
      rating: 4.5,
      image: g("cooking-card"),
      hero: g("cooking-hero"),
      tags: ["Arcade", "Time-management"],
      short: "Serve fast, upgrade faster.",
    },
    {
      id: "4",
      title: "Evony: The Kingâ€™s Return",
      subtitle: "TG â€¢ Strategy",
      price: "Free",
      rating: 4.1,
      image: g("evony-card"),
      hero: g("evony-hero"),
      tags: ["Strategy", "MMO"],
      short: "Build, conquer, ally.",
    },
  ];
}

/* ---------- styles (scoped) ---------- */
function FsInlineStyles() {
  return (
    <style>{`
      :root {
        --fs-bg: #111315;
        --fs-surface: #1b1e22;
        --fs-surface-2: #20242a;
        --fs-border: #2b3036;
        --fs-text: #e6e7e9;
        --fs-dim: #aeb3b9;
        --fs-accent: #6aa9ff; /* Fluent-ish accent */
        --fs-radius: 14px;
        --fs-shadow: 0 6px 24px rgba(0,0,0,.36), 0 1px 0 rgba(255,255,255,.03) inset;
      }

      .fs-tab-root {
        color: var(--fs-text);
        background: transparent;
        position: relative;
      }

      /* Grid */
      .fs-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(184px, 1fr));
        gap: 16px;
        padding: 12px 8px 40px;
      }

      /* Card */
      .fs-card {
        background: var(--fs-surface);
        border: 1px solid var(--fs-border);
        border-radius: var(--fs-radius);
        overflow: hidden;
        box-shadow: var(--fs-shadow);
        cursor: pointer;
        transition: transform .14s ease, border-color .14s ease, box-shadow .14s ease;
        will-change: transform;
      }
      .fs-card:hover { transform: translateY(-2px); border-color: #334; }
      .fs-card-img {
        aspect-ratio: 16/9;
        background-size: cover;
        background-position: center;
      }
      .fs-card-footer {
        padding: 10px 12px 12px;
      }
      .fs-card-title {
        font-weight: 600;
        font-size: 14px;
        line-height: 1.2;
        margin-bottom: 4px;
        white-space: nowrap; text-overflow: ellipsis; overflow: hidden;
      }
      .fs-card-sub {
        font-size: 12px;
        color: var(--fs-dim);
        white-space: nowrap; text-overflow: ellipsis; overflow: hidden;
      }

      /* Hover preview */
      .fs-preview {
        position: fixed;
        width: 420px;
        height: 280px;
        background: var(--fs-surface-2);
        border: 1px solid var(--fs-border);
        border-radius: 16px;
        box-shadow: 0 24px 64px rgba(0,0,0,.5);
        overflow: hidden;
        z-index: 50;
        pointer-events: auto;
      }
      .fs-preview-hero {
        height: 44%;
        background-size: cover;
        background-position: center;
        position: relative;
      }
      .fs-badge {
        position: absolute;
        top: 10px; left: 10px;
        display: inline-flex; align-items: center; gap: 6px;
        font-size: 12px;
        background: rgba(0,0,0,.5);
        padding: 6px 8px; border-radius: 999px;
        backdrop-filter: blur(6px);
      }
      .fs-preview-body { padding: 10px 12px; height: 56%; display: flex; flex-direction: column; gap: 8px; }
      .fs-row { display:flex; justify-content: space-between; align-items:center; gap: 8px; }
      .fs-titles .fs-title { font-weight: 700; font-size: 15px; line-height:1.2; }
      .fs-titles .fs-sub { font-size: 12px; color: var(--fs-dim); }
      .fs-rating { display:flex; align-items:center; gap:6px; color: var(--fs-accent); font-weight:600; }
      .fs-rating.big { font-size: 16px; }
      .fs-short { font-size: 12.5px; color: #c8cbd1; line-height: 1.35; max-height: 3.3em; overflow: hidden; }
      .fs-tags { display:flex; gap:6px; flex-wrap: wrap; }
      .fs-tag { font-size: 11px; padding: 4px 8px; border:1px solid var(--fs-border); border-radius: 999px; color:#cfd3d9; }
      .fs-actions { display:flex; align-items:center; gap:8px; margin-top: 2px; }
      .fs-btn, .fs-icon {
        display:inline-flex; align-items:center; gap:8px;
        border-radius: 10px; border:1px solid var(--fs-border);
        background: var(--fs-surface); color: var(--fs-text);
        padding: 8px 10px; font-size: 13px; cursor: pointer;
      }
      .fs-btn.primary { background: var(--fs-accent); color: #08111d; border-color: transparent; }
      .fs-icon { width: 36px; height: 36px; justify-content: center; padding: 0; }
      .fs-more { display:flex; align-items:center; gap:6px; margin-left:auto; color: var(--fs-dim); font-size: 12px; }

      /* pointer */
      .fs-pointer { position: absolute; width: 14px; height: 14px; background: var(--fs-surface-2); border-left:1px solid var(--fs-border); border-top:1px solid var(--fs-border); transform: rotate(45deg); top:calc(50% - 7px); }
      .fs-pointer.right { left: -7px; }
      .fs-pointer.left { right: -7px; transform: rotate(225deg); }

      /* Modal */
      .fs-modal-backdrop {
        position: fixed; inset: 0; background: rgba(0,0,0,.5); backdrop-filter: blur(2px);
        z-index: 60; display:flex; align-items: center; justify-content: center; padding: 20px;
      }
      .fs-modal {
        width: min(1080px, 96vw);
        max-height: 92vh;
        background: var(--fs-surface-2);
        border: 1px solid var(--fs-border);
        border-radius: 18px;
        overflow: hidden;
        box-shadow: 0 32px 80px rgba(0,0,0,.55);
        display: flex; flex-direction: column;
      }
      .fs-modal-hero { height: 220px; background-size: cover; background-position: center; }
      .fs-modal-content { padding: 16px; overflow: auto; }
      .fs-modal-head { display:flex; align-items:flex-start; justify-content: space-between; gap: 12px; }
      .fs-modal-title { font-size: 22px; margin: 0 0 4px; }
      .fs-modal-sub { font-size: 13px; color: var(--fs-dim); }
      .fs-modal-text { margin: 14px 0 6px; line-height: 1.55; color: #d7dbe1; }
      .fs-section { font-size: 14px; margin: 14px 0 8px; color: #dfe3ea; }
      .fs-gallery { display:grid; grid-template-columns: repeat(auto-fill, minmax(160px,1fr)); gap: 10px; }
      .fs-thumb { aspect-ratio: 16/10; background-size: cover; background-position:center; border-radius: 10px; border:1px solid var(--fs-border); }
      .fs-files { list-style: none; padding: 0; margin: 0; display: grid; gap: 8px; }
      .fs-file { display:flex; align-items:center; gap:10px; border:1px solid var(--fs-border); border-radius: 12px; padding: 8px 10px; background: var(--fs-surface); }
      .fs-file .name { font-weight: 600; }
      .fs-file .meta { margin-left: auto; color: var(--fs-dim); font-size: 12px; }
      .fs-link { background: transparent; border: 1px solid var(--fs-border); color: var(--fs-accent); border-radius: 10px; padding: 6px 10px; cursor: pointer; }
      .fs-modal-actions { display:flex; align-items:center; gap: 10px; margin-top: 14px; }
      .fs-btn.ghost { background: transparent; }
      .spacer { flex: 1; }

      /* Responsiveness */
      @media (max-width: 720px) {
        .fs-grid { grid-template-columns: repeat(auto-fill, minmax(148px, 1fr)); gap: 12px; }
        .fs-preview { width: 360px; height: 260px; }
        .fs-modal-hero { height: 180px; }
      }
    `}</style>
  );
}

function FluentHoverPeekTab({ items, onOpen }) {
  const [active, setActive] = useState(null);

  const data = useMemo(() => {
    if (items?.length) return items;
    return [
      {
        id: "6061",
        title: "AA 6061-T6 Plate",
        subtitle: "General purpose structural aluminum",
        rating: 4.7,
        price: "From â‚¬3.29/kg",
        tags: ["Extrusion", "Plate", "Weldable"],
        cover: "/assets/aluminum/plate-6061.jpg",
        short:
          "Lightweight structural plate, great strength-to-weight and excellent machinability.",
        long:
          "AA 6061-T6 is a precipitation-hardened aluminum alloy with magnesium and silicon. Excellent weldability; used for frames, fixtures, marine and aerospace.",
        files: [
          { name: "6061-T6_Cert_Mill.pdf", size: "482 KB", type: "PDF" },
          { name: "6061_Tempers_Table.xlsx", size: "35 KB", type: "XLSX" },
          { name: "Machining_Notes.txt", size: "3 KB", type: "TXT" },
        ],
        images: [
          "/assets/aluminum/mill-finish.jpg",
          "/assets/aluminum/anodized.jpg",
          "/assets/aluminum/cnc.jpg",
        ],
      },
      {
        id: "7075",
        title: "AA 7075-T651 Bar",
        subtitle: "High-strength aerospace grade",
        rating: 4.9,
        price: "From â‚¬6.10/kg",
        tags: ["Bar", "Aerospace", "High Strength"],
        cover: "/assets/aluminum/bar-7075.jpg",
        short:
          "Exceptional strength. Popular for tooling, jigs, and high-load components.",
        long:
          "7075-T651 has zinc as the primary alloying element, strong fatigue strength, average machinability. Not recommended for welding.",
        files: [
          { name: "7075_T651_DataSheet.pdf", size: "612 KB", type: "PDF" },
          { name: "Heat_Treatment_Guide.pdf", size: "219 KB", type: "PDF" },
        ],
        images: ["/assets/aluminum/airframe.jpg", "/assets/aluminum/tooling.jpg"],
      },
      {
        id: "5083",
        title: "AA 5083-H116 Sheet",
        subtitle: "Marine corrosion resistance",
        rating: 4.6,
        price: "From â‚¬4.48/kg",
        tags: ["Sheet", "Marine", "Corrosion Resistant"],
        cover: "/assets/aluminum/sheet-5083.jpg",
        short: "Outstanding seawater corrosion resistance; ideal for hulls and decks.",
        long:
          "5083-H116 performs in extreme environments and retains strength after welding. Common in shipbuilding, pressure vessels and cryogenics.",
        files: [{ name: "5083_WPS_Notes.pdf", size: "154 KB", type: "PDF" }],
        images: ["/assets/aluminum/hull.jpg"],
      },
      {
        id: "3003",
        title: "AA 3003 Coil",
        subtitle: "Formable & economical",
        rating: 4.3,
        price: "From â‚¬2.41/kg",
        tags: ["Coil", "Forming", "Food-grade"],
        cover: "/assets/aluminum/coil-3003.jpg",
        short:
          "Great corrosion resistance and workability for panels, ducts, and cladding.",
        long:
          "3003 is aluminum-manganese with moderate strength and excellent workability. Used for chemical equipment, HVAC fins, and trim.",
        files: [{ name: "3003_Chem_Comp.csv", size: "4 KB", type: "CSV" }],
        images: ["/assets/aluminum/coils.jpg"],
      },
    ];
  }, [items]);

  const openModal = (item) => {
    setActive(item);
    onOpen && onOpen(item);
  };

  // util for keyboard activation on role="button"
  const kActivate = (fn) => (e) => {
    if (e.key === "Enter" || e.key === " ") {
      e.preventDefault();
      fn(e);
    }
  };

  return (
    <div className="w-full min-h-[60vh]">
      <div className="mb-4">
        <h2 className="text-xl font-semibold">Materials</h2>
        <p className="text-sm text-neutral-400">
          Hover a card for a quick peek. Click <span className="font-medium">Open</span> to see full details.
        </p>
      </div>

      <div className="grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5">
        {data.map((item) => (
          <motion.div
            key={item.id}
            className="group relative overflow-hidden rounded-2xl bg-neutral-800/50 ring-1 ring-black/10 hover:ring-white/10"
            initial={false}
            whileHover={{ y: -2 }}
            transition={{ type: "spring", stiffness: 400, damping: 30 }}
          >
            <div className="relative aspect-[4/5] w-full">
              {item.cover ? (
                <img
                  src={item.cover}
                  alt={item.title}
                  className="absolute inset-0 h-full w-full object-cover"
                  draggable={false}
                />
              ) : (
                <div className="absolute inset-0 bg-gradient-to-br from-sky-700/60 via-sky-900 to-black" />
              )}

              <div className="pointer-events-none absolute inset-x-0 top-0 h-28 bg-gradient-to-b from-black/60 to-transparent" />
              <div className="absolute left-3 top-3 right-3">
                <div className="inline-flex items-center gap-1 rounded-full bg-black/50 px-2 py-1 text-[11px] text-white/90 backdrop-blur">
                  <Star className="h-3 w-3 -mt-[1px]" />
                  <span>{(item.rating ?? 0).toFixed(1)}</span>
                </div>
              </div>

              <div className="absolute inset-x-3 bottom-3 flex flex-wrap items-center gap-2">
                <div className="rounded-lg bg-black/40 px-2 py-1 text-xs text-white/80 backdrop-blur">
                  {item.title}
                </div>
                {item.price && (
                  <div className="rounded-lg bg-black/30 px-2 py-1 text-[11px] text-white/70 backdrop-blur">
                    {item.price}
                  </div>
                )}
              </div>

              {/* HOVER OVERLAY (quick peek) */}
              <div className="absolute inset-0 flex items-end">
                <div
                  className="opacity-0 translate-y-3 group-hover:opacity-100 group-hover:translate-y-0 transition-all duration-200 ease-out w-full p-3"
                >
                  <div className="rounded-xl bg-black/70 p-3 text-white/90 backdrop-blur-md ring-1 ring-white/10">
                    <div className="mb-1 flex items-center justify-between">
                      <div className="text-sm font-medium">{item.title}</div>
                      <div className="text-[11px] text-white/60">{item.subtitle}</div>
                    </div>
                    <p className="line-clamp-2 text-xs text-white/80">
                      {item.short || "Quick overview not provided."}
                    </p>

                    {item.tags?.length ? (
                      <div className="mt-2 flex flex-wrap gap-1.5">
                        {item.tags.slice(0, 3).map((t) => (
                          <span
                            key={t}
                            className="rounded-md bg-white/10 px-1.5 py-0.5 text-[10px] text-white/80"
                          >
                            {t}
                          </span>
                        ))}
                      </div>
                    ) : null}

                    {/* actions â€” NOT <button> to avoid nested-button hydration issues */}
                    <div className="mt-3 flex items-center gap-2">
                      <div
                        role="button"
                        tabIndex={0}
                        aria-label="Open details"
                        onClick={(e) => {
                          e.stopPropagation();
                          openModal(item);
                        }}
                        onKeyDown={kActivate(() => openModal(item))}
                        className="inline-flex items-center gap-1 rounded-lg bg-white text-black px-3 py-1.5 text-xs font-semibold
                                   hover:bg-white/90 focus:outline-none focus:ring-2 focus:ring-white/40"
                      >
                        Open
                        <ChevronRight className="h-4 w-4" />
                      </div>

                      <div
                        role="button"
                        tabIndex={0}
                        aria-label="Save"
                        onClick={(e) => e.stopPropagation()}
                        onKeyDown={kActivate(() => {})}
                        className="inline-flex items-center gap-1 rounded-lg bg-white/10 px-2.5 py-1.5 text-xs text-white/90
                                   hover:bg-white/15 focus:outline-none focus:ring-2 focus:ring-white/30"
                        title="Save"
                      >
                        <Bookmark className="h-4 w-4" />
                        Save
                      </div>

                      <div
                        role="button"
                        tabIndex={0}
                        aria-label="Share"
                        onClick={(e) => e.stopPropagation()}
                        onKeyDown={kActivate(() => {})}
                        className="inline-flex items-center gap-1 rounded-lg bg-white/10 px-2.5 py-1.5 text-xs text-white/90
                                   hover:bg-white/15 focus:outline-none focus:ring-2 focus:ring-white/30"
                        title="Share"
                      >
                        <Share2 className="h-4 w-4" />
                        Share
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </motion.div>
        ))}
      </div>

      {/* MODAL */}
      <AnimatePresence>
        {active && (
          <motion.div
            className="fixed inset-0 z-50 flex items-center justify-center p-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
          >
            <div
              className="absolute inset-0 bg-black/60 backdrop-blur-sm"
              onClick={() => setActive(null)}
            />
            <motion.div
              initial={{ scale: 0.98, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.98, opacity: 0 }}
              transition={{ type: "spring", stiffness: 260, damping: 24 }}
              className="relative z-10 w-full max-w-5xl overflow-hidden rounded-2xl bg-neutral-900 ring-1 ring-white/10"
              role="dialog"
              aria-modal="true"
            >
              <div className="relative h-56 w-full">
                {active.cover ? (
                  <img
                    src={active.cover}
                    alt={active.title}
                    className="absolute inset-0 h-full w-full object-cover"
                  />
                ) : (
                  <div className="absolute inset-0 bg-gradient-to-br from-sky-700 via-sky-900 to-black" />
                )}
                <div className="absolute inset-0 bg-gradient-to-t from-neutral-900 to-transparent" />
                <div className="absolute bottom-4 left-4 right-4 flex items-end justify-between">
                  <div>
                    <h3 className="text-xl font-semibold">{active.title}</h3>
                    <p className="text-sm text-white/70">{active.subtitle}</p>
                  </div>
                  <div className="rounded-lg bg-black/50 px-2 py-1 text-white/90 backdrop-blur ring-1 ring-white/10">
                    <span className="inline-flex items-center gap-1 text-sm">
                      <Star className="h-4 w-4" />
                      {(active.rating ?? 0).toFixed(1)}
                    </span>
                  </div>
                </div>
              </div>

              <div className="grid grid-cols-1 gap-0 md:grid-cols-[1.5fr_1fr]">
                <div className="p-4 md:p-6">
                  <h4 className="mb-2 text-sm font-semibold text-white/90">Overview</h4>
                  <p className="text-sm leading-6 text-white/80">
                    {active.long ||
                      "Detailed view with rich content. Use this space to show aluminum alloy specs, manufacturing notes, compliance, images, and links."}
                  </p>

                  {active.images?.length ? (
                    <>
                      <h4 className="mt-6 mb-2 text-sm font-semibold text-white/90">Gallery</h4>
                      <div className="grid grid-cols-2 gap-3 md:grid-cols-3">
                        {active.images.map((src, i) => (
                          <div key={i} className="overflow-hidden rounded-lg ring-1 ring-white/10">
                            <img src={src} alt={`preview-${i + 1}`} className="h-28 w-full object-cover md:h-32" />
                          </div>
                        ))}
                      </div>
                    </>
                  ) : null}
                </div>

                <div className="border-t border-white/10 p-4 md:border-l md:border-t-0 md:p-6">
                  <div className="space-y-3">
                    <button className="flex w-full items-center justify-center gap-2 rounded-xl bg-white px-4 py-2 font-medium text-black hover:bg-white/90 focus:outline-none focus:ring-2 focus:ring-white/40">
                      <Download className="h-4 w-4" />
                      Request Quote
                    </button>
                    <button className="flex w-full items-center justify-center gap-2 rounded-xl bg-white/10 px-4 py-2 text-white hover:bg-white/15 focus:outline-none focus:ring-2 focus:ring-white/30">
                      <ExternalLink className="h-4 w-4" />
                      Open Datasheet
                    </button>
                  </div>

                  <h4 className="mt-6 mb-2 text-sm font-semibold text-white/90">Attachments</h4>
                  <ul className="space-y-2">
                    {(active.files ?? []).map((f) => (
                      <li key={f.name} className="flex items-center justify-between rounded-lg bg-white/5 px-3 py-2 ring-1 ring-white/10">
                        <div className="flex items-center gap-2">
                          <FileText className="h-4 w-4 text-white/70" />
                          <div>
                            <div className="text-sm text-white/90">{f.name}</div>
                            <div className="text-[11px] text-white/60">
                              {f.type || "File"} {f.size ? `Â· ${f.size}` : ""}
                            </div>
                          </div>
                        </div>
                        <button className="rounded-md bg-white/10 px-2 py-1 text-xs text-white/90 hover:bg-white/15">
                          View
                        </button>
                      </li>
                    ))}
                    {!active.files?.length && (
                      <li className="rounded-lg bg-white/5 px-3 py-2 text-sm text-white/70 ring-1 ring-white/10">
                        No files attached.
                      </li>
                    )}
                  </ul>
                </div>
              </div>

              <div className="flex items-center justify-between border-t border-white/10 px-4 py-3 md:px-6">
                <div className="text-xs text-white/60">{active.tags?.join(" Â· ")}</div>
                <button
                  onClick={() => setActive(null)}
                  className="rounded-lg bg-white/10 px-3 py-1.5 text-sm text-white hover:bg-white/15"
                >
                  Close
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}


